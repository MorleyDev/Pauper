/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		;
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(requestTimeout) { // eslint-disable-line no-unused-vars
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if(typeof XMLHttpRequest === "undefined")
/******/ 				return reject(new Error("No browser support"));
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch(err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if(request.readyState !== 4) return;
/******/ 				if(request.status === 0) {
/******/ 					// timeout
/******/ 					reject(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 				} else if(request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if(request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch(e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "92406b8b13016cc14f56"; // eslint-disable-line no-unused-vars
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if(me.children.indexOf(request) < 0)
/******/ 					me.children.push(request);
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name) && name !== "e") {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/ 	
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if(hotStatus === "prepare") {
/******/ 					if(!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 2;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if(!deferred) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve().then(function() {
/******/ 				return hotApply(hotApplyOnUpdate);
/******/ 			}).then(
/******/ 				function(result) {
/******/ 					deferred.resolve(result);
/******/ 				},
/******/ 				function(err) {
/******/ 					deferred.reject(err);
/******/ 				}
/******/ 			);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/ 	
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/ 	
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while(queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if(module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(!parent) continue;
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 	
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn("[HMR] unexpected require(" + result.moduleId + ") to disposed module");
/******/ 		};
/******/ 	
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				var result;
/******/ 				if(hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if(result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch(result.type) {
/******/ 					case "self-declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of self decline: " + result.moduleId + chainInfo);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of declined dependency: " + result.moduleId + " in " + result.parentId + chainInfo);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if(options.onUnaccepted)
/******/ 							options.onUnaccepted(result);
/******/ 						if(!options.ignoreUnaccepted)
/******/ 							abortError = new Error("Aborted because " + moduleId + " is not accepted" + chainInfo);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if(options.onAccepted)
/******/ 							options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if(options.onDisposed)
/******/ 							options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if(abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if(doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for(moduleId in result.outdatedDependencies) {
/******/ 						if(Object.prototype.hasOwnProperty.call(result.outdatedDependencies, moduleId)) {
/******/ 							if(!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(outdatedDependencies[moduleId], result.outdatedDependencies[moduleId]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if(doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if(hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/ 	
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				if(module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for(j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if(idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				if(module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for(i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if(cb) {
/******/ 							if(callbacks.indexOf(cb) >= 0) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for(i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch(err) {
/******/ 							if(options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if(!options.ignoreErrored) {
/******/ 								if(!error)
/******/ 									error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err2) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								orginalError: err, // TODO remove in webpack 4
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err2;
/******/ 						}
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if(options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if(!options.ignoreErrored) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./src/index.ts")(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/polyfill/lib/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__("./node_modules/core-js/shim.js");

__webpack_require__("./node_modules/regenerator-runtime/runtime.js");

if (global._babelPolyfill) {
  throw new Error("only one instance of @babel/polyfill is allowed");
}

global._babelPolyfill = true;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/@morleydev/functional-pipe/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var Iterables = __webpack_require__("./node_modules/@morleydev/functional-pipe/iterable/operators.js");

exports.Iterables = Iterables;

var Generators = __webpack_require__("./node_modules/@morleydev/functional-pipe/iterable/generators.js");

exports.Generators = Generators;

var pipe_1 = __webpack_require__("./node_modules/@morleydev/functional-pipe/pipe.js");

exports.$$ = pipe_1.$$; //# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@morleydev/functional-pipe/iterable/generators.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(range),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(infinite),
    _marked3 =
/*#__PURE__*/
regeneratorRuntime.mark(empty),
    _marked4 =
/*#__PURE__*/
regeneratorRuntime.mark(concat),
    _marked5 =
/*#__PURE__*/
regeneratorRuntime.mark(keys),
    _marked6 =
/*#__PURE__*/
regeneratorRuntime.mark(values);

Object.defineProperty(exports, "__esModule", {
  value: true
});

function range(start, count) {
  var i;
  return regeneratorRuntime.wrap(function range$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          i = 0;

        case 1:
          if (!(i < count)) {
            _context.next = 7;
            break;
          }

          _context.next = 4;
          return start + i;

        case 4:
          ++i;
          _context.next = 1;
          break;

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

exports.range = range;

function infinite() {
  var i;
  return regeneratorRuntime.wrap(function infinite$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          i = 0;

        case 1:
          _context2.next = 3;
          return i;

        case 3:
          ++i;
          _context2.next = 1;
          break;

        case 6:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, this);
}

exports.infinite = infinite;

function empty() {
  return regeneratorRuntime.wrap(function empty$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3, this);
}

exports.empty = empty;

function concat() {
  var _len,
      iterables,
      _key,
      _i,
      iterable,
      _args4 = arguments;

  return regeneratorRuntime.wrap(function concat$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          for (_len = _args4.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {
            iterables[_key] = _args4[_key];
          }

          _i = 0;

        case 2:
          if (!(_i < iterables.length)) {
            _context4.next = 8;
            break;
          }

          iterable = iterables[_i];
          return _context4.delegateYield(iterable, "t0", 5);

        case 5:
          _i++;
          _context4.next = 2;
          break;

        case 8:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4, this);
}

exports.concat = concat;

function keys(item) {
  var key;
  return regeneratorRuntime.wrap(function keys$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.t0 = regeneratorRuntime.keys(item);

        case 1:
          if ((_context5.t1 = _context5.t0()).done) {
            _context5.next = 7;
            break;
          }

          key = _context5.t1.value;
          _context5.next = 5;
          return key;

        case 5:
          _context5.next = 1;
          break;

        case 7:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked5, this);
}

exports.keys = keys;

function values(item) {
  var key;
  return regeneratorRuntime.wrap(function values$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          _context6.t0 = regeneratorRuntime.keys(item);

        case 1:
          if ((_context6.t1 = _context6.t0()).done) {
            _context6.next = 7;
            break;
          }

          key = _context6.t1.value;
          _context6.next = 5;
          return item[key];

        case 5:
          _context6.next = 1;
          break;

        case 7:
        case "end":
          return _context6.stop();
      }
    }
  }, _marked6, this);
}

exports.values = values; //# sourceMappingURL=generators.js.map

/***/ }),

/***/ "./node_modules/@morleydev/functional-pipe/iterable/operators.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(unit),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(distinct);

Object.defineProperty(exports, "__esModule", {
  value: true
});

function unit(iterable) {
  return regeneratorRuntime.wrap(function unit$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield(iterable, "t0", 1);

        case 1:
          return _context.abrupt("return", _context.t0);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

exports.unit = unit;

function tap(tapper) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(it) {
      var index, _iterator, _isArray, _i, _ref, _value;

      return regeneratorRuntime.wrap(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              index = 0;
              _iterator = it, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

            case 2:
              if (!_isArray) {
                _context2.next = 8;
                break;
              }

              if (!(_i >= _iterator.length)) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("break", 19);

            case 5:
              _ref = _iterator[_i++];
              _context2.next = 12;
              break;

            case 8:
              _i = _iterator.next();

              if (!_i.done) {
                _context2.next = 11;
                break;
              }

              return _context2.abrupt("break", 19);

            case 11:
              _ref = _i.value;

            case 12:
              _value = _ref;
              tapper(_value, index);
              _context2.next = 16;
              return _value;

            case 16:
              index = index + 1;

            case 17:
              _context2.next = 2;
              break;

            case 19:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee, this);
    })
  );
}

exports.tap = tap;

function map(mapper) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(iterable) {
      var index, _iterator2, _isArray2, _i2, _ref2, _value2;

      return regeneratorRuntime.wrap(function _callee2$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              index = 0;
              _iterator2 = iterable, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();

            case 2:
              if (!_isArray2) {
                _context3.next = 8;
                break;
              }

              if (!(_i2 >= _iterator2.length)) {
                _context3.next = 5;
                break;
              }

              return _context3.abrupt("break", 18);

            case 5:
              _ref2 = _iterator2[_i2++];
              _context3.next = 12;
              break;

            case 8:
              _i2 = _iterator2.next();

              if (!_i2.done) {
                _context3.next = 11;
                break;
              }

              return _context3.abrupt("break", 18);

            case 11:
              _ref2 = _i2.value;

            case 12:
              _value2 = _ref2;
              _context3.next = 15;
              return mapper(_value2, index);

            case 15:
              index = index + 1;

            case 16:
              _context3.next = 2;
              break;

            case 18:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee2, this);
    })
  );
}

exports.map = map;

function flatMap(mapper) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(iterable) {
      var index, _iterator3, _isArray3, _i3, _ref3, _value3, innerIterable, _iterator4, _isArray4, _i4, _ref4, _inner;

      return regeneratorRuntime.wrap(function _callee3$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              index = 0;
              _iterator3 = iterable, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();

            case 2:
              if (!_isArray3) {
                _context4.next = 8;
                break;
              }

              if (!(_i3 >= _iterator3.length)) {
                _context4.next = 5;
                break;
              }

              return _context4.abrupt("break", 33);

            case 5:
              _ref3 = _iterator3[_i3++];
              _context4.next = 12;
              break;

            case 8:
              _i3 = _iterator3.next();

              if (!_i3.done) {
                _context4.next = 11;
                break;
              }

              return _context4.abrupt("break", 33);

            case 11:
              _ref3 = _i3.value;

            case 12:
              _value3 = _ref3;
              innerIterable = mapper(_value3, index);
              _iterator4 = innerIterable, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();

            case 15:
              if (!_isArray4) {
                _context4.next = 21;
                break;
              }

              if (!(_i4 >= _iterator4.length)) {
                _context4.next = 18;
                break;
              }

              return _context4.abrupt("break", 30);

            case 18:
              _ref4 = _iterator4[_i4++];
              _context4.next = 25;
              break;

            case 21:
              _i4 = _iterator4.next();

              if (!_i4.done) {
                _context4.next = 24;
                break;
              }

              return _context4.abrupt("break", 30);

            case 24:
              _ref4 = _i4.value;

            case 25:
              _inner = _ref4;
              _context4.next = 28;
              return _inner;

            case 28:
              _context4.next = 15;
              break;

            case 30:
              index = index + 1;

            case 31:
              _context4.next = 2;
              break;

            case 33:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee3, this);
    })
  );
}

exports.flatMap = flatMap;

function filter(predicate) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(iterable) {
      var index, _iterator5, _isArray5, _i5, _ref5, _value4;

      return regeneratorRuntime.wrap(function _callee4$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              index = 0;
              _iterator5 = iterable, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();

            case 2:
              if (!_isArray5) {
                _context5.next = 8;
                break;
              }

              if (!(_i5 >= _iterator5.length)) {
                _context5.next = 5;
                break;
              }

              return _context5.abrupt("break", 19);

            case 5:
              _ref5 = _iterator5[_i5++];
              _context5.next = 12;
              break;

            case 8:
              _i5 = _iterator5.next();

              if (!_i5.done) {
                _context5.next = 11;
                break;
              }

              return _context5.abrupt("break", 19);

            case 11:
              _ref5 = _i5.value;

            case 12:
              _value4 = _ref5;

              if (!predicate(_value4, index)) {
                _context5.next = 16;
                break;
              }

              _context5.next = 16;
              return _value4;

            case 16:
              index = index + 1;

            case 17:
              _context5.next = 2;
              break;

            case 19:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee4, this);
    })
  );
}

exports.filter = filter;

function reduce(predicate, initial) {
  return function (iterable) {
    var index = 0;
    var prevState = initial;

    for (var _iterator6 = iterable, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var _value5 = _ref6;
      prevState = predicate(prevState, _value5, index);
      index = index + 1;
    }

    return prevState;
  };
}

exports.reduce = reduce;

function scan(predicate, initial) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5(iterable) {
      var index, prevState, _iterator7, _isArray7, _i7, _ref7, _value6;

      return regeneratorRuntime.wrap(function _callee5$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              index = 0;
              prevState = initial;
              _iterator7 = iterable, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();

            case 3:
              if (!_isArray7) {
                _context6.next = 9;
                break;
              }

              if (!(_i7 >= _iterator7.length)) {
                _context6.next = 6;
                break;
              }

              return _context6.abrupt("break", 20);

            case 6:
              _ref7 = _iterator7[_i7++];
              _context6.next = 13;
              break;

            case 9:
              _i7 = _iterator7.next();

              if (!_i7.done) {
                _context6.next = 12;
                break;
              }

              return _context6.abrupt("break", 20);

            case 12:
              _ref7 = _i7.value;

            case 13:
              _value6 = _ref7;
              prevState = predicate(prevState, _value6, index);
              _context6.next = 17;
              return prevState;

            case 17:
              index = index + 1;

            case 18:
              _context6.next = 3;
              break;

            case 20:
              return _context6.abrupt("return", prevState);

            case 21:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee5, this);
    })
  );
}

exports.scan = scan;

function fold(predicate) {
  return function (iterable) {
    var _Array$from = Array.from(iterable),
        head = _Array$from[0],
        tail = _Array$from.slice(1);

    return reduce(predicate, head)(tail);
  };
}

exports.fold = fold;

function take(count) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee6(iterable) {
      var i, _iterator8, _isArray8, _i8, _ref8, _item;

      return regeneratorRuntime.wrap(function _callee6$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              i = 0;
              _iterator8 = iterable, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();

            case 2:
              if (!_isArray8) {
                _context7.next = 8;
                break;
              }

              if (!(_i8 >= _iterator8.length)) {
                _context7.next = 5;
                break;
              }

              return _context7.abrupt("break", 20);

            case 5:
              _ref8 = _iterator8[_i8++];
              _context7.next = 12;
              break;

            case 8:
              _i8 = _iterator8.next();

              if (!_i8.done) {
                _context7.next = 11;
                break;
              }

              return _context7.abrupt("break", 20);

            case 11:
              _ref8 = _i8.value;

            case 12:
              _item = _ref8;

              if (!(i >= count)) {
                _context7.next = 15;
                break;
              }

              return _context7.abrupt("return");

            case 15:
              _context7.next = 17;
              return _item;

            case 17:
              i = i + 1;

            case 18:
              _context7.next = 2;
              break;

            case 20:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee6, this);
    })
  );
}

exports.take = take;

function last(iterable) {
  var last = undefined;

  for (var _iterator9 = iterable, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
    var _ref9;

    if (_isArray9) {
      if (_i9 >= _iterator9.length) break;
      _ref9 = _iterator9[_i9++];
    } else {
      _i9 = _iterator9.next();
      if (_i9.done) break;
      _ref9 = _i9.value;
    }

    var _item2 = _ref9;
    last = _item2;
  }

  return last;
}

exports.last = last;

function first(iterable) {
  for (var _iterator10 = iterable, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {
    var _ref10;

    if (_isArray10) {
      if (_i10 >= _iterator10.length) break;
      _ref10 = _iterator10[_i10++];
    } else {
      _i10 = _iterator10.next();
      if (_i10.done) break;
      _ref10 = _i10.value;
    }

    var _item3 = _ref10;
    return _item3;
  }

  return undefined;
}

exports.first = first;

function skip(count) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee7(iterable) {
      var i, _iterator11, _isArray11, _i11, _ref11, _item4;

      return regeneratorRuntime.wrap(function _callee7$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              i = 0;
              _iterator11 = iterable, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();

            case 2:
              if (!_isArray11) {
                _context8.next = 8;
                break;
              }

              if (!(_i11 >= _iterator11.length)) {
                _context8.next = 5;
                break;
              }

              return _context8.abrupt("break", 19);

            case 5:
              _ref11 = _iterator11[_i11++];
              _context8.next = 12;
              break;

            case 8:
              _i11 = _iterator11.next();

              if (!_i11.done) {
                _context8.next = 11;
                break;
              }

              return _context8.abrupt("break", 19);

            case 11:
              _ref11 = _i11.value;

            case 12:
              _item4 = _ref11;

              if (!(i >= count)) {
                _context8.next = 16;
                break;
              }

              _context8.next = 16;
              return _item4;

            case 16:
              i = i + 1;

            case 17:
              _context8.next = 2;
              break;

            case 19:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee7, this);
    })
  );
}

exports.skip = skip;

function takeWhile(predicate) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee8(iterable) {
      var i, _iterator12, _isArray12, _i12, _ref12, _item5;

      return regeneratorRuntime.wrap(function _callee8$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              i = 0;
              _iterator12 = iterable, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();

            case 2:
              if (!_isArray12) {
                _context9.next = 8;
                break;
              }

              if (!(_i12 >= _iterator12.length)) {
                _context9.next = 5;
                break;
              }

              return _context9.abrupt("break", 20);

            case 5:
              _ref12 = _iterator12[_i12++];
              _context9.next = 12;
              break;

            case 8:
              _i12 = _iterator12.next();

              if (!_i12.done) {
                _context9.next = 11;
                break;
              }

              return _context9.abrupt("break", 20);

            case 11:
              _ref12 = _i12.value;

            case 12:
              _item5 = _ref12;

              if (predicate(_item5, i)) {
                _context9.next = 15;
                break;
              }

              return _context9.abrupt("break", 20);

            case 15:
              _context9.next = 17;
              return _item5;

            case 17:
              i = i + 1;

            case 18:
              _context9.next = 2;
              break;

            case 20:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee8, this);
    })
  );
}

exports.takeWhile = takeWhile;

function takeUntil(predicate) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee9(iterable) {
      var i, _iterator13, _isArray13, _i13, _ref13, _item6;

      return regeneratorRuntime.wrap(function _callee9$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              i = 0;
              _iterator13 = iterable, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();

            case 2:
              if (!_isArray13) {
                _context10.next = 8;
                break;
              }

              if (!(_i13 >= _iterator13.length)) {
                _context10.next = 5;
                break;
              }

              return _context10.abrupt("break", 20);

            case 5:
              _ref13 = _iterator13[_i13++];
              _context10.next = 12;
              break;

            case 8:
              _i13 = _iterator13.next();

              if (!_i13.done) {
                _context10.next = 11;
                break;
              }

              return _context10.abrupt("break", 20);

            case 11:
              _ref13 = _i13.value;

            case 12:
              _item6 = _ref13;

              if (!predicate(_item6, i)) {
                _context10.next = 15;
                break;
              }

              return _context10.abrupt("return");

            case 15:
              _context10.next = 17;
              return _item6;

            case 17:
              i = i + 1;

            case 18:
              _context10.next = 2;
              break;

            case 20:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee9, this);
    })
  );
}

exports.takeUntil = takeUntil;

function skipWhile(predicate) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee10(iterable) {
      var i, canReturn, _iterator14, _isArray14, _i14, _ref14, _item7;

      return regeneratorRuntime.wrap(function _callee10$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              i = 0;
              canReturn = false;
              _iterator14 = iterable, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();

            case 3:
              if (!_isArray14) {
                _context11.next = 9;
                break;
              }

              if (!(_i14 >= _iterator14.length)) {
                _context11.next = 6;
                break;
              }

              return _context11.abrupt("break", 26);

            case 6:
              _ref14 = _iterator14[_i14++];
              _context11.next = 13;
              break;

            case 9:
              _i14 = _iterator14.next();

              if (!_i14.done) {
                _context11.next = 12;
                break;
              }

              return _context11.abrupt("break", 26);

            case 12:
              _ref14 = _i14.value;

            case 13:
              _item7 = _ref14;

              if (canReturn) {
                _context11.next = 22;
                break;
              }

              canReturn = !predicate(_item7, i);

              if (!canReturn) {
                _context11.next = 19;
                break;
              }

              _context11.next = 19;
              return _item7;

            case 19:
              i = i + 1;
              _context11.next = 24;
              break;

            case 22:
              _context11.next = 24;
              return _item7;

            case 24:
              _context11.next = 3;
              break;

            case 26:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee10, this);
    })
  );
}

exports.skipWhile = skipWhile;

function skipUntil(predicate) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee11(iterable) {
      var i, canReturn, _iterator15, _isArray15, _i15, _ref15, _item8;

      return regeneratorRuntime.wrap(function _callee11$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              i = 0;
              canReturn = false;
              _iterator15 = iterable, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();

            case 3:
              if (!_isArray15) {
                _context12.next = 9;
                break;
              }

              if (!(_i15 >= _iterator15.length)) {
                _context12.next = 6;
                break;
              }

              return _context12.abrupt("break", 26);

            case 6:
              _ref15 = _iterator15[_i15++];
              _context12.next = 13;
              break;

            case 9:
              _i15 = _iterator15.next();

              if (!_i15.done) {
                _context12.next = 12;
                break;
              }

              return _context12.abrupt("break", 26);

            case 12:
              _ref15 = _i15.value;

            case 13:
              _item8 = _ref15;

              if (canReturn) {
                _context12.next = 22;
                break;
              }

              canReturn = predicate(_item8, i);

              if (!canReturn) {
                _context12.next = 19;
                break;
              }

              _context12.next = 19;
              return _item8;

            case 19:
              i = i + 1;
              _context12.next = 24;
              break;

            case 22:
              _context12.next = 24;
              return _item8;

            case 24:
              _context12.next = 3;
              break;

            case 26:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee11, this);
    })
  );
}

exports.skipUntil = skipUntil;

function concat() {
  for (var _len = arguments.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {
    iterables[_key] = arguments[_key];
  }

  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee12(it) {
      var _i16, iterable;

      return regeneratorRuntime.wrap(function _callee12$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.delegateYield(it, "t0", 1);

            case 1:
              _i16 = 0;

            case 2:
              if (!(_i16 < iterables.length)) {
                _context13.next = 8;
                break;
              }

              iterable = iterables[_i16];
              return _context13.delegateYield(iterable, "t1", 5);

            case 5:
              _i16++;
              _context13.next = 2;
              break;

            case 8:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee12, this);
    })
  );
}

exports.concat = concat;

function push() {
  for (var _len2 = arguments.length, next = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    next[_key2] = arguments[_key2];
  }

  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee13(it) {
      var _i17, iterable;

      return regeneratorRuntime.wrap(function _callee13$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.delegateYield(it, "t0", 1);

            case 1:
              _i17 = 0;

            case 2:
              if (!(_i17 < next.length)) {
                _context14.next = 9;
                break;
              }

              iterable = next[_i17];
              _context14.next = 6;
              return iterable;

            case 6:
              _i17++;
              _context14.next = 2;
              break;

            case 9:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee13, this);
    })
  );
}

exports.push = push;

function unshift() {
  for (var _len3 = arguments.length, next = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    next[_key3] = arguments[_key3];
  }

  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee14(it) {
      var i;
      return regeneratorRuntime.wrap(function _callee14$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              i = 0;

            case 1:
              if (!(i < next.length)) {
                _context15.next = 7;
                break;
              }

              _context15.next = 4;
              return next[next.length - i - 1];

            case 4:
              ++i;
              _context15.next = 1;
              break;

            case 7:
              return _context15.delegateYield(it, "t0", 8);

            case 8:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee14, this);
    })
  );
}

exports.unshift = unshift;

function some(predicate) {
  return function (it) {
    var i = 0;

    for (var _iterator16 = it, _isArray16 = Array.isArray(_iterator16), _i18 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {
      var _ref16;

      if (_isArray16) {
        if (_i18 >= _iterator16.length) break;
        _ref16 = _iterator16[_i18++];
      } else {
        _i18 = _iterator16.next();
        if (_i18.done) break;
        _ref16 = _i18.value;
      }

      var _item9 = _ref16;

      if (predicate(_item9, i)) {
        return true;
      }

      i = i + 1;
    }

    return false;
  };
}

exports.some = some;

function every(predicate) {
  return function (it) {
    var i = 0;

    for (var _iterator17 = it, _isArray17 = Array.isArray(_iterator17), _i19 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {
      var _ref17;

      if (_isArray17) {
        if (_i19 >= _iterator17.length) break;
        _ref17 = _iterator17[_i19++];
      } else {
        _i19 = _iterator17.next();
        if (_i19.done) break;
        _ref17 = _i19.value;
      }

      var _item10 = _ref17;

      if (!predicate(_item10, i)) {
        return false;
      }

      i = i + 1;
    }

    return true;
  };
}

exports.every = every;

function distinct(it) {
  var resultSet, _iterator18, _isArray18, _i20, _ref18, _item11;

  return regeneratorRuntime.wrap(function distinct$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          resultSet = new Set();
          _iterator18 = it, _isArray18 = Array.isArray(_iterator18), _i20 = 0, _iterator18 = _isArray18 ? _iterator18 : _iterator18[Symbol.iterator]();

        case 2:
          if (!_isArray18) {
            _context16.next = 8;
            break;
          }

          if (!(_i20 >= _iterator18.length)) {
            _context16.next = 5;
            break;
          }

          return _context16.abrupt("break", 19);

        case 5:
          _ref18 = _iterator18[_i20++];
          _context16.next = 12;
          break;

        case 8:
          _i20 = _iterator18.next();

          if (!_i20.done) {
            _context16.next = 11;
            break;
          }

          return _context16.abrupt("break", 19);

        case 11:
          _ref18 = _i20.value;

        case 12:
          _item11 = _ref18;

          if (resultSet.has(_item11)) {
            _context16.next = 17;
            break;
          }

          resultSet.add(_item11);
          _context16.next = 17;
          return _item11;

        case 17:
          _context16.next = 2;
          break;

        case 19:
        case "end":
          return _context16.stop();
      }
    }
  }, _marked2, this);
}

exports.distinct = distinct; //# sourceMappingURL=operators.js.map

/***/ }),

/***/ "./node_modules/@morleydev/functional-pipe/pipe.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.$$ = function (x) {
  return {
    $: function $(map) {
      return exports.$$(map(x));
    },
    $$: function $$(map) {
      return map(x);
    }
  };
}; //# sourceMappingURL=pipe.js.map

/***/ }),

/***/ "./node_modules/@morleydev/pauper/assets/web-asset-loader.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var howler_1 = __webpack_require__("./node_modules/howler/dist/howler.js");

var WebAssetLoader =
/*#__PURE__*/
function () {
  function WebAssetLoader() {
    this.images = {};
    this.soundeffects = {};
    this.music = {};
    this.jsons = {};
  }

  var _proto = WebAssetLoader.prototype;

  _proto.loadFont = function loadFont(id, path) {
    return Promise.resolve();
  };

  _proto.getSoundEffect = function getSoundEffect(id, path) {
    var audio = this.soundeffects[id];

    if (audio) {
      return audio;
    } else {
      var howl = new howler_1.Howl({
        src: path || ["./assets/" + id + ".ogg", "./assets/" + id + ".flac", "./assets/" + id + ".mp3", "./assets/" + id + ".wav"]
      });
      return this.soundeffects[id] = {
        howl: howl,
        name: id
      };
    }
  };

  _proto.loadSoundEffect =
  /*#__PURE__*/
  function () {
    var _loadSoundEffect = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(id, path) {
      var audio, howl;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              audio = this.soundeffects[id];

              if (!audio) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", audio);

            case 5:
              _context.next = 7;
              return loadAudioFromUrl(path);

            case 7:
              howl = _context.sent;
              return _context.abrupt("return", this.soundeffects[id] = {
                howl: howl,
                name: id
              });

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function loadSoundEffect(_x, _x2) {
      return _loadSoundEffect.apply(this, arguments);
    };
  }();

  _proto.getImage = function getImage(id, path) {
    var image = this.images[id];

    if (image != null) {
      return image;
    } else {
      var img = new Image();
      img.src = path || "./assets/" + id + ".png";
      this.images[id] = img;
      return img;
    }
  };

  _proto.loadImage =
  /*#__PURE__*/
  function () {
    var _loadImage = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(id, path) {
      var imageAlreadyLoaded, image;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              imageAlreadyLoaded = this.images[id];

              if (!(imageAlreadyLoaded != null)) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("return", imageAlreadyLoaded);

            case 5:
              _context2.next = 7;
              return loadImageFromUrl(path);

            case 7:
              image = _context2.sent;
              this.images[id] = image;
              return _context2.abrupt("return", image);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function loadImage(_x3, _x4) {
      return _loadImage.apply(this, arguments);
    };
  }();

  _proto.getMusic = function getMusic(id, path) {
    var audio = this.music[id];

    if (audio) {
      return audio;
    } else {
      var howl = new howler_1.Howl({
        src: path || ["./assets/" + id + ".ogg", "./assets/" + id + ".flac", "./assets/" + id + ".mp3", "./assets/" + id + ".wav"]
      });
      return this.music[id] = {
        howl: howl,
        name: id
      };
    }
  };

  _proto.loadMusic =
  /*#__PURE__*/
  function () {
    var _loadMusic = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(id, path) {
      var audio, howl;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              audio = this.music[id];

              if (!audio) {
                _context3.next = 5;
                break;
              }

              return _context3.abrupt("return", audio);

            case 5:
              _context3.next = 7;
              return loadAudioFromUrl(path);

            case 7:
              howl = _context3.sent;
              return _context3.abrupt("return", this.music[id] = {
                howl: howl,
                name: id
              });

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function loadMusic(_x5, _x6) {
      return _loadMusic.apply(this, arguments);
    };
  }();

  _proto.getJson = function getJson(id, path, notFound) {
    var asset = this.jsons[id];

    if (asset != null) {
      return asset;
    } else {
      if (notFound != null) {
        this.jsons[id] = notFound;
      }

      return notFound;
    }
  };

  _proto.loadJson =
  /*#__PURE__*/
  function () {
    var _loadJson = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(id, path, notFound) {
      var asset, result, body;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              asset = this.jsons[id];

              if (!(asset != null)) {
                _context4.next = 3;
                break;
              }

              return _context4.abrupt("return", asset);

            case 3:
              _context4.next = 5;
              return fetch(path);

            case 5:
              result = _context4.sent;

              if (!(result.status < 200 || result.status >= 300)) {
                _context4.next = 15;
                break;
              }

              if (!(notFound != null)) {
                _context4.next = 12;
                break;
              }

              this.jsons[id] = notFound;
              return _context4.abrupt("return", notFound);

            case 12:
              throw new Error("Could not find json object " + id + " (" + path + ")");

            case 13:
              _context4.next = 20;
              break;

            case 15:
              _context4.next = 17;
              return result.json();

            case 17:
              body = _context4.sent;
              this.jsons[id] = body;
              return _context4.abrupt("return", body);

            case 20:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function loadJson(_x7, _x8, _x9) {
      return _loadJson.apply(this, arguments);
    };
  }();

  return WebAssetLoader;
}();

exports.WebAssetLoader = WebAssetLoader;

function loadImageFromUrl(path) {
  return new Promise(function (resolve, reject) {
    var img = new Image();

    img.onload = function () {
      return resolve(img);
    };

    img.onerror = function () {
      return reject();
    };

    img.src = path;
  });
}

function loadAudioFromUrl(path) {
  return new Promise(function (resolve, reject) {
    var howl = new howler_1.Howl({
      src: [path],
      html5: true
    });

    if (howl.state() === "loaded") {
      return howl;
    } else {
      howl.once("load", function () {
        return resolve(howl);
      });
      howl.once("loaderror", function (id, err) {
        return reject(err);
      });
      howl.load();
      return howl;
    }
  });
}

/***/ }),

/***/ "./node_modules/@morleydev/pauper/maths/interpolation.maths.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.linearInterpolation = function (start, end) {
  return function (percentage) {
    return start + (end - start) * percentage;
  };
};

exports.cosineInterpolation = function (start, end) {
  return function (percentage) {
    var mu2 = (1 - Math.cos(percentage * Math.PI)) / 2;
    return start * (1 - mu2) + end * mu2;
  };
};

exports.exponentialInterpolation = function (power) {
  return function (start, end) {
    return function (percentage) {
      return exports.linearInterpolation(start, end)(Math.pow(percentage, power));
    };
  };
};

/***/ }),

/***/ "./node_modules/@morleydev/pauper/maths/vector.maths.func.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var interpolation_maths_1 = __webpack_require__("./node_modules/@morleydev/pauper/maths/interpolation.maths.js");

function abs(_ref) {
  var x = _ref.x,
      y = _ref.y;
  return {
    x: Math.abs(x),
    y: Math.abs(y)
  };
}

exports.abs = abs;

function invert(_ref2) {
  var x = _ref2.x,
      y = _ref2.y;
  return {
    x: -x,
    y: -y
  };
}

exports.invert = invert;

function add(lhs, rhs) {
  return {
    x: lhs.x + rhs.x,
    y: lhs.y + rhs.y
  };
}

exports.add = add;

function subtract(lhs, rhs) {
  return {
    x: lhs.x - rhs.x,
    y: lhs.y - rhs.y
  };
}

exports.subtract = subtract;

function multiply(lhs, rhs) {
  return {
    x: lhs.x * rhs,
    y: lhs.y * rhs
  };
}

exports.multiply = multiply;

function dot(lhs, rhs) {
  return {
    x: lhs.x * rhs.x,
    y: lhs.y * rhs.y
  };
}

exports.dot = dot;

function divide(lhs, rhs) {
  return {
    x: lhs.x / rhs,
    y: lhs.y / rhs
  };
}

exports.divide = divide;

function magnitudeSquared(lhs) {
  return lhs.x * lhs.x + lhs.y * lhs.y;
}

exports.magnitudeSquared = magnitudeSquared;

function magnitude(lhs) {
  return Math.sqrt(magnitudeSquared(lhs));
}

exports.magnitude = magnitude;

function normalise(lhs) {
  return divide(lhs, magnitude(lhs));
}

exports.normalise = normalise;

function dotProduct(lhs, rhs) {
  return lhs.x * rhs.x + lhs.y * rhs.y;
}

exports.dotProduct = dotProduct;

function normal(lhs) {
  return {
    x: -lhs.y,
    y: lhs.x
  };
}

exports.normal = normal;

function constraint(topLeft, bottomRight) {
  return function (lhs) {
    return {
      x: Math.min(Math.max(topLeft.x, lhs.x), bottomRight.x),
      y: Math.min(Math.max(topLeft.y, lhs.y), bottomRight.y)
    };
  };
}

exports.constraint = constraint;

function crossProduct(lhs, rhs) {
  return lhs.x * rhs.y - lhs.y * rhs.x;
}

exports.crossProduct = crossProduct;

function linearInterpolation(lhs, rhs) {
  var interpolateX = interpolation_maths_1.linearInterpolation(lhs.x, rhs.x);
  var interpolateY = interpolation_maths_1.linearInterpolation(lhs.y, rhs.y);
  return function (percentage) {
    return {
      x: interpolateX(percentage),
      y: interpolateY(percentage)
    };
  };
}

exports.linearInterpolation = linearInterpolation;

function cosineInterpolation(lhs, rhs) {
  var interpolateX = interpolation_maths_1.cosineInterpolation(lhs.x, rhs.x);
  var interpolateY = interpolation_maths_1.cosineInterpolation(lhs.y, rhs.y);
  return function (percentage) {
    return {
      x: interpolateX(percentage),
      y: interpolateY(percentage)
    };
  };
}

exports.cosineInterpolation = cosineInterpolation;

function exponentialInterpolation(exponent) {
  var exponentialInterpolator = interpolation_maths_1.exponentialInterpolation(exponent);
  return function (lhs, rhs) {
    var interpolateX = exponentialInterpolator(lhs.x, rhs.x);
    var interpolateY = exponentialInterpolator(lhs.y, rhs.y);
    return function (percentage) {
      return {
        x: interpolateX(percentage),
        y: interpolateY(percentage)
      };
    };
  };
}

exports.exponentialInterpolation = exponentialInterpolation;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/maths/vector.maths.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var func = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.func.js");

var values = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.values.js");

exports.Vector2 = Object.assign(function (x, y) {
  return {
    x: x,
    y: y
  };
}, Object.assign({}, func, values));

/***/ }),

/***/ "./node_modules/@morleydev/pauper/maths/vector.maths.values.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Zero = {
  x: 0,
  y: 0
};
exports.Unit = {
  x: Math.sqrt(0.5),
  y: Math.sqrt(0.5)
};

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/circle/circle.model.bounding.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function boundingBox(circle) {
  return {
    x: circle.x - circle.radius,
    y: circle.y - circle.radius,
    width: circle.radius * 2,
    height: circle.radius * 2
  };
}

exports.boundingBox = boundingBox;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/circle/circle.model.is.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function is(possible) {
  return possible.radius != null && possible.x != null && possible.y != null;
}

exports.is = is;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/circle/circle.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var bounding = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.bounding.js");

var is = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

var lineTo = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.lineTo.js");

var overlap = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.overlap.js");

exports.Circle = Object.assign(function (x, y, radius) {
  return {
    x: x,
    y: y,
    radius: radius
  };
}, Object.assign({}, bounding, is, overlap, lineTo));

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/circle/circle.model.lineTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var vector_maths_func_1 = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.func.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

var line_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.lineTo.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lineTo.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

function lineTo(lhs, rhs) {
  if (line_model_is_1.is(rhs)) {
    var _line_model_lineTo_1$ = line_model_lineTo_1.lineLine2ToCircle(rhs, lhs),
        b = _line_model_lineTo_1$[0],
        a = _line_model_lineTo_1$[1];

    return [a, b];
  } else if (triangle_model_is_1.is(rhs)) {
    return lineCircleToTriangle2(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return lineCircleToCircle(lhs, rhs);
  } else if (rectangle_model_is_1.is(rhs)) {
    var _rectangle_model_line = rectangle_model_lineTo_1.lineRectangleToCircle(rhs, lhs),
        _b = _rectangle_model_line[0],
        _a = _rectangle_model_line[1];

    return [_a, _b];
  } else {
    return lineCircleToPoint2(lhs, rhs);
  }
}

exports.lineTo = lineTo;

function lineCircleToPoint2(lhs, rhs) {
  var offset = vector_maths_func_1.subtract(rhs, lhs);
  var normalised = vector_maths_func_1.add(vector_maths_func_1.multiply(vector_maths_func_1.normalise(offset), lhs.radius), lhs);
  return [normalised, rhs];
}

exports.lineCircleToPoint2 = lineCircleToPoint2;

function lineCircleToTriangle2(lhs, rhs) {
  var a = line_model_lineTo_1.lineLine2ToCircle([rhs[0], rhs[1]], lhs);
  var b = line_model_lineTo_1.lineLine2ToCircle([rhs[1], rhs[0]], lhs);
  var c = line_model_lineTo_1.lineLine2ToCircle([rhs[2], rhs[0]], lhs);
  var magA = vector_maths_func_1.magnitudeSquared(vector_maths_func_1.subtract(a[0], lhs));
  var magB = vector_maths_func_1.magnitudeSquared(vector_maths_func_1.subtract(b[0], lhs));
  var magC = vector_maths_func_1.magnitudeSquared(vector_maths_func_1.subtract(c[0], lhs));

  if (magA < magB) {
    return magA < magC ? a : c;
  } else {
    return magB < magC ? b : c;
  }
}

exports.lineCircleToTriangle2 = lineCircleToTriangle2;

function lineCircleToCircle(lhs, rhs) {
  var offset = vector_maths_func_1.subtract(rhs, lhs);
  var n = vector_maths_func_1.normalise(offset);
  var l = vector_maths_func_1.add(vector_maths_func_1.multiply(n, lhs.radius), lhs);
  var r = vector_maths_func_1.subtract(rhs, vector_maths_func_1.multiply(n, rhs.radius));
  return [l, r];
}

exports.lineCircleToCircle = lineCircleToCircle;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/circle/circle.model.overlap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var vector_maths_func_1 = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.func.js");

var line_model_intersect_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.intersect.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

var line_model_length_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.length.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lineTo.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var triangle_model_overlap_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.overlap.js");

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

function overlaps(lhs, rhs) {
  if (line_model_is_1.is(rhs)) {
    return circleOverlapsLine2(lhs, rhs);
  } else if (triangle_model_is_1.is(rhs)) {
    return circleOverlapsTriangle2(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return circleOverlapsCircle(lhs, rhs);
  } else if (rectangle_model_is_1.is(rhs)) {
    return circleOverlapsRectangle(lhs, rhs);
  } else {
    return circleOverlapsPoint2(lhs, rhs);
  }
}

exports.overlaps = overlaps;

function circleOverlapsLine2(lhs, rhs) {
  return line_model_intersect_1.line2IntersectsCircle(rhs, lhs);
}

exports.circleOverlapsLine2 = circleOverlapsLine2;

function circleOverlapsTriangle2(lhs, rhs) {
  return triangle_model_overlap_1.triangle2OverlapsCircle(rhs, lhs);
}

exports.circleOverlapsTriangle2 = circleOverlapsTriangle2;

function circleOverlapsCircle(a, b) {
  return vector_maths_func_1.magnitudeSquared(vector_maths_func_1.subtract(a, b)) <= (a.radius + b.radius) * (a.radius + b.radius);
}

exports.circleOverlapsCircle = circleOverlapsCircle;

function circleOverlapsPoint2(a, b) {
  return vector_maths_func_1.magnitudeSquared(vector_maths_func_1.subtract(a, b)) <= a.radius * a.radius;
}

exports.circleOverlapsPoint2 = circleOverlapsPoint2;

function circleOverlapsRectangle(lhs, rhs) {
  return circleOverlapsPoint2(lhs, rhs) || line_model_length_1.lengthOf(rectangle_model_lineTo_1.lineTo(rhs, {
    x: lhs.x,
    y: lhs.y
  })) <= lhs.radius;
}

exports.circleOverlapsRectangle = circleOverlapsRectangle;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/colour.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.RGBA = function (r, g, b, a) {
  if (a === void 0) {
    a = 1;
  }

  return {
    r: r,
    g: g,
    b: b,
    a: a
  };
};

exports.RGB = function (r, g, b) {
  return {
    r: r,
    g: g,
    b: b
  };
};

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/line/line.model.intersect.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

var point_model_bounding_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.bounding.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lines_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lines.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

function intersects(lhs, rhs, tolerance) {
  if (tolerance === void 0) {
    tolerance = 0.001;
  }

  if (line_model_is_1.is(rhs)) {
    return line2IntersectsLine2(lhs, rhs);
  } else if (triangle_model_is_1.is(rhs)) {
    return line2IntersectsTriangle2(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return line2IntersectsCircle(lhs, rhs);
  } else if (rectangle_model_is_1.is(rhs)) {
    return line2IntersectsRectangle(lhs, rhs);
  } else {
    return line2IntersectsPoint2(lhs, rhs, tolerance);
  }
}

exports.intersects = intersects;

function line2IntersectsTriangle2(_ref, _ref2) {
  var a1 = _ref[0],
      a2 = _ref[1];
  var v1 = _ref2[0],
      v2 = _ref2[1],
      v3 = _ref2[2];
  return line2IntersectsLine2([v1, v2], [a1, a2]) || line2IntersectsLine2([v2, v3], [a1, a2]) || line2IntersectsLine2([v3, v1], [a1, a2]);
}

exports.line2IntersectsTriangle2 = line2IntersectsTriangle2;

function line2IntersectsCircle(lhs, rhs) {
  return line2IntersectsPoint2(lhs, rhs, rhs.radius);
}

exports.line2IntersectsCircle = line2IntersectsCircle;

function line2IntersectsPoint2(_ref3, a0, tolerance) {
  var a1 = _ref3[0],
      a2 = _ref3[1];

  function distToSegmentSquared(a0, a1, a2) {
    function magnitudeBetweenPointsSquared(v, w) {
      return Math.pow(v.x - w.x, 2) + Math.pow(v.y - w.y, 2);
    }

    var lengthSquaredOfLine = magnitudeBetweenPointsSquared(a1, a2);

    if (lengthSquaredOfLine === 0) {
      return magnitudeBetweenPointsSquared(a0, a1);
    }

    var angleOfAttack = ((a0.x - a1.x) * (a2.x - a1.x) + (a0.y - a1.y) * (a2.y - a1.y)) / lengthSquaredOfLine;

    if (angleOfAttack < 0) {
      return magnitudeBetweenPointsSquared(a0, a1);
    } else if (angleOfAttack > 1) {
      return magnitudeBetweenPointsSquared(a0, a2);
    } else {
      var pointOnLine = {
        x: a1.x + angleOfAttack * (a2.x - a1.x),
        y: a1.y + angleOfAttack * (a2.y - a1.y)
      };
      return magnitudeBetweenPointsSquared(a0, pointOnLine);
    }
  }

  return distToSegmentSquared(a0, a1, a2) <= tolerance * tolerance;
}

exports.line2IntersectsPoint2 = line2IntersectsPoint2;

function line2IntersectsRectangle(lhs, rhs) {
  var _rectangle_model_line = rectangle_model_lines_1.lines(rhs),
      bottom = _rectangle_model_line.bottom,
      top = _rectangle_model_line.top,
      left = _rectangle_model_line.left,
      right = _rectangle_model_line.right;

  return line2IntersectsLine2(lhs, top) || line2IntersectsLine2(lhs, bottom) || line2IntersectsLine2(lhs, left) || line2IntersectsLine2(lhs, right);
}

exports.line2IntersectsRectangle = line2IntersectsRectangle;

function line2IntersectsLine2(_ref4, _ref5) {
  var a1 = _ref4[0],
      a2 = _ref4[1];
  var b1 = _ref5[0],
      b2 = _ref5[1];

  var sameSign = function sameSign(x, y) {
    return x >= 0 && y >= 0 || x <= 0 && y <= 0;
  };

  var x1 = a1.x;
  var y1 = a1.y;
  var x2 = a2.x;
  var y2 = a2.y;
  var x3 = b1.x;
  var y3 = b1.y;
  var x4 = b2.x;
  var y4 = b2.y;
  var s1 = y2 - y1;
  var t1 = x1 - x2;
  var u1 = x2 * y1 - x1 * y2;
  var r3 = s1 * x3 + t1 * y3 + u1;
  var r4 = s1 * x4 + t1 * y4 + u1;

  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {
    return false;
  }

  var s2 = y4 - y3;
  var t2 = x3 - x4;
  var u2 = x4 * y3 - x3 * y4;
  var r1 = s2 * x1 + t2 * y1 + u2;
  var r2 = s2 * x2 + t2 * y2 + u2;

  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {
    return false;
  }

  var a = point_model_bounding_1.boundingTLBR(a1, a2);
  var b = point_model_bounding_1.boundingTLBR(b1, b2);
  return !(a.topLeft.x > b.bottomRight.x || a.topLeft.y > b.bottomRight.y || a.bottomRight.x < b.topLeft.x || a.bottomRight.y < b.topLeft.y);
}

exports.line2IntersectsLine2 = line2IntersectsLine2;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/line/line.model.is.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var point_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.is.js");

function is(possibly) {
  return Array.isArray(possibly) && possibly.length === 2 && possibly.every(point_model_is_1.is);
}

exports.is = is;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/line/line.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var intersect = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.intersect.js");

var is = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

var length = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.length.js");

var lineTo = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.lineTo.js");

exports.Line2 = Object.assign(function (a, b) {
  return [a, b];
}, Object.assign({}, intersect, is, length, lineTo));

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/line/line.model.length.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var vector_maths_1 = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.js");

function lengthOf(line) {
  return vector_maths_1.Vector2.magnitude(vector_maths_1.Vector2.subtract(line[1], line[0]));
}

exports.lengthOf = lengthOf;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/line/line.model.lineTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var functional_pipe_1 = __webpack_require__("./node_modules/@morleydev/functional-pipe/index.js");

var operators_1 = __webpack_require__("./node_modules/@morleydev/functional-pipe/iterable/operators.js");

var vector_maths_func_1 = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.func.js");

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lines_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lines.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

function lineTo(lhs, rhs) {
  if (line_model_is_1.is(rhs)) {
    return lineLine2ToLine2(lhs, rhs);
  } else if (triangle_model_is_1.is(rhs)) {
    return lineLine2ToTriangle2(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return lineLine2ToCircle(lhs, rhs);
  } else if (rectangle_model_is_1.is(rhs)) {
    return lineLine2ToRectangle(lhs, rhs);
  } else {
    return lineLine2ToPoint2(lhs, rhs);
  }
}

exports.lineTo = lineTo;

function lineLine2ToTriangle2(lhs, rhs) {
  return findShortestLine([lineLine2ToLine2(lhs, [rhs[0], rhs[1]]), lineLine2ToLine2(lhs, [rhs[1], rhs[0]]), lineLine2ToLine2(lhs, [rhs[2], rhs[0]])]);
}

exports.lineLine2ToTriangle2 = lineLine2ToTriangle2;

function findShortestLine(lines) {
  return functional_pipe_1.$$(lines).$(operators_1.map(function (line) {
    return {
      segment: line,
      length2: vector_maths_func_1.magnitudeSquared(vector_maths_func_1.subtract(line[1], line[0]))
    };
  })).$(operators_1.fold(function (prev, curr) {
    return prev.length2 < curr.length2 ? prev : curr;
  })).$$(function (line) {
    return line.segment;
  });
}

exports.findShortestLine = findShortestLine;

function lineLine2ToRectangle(lhs, rhs) {
  var lineSet = rectangle_model_lines_1.lines(rhs);
  return findShortestLine([lineLine2ToLine2(lhs, lineSet.top), lineLine2ToLine2(lhs, lineSet.bottom), lineLine2ToLine2(lhs, lineSet.left), lineLine2ToLine2(lhs, lineSet.right)]);
}

exports.lineLine2ToRectangle = lineLine2ToRectangle;

function lineLine2ToLine2(lhs, rhs) {
  // TODO: lineTo Line2 -> Line2 not properly implemented, produces sub-optimal results
  return [getCentreOfLine(lhs), getCentreOfLine(rhs)];
}

exports.lineLine2ToLine2 = lineLine2ToLine2;

function lineLine2ToCircle(lhs, rhs) {
  var _lineLine2ToPoint = lineLine2ToPoint2(lhs, rhs),
      l0 = _lineLine2ToPoint[0];

  var radius = rhs.radius;
  var lengthOfLine = vector_maths_func_1.subtract(rhs, l0);
  var angleOfLine = vector_maths_func_1.normalise(lengthOfLine);
  var radiusOfLine = vector_maths_func_1.multiply(angleOfLine, rhs.radius);
  var rhsPosition = vector_maths_func_1.add(rhs, radiusOfLine);
  return [l0, rhsPosition];
}

exports.lineLine2ToCircle = lineLine2ToCircle;

function lineLine2ToPoint2(lhs, rhs) {
  var a0 = rhs;
  var a1 = lhs[0],
      a2 = lhs[1];

  function magnitudeBetweenPointsSquared(v, w) {
    return Math.pow(v.x - w.x, 2) + Math.pow(v.y - w.y, 2);
  }

  var lengthSquaredOfLine = magnitudeBetweenPointsSquared(a1, a2);

  if (lengthSquaredOfLine === 0) {
    return [a1, a0];
  }

  var positionOnLine = ((a0.x - a1.x) * (a2.x - a1.x) + (a0.y - a1.y) * (a2.y - a1.y)) / lengthSquaredOfLine;

  if (positionOnLine < 0) {
    return [a1, a0];
  } else if (positionOnLine > 1) {
    return [a2, a0];
  } else {
    var pointOnLine = {
      x: a1.x + positionOnLine * (a2.x - a1.x),
      y: a1.y + positionOnLine * (a2.y - a1.y)
    };
    return [pointOnLine, a0];
  }
}

exports.lineLine2ToPoint2 = lineLine2ToPoint2;

function getCentreOfLine(lhs) {
  return vector_maths_func_1.add(lhs[0], vector_maths_func_1.divide(vector_maths_func_1.subtract(lhs[1], lhs[0]), 2));
}

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/point/point.model.bounding.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var point_model_tlbr_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.tlbr.js");

function boundingTLBR() {
  return {
    topLeft: point_model_tlbr_1.getTopLeft.apply(point_model_tlbr_1, arguments),
    bottomRight: point_model_tlbr_1.getBottomRight.apply(point_model_tlbr_1, arguments)
  };
}

exports.boundingTLBR = boundingTLBR;

function bounding() {
  var _boundingTLBR = boundingTLBR.apply(void 0, arguments),
      topLeft = _boundingTLBR.topLeft,
      bottomRight = _boundingTLBR.bottomRight;

  return {
    x: topLeft.x,
    y: topLeft.y,
    width: bottomRight.x - topLeft.x,
    height: bottomRight.y - topLeft.y
  };
}

exports.bounding = bounding;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/point/point.model.is.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function is(possibly) {
  return possibly.x != null && possibly.y != null;
}

exports.is = is;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/point/point.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var bounding = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.bounding.js");

var is = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.is.js");

var tlbr = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.tlbr.js");

exports.Point2 = Object.assign(function (x, y) {
  return {
    x: x,
    y: y
  };
}, Object.assign({}, tlbr, bounding, is));

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/point/point.model.tlbr.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var operators_1 = __webpack_require__("./node_modules/@morleydev/functional-pipe/iterable/operators.js");

function getTopLeft() {
  for (var _len = arguments.length, _points = new Array(_len), _key = 0; _key < _len; _key++) {
    _points[_key] = arguments[_key];
  }

  return {
    x: Math.min.apply(Math, operators_1.map(function (point) {
      return point.x;
    })(_points)),
    y: Math.min.apply(Math, operators_1.map(function (point) {
      return point.y;
    })(_points))
  };
}

exports.getTopLeft = getTopLeft;

function getTopRight() {
  for (var _len2 = arguments.length, _points = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    _points[_key2] = arguments[_key2];
  }

  return {
    x: Math.max.apply(Math, operators_1.map(function (point) {
      return point.x;
    })(_points)),
    y: Math.min.apply(Math, operators_1.map(function (point) {
      return point.y;
    })(_points))
  };
}

exports.getTopRight = getTopRight;

function getBottomLeft() {
  for (var _len3 = arguments.length, _points = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    _points[_key3] = arguments[_key3];
  }

  return {
    x: Math.max.apply(Math, operators_1.map(function (point) {
      return point.x;
    })(_points)),
    y: Math.min.apply(Math, operators_1.map(function (point) {
      return point.y;
    })(_points))
  };
}

exports.getBottomLeft = getBottomLeft;

function getBottomRight() {
  for (var _len4 = arguments.length, _points = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    _points[_key4] = arguments[_key4];
  }

  return {
    x: Math.max.apply(Math, operators_1.map(function (point) {
      return point.x;
    })(_points)),
    y: Math.max.apply(Math, operators_1.map(function (point) {
      return point.y;
    })(_points))
  };
}

exports.getBottomRight = getBottomRight;

function getCentre() {
  var tl = getTopLeft.apply(void 0, arguments);
  var br = getBottomRight.apply(void 0, arguments);
  return {
    x: tl.x + (br.x - tl.x) / 2,
    y: tl.y + (br.y - tl.y) / 2
  };
}

exports.getCentre = getCentre;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.bounding.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var point_model_bounding_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.bounding.js");

function boundingTLBR() {
  for (var _len = arguments.length, _rects = new Array(_len), _key = 0; _key < _len; _key++) {
    _rects[_key] = arguments[_key];
  }

  return point_model_bounding_1.boundingTLBR.apply(point_model_bounding_1, _rects.concat(_rects.map(function (rect) {
    return {
      x: rect.x + rect.width,
      y: rect.y + rect.height
    };
  })));
}

exports.boundingTLBR = boundingTLBR;

function bounding() {
  for (var _len2 = arguments.length, _rects = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    _rects[_key2] = arguments[_key2];
  }

  return point_model_bounding_1.bounding.apply(point_model_bounding_1, _rects.concat(_rects.map(function (rect) {
    return {
      x: rect.x + rect.width,
      y: rect.y + rect.height
    };
  })));
}

exports.bounding = bounding;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function is(possible) {
  return possible.x != null && possible.y != null && possible.width != null && possible.height != null;
}

exports.is = is;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var bounding = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.bounding.js");

var is = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var lines = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lines.js");

var lineTo = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lineTo.js");

var overlaps = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.overlap.js");

var tlbr = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.tlbr.js");

exports.Rectangle = Object.assign(function (x, y, width, height) {
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
}, Object.assign({}, bounding, tlbr, is, overlaps, lineTo, lines));

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lineTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var vector_maths_func_1 = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.func.js");

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

var line_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.lineTo.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lines_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lines.js");

var rectangle_model_tlbr_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.tlbr.js");

function lineTo(lhs, rhs) {
  if (line_model_is_1.is(rhs)) {
    var _line_model_lineTo_1$ = line_model_lineTo_1.lineLine2ToRectangle(rhs, lhs),
        b = _line_model_lineTo_1$[0],
        a = _line_model_lineTo_1$[1];

    return [a, b];
  } else if (triangle_model_is_1.is(rhs)) {
    return lineRectangleToTriangle(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return lineRectangleToCircle(lhs, rhs);
  } else if (rectangle_model_is_1.is(rhs)) {
    return lineRectangleToRectangle(lhs, rhs);
  } else {
    return lineRectangleToPoint2(lhs, rhs);
  }
}

exports.lineTo = lineTo;

function lineRectangleToTriangle(lhs, rhs) {
  var _rectangle_model_line = rectangle_model_lines_1.lines(lhs),
      left = _rectangle_model_line.left,
      right = _rectangle_model_line.right,
      top = _rectangle_model_line.top,
      bottom = _rectangle_model_line.bottom;

  return line_model_lineTo_1.findShortestLine([line_model_lineTo_1.lineLine2ToTriangle2(left, rhs), line_model_lineTo_1.lineLine2ToTriangle2(right, rhs), line_model_lineTo_1.lineLine2ToTriangle2(top, rhs), line_model_lineTo_1.lineLine2ToTriangle2(bottom, rhs)]);
}

exports.lineRectangleToTriangle = lineRectangleToTriangle;

function lineRectangleToRectangle(lhs, rhs) {
  // WARNING: Does not produce the optimal solution
  var lhsCentre = rectangle_model_tlbr_1.getCentre(lhs);
  var rhsCentre = rectangle_model_tlbr_1.getCentre(rhs);

  var _lineTo = lineTo(lhs, rhsCentre),
      lhsEdge = _lineTo[0];

  var _lineTo2 = lineTo(rhs, lhsCentre),
      rhsEdge = _lineTo2[0];

  return [lhsEdge, rhsEdge];
}

exports.lineRectangleToRectangle = lineRectangleToRectangle;

function lineRectangleToCircle(lhs, rhs) {
  var _lineRectangleToPoint = lineRectangleToPoint2(lhs, rhs),
      pointOnRectangle = _lineRectangleToPoint[0],
      centreOfCircle = _lineRectangleToPoint[1];

  var vectorOfLine = vector_maths_func_1.subtract(pointOnRectangle, centreOfCircle);
  var normalisedLine = vector_maths_func_1.normalise(vectorOfLine);
  var lineOfRadiusLength = vector_maths_func_1.multiply(normalisedLine, rhs.radius);
  var pointOnCircle = vector_maths_func_1.add(lineOfRadiusLength, centreOfCircle);
  return [pointOnRectangle, pointOnCircle];
}

exports.lineRectangleToCircle = lineRectangleToCircle;

function lineRectangleToPoint2(lhs, rhs) {
  if (rhs.x <= lhs.x) {
    if (rhs.y <= lhs.y) {
      return [lhs, rhs];
    } else if (rhs.y > lhs.y + lhs.height) {
      return [rectangle_model_tlbr_1.getBottomLeft(lhs), rhs];
    } else {
      return [{
        x: lhs.x,
        y: rhs.y
      }, rhs];
    }
  } else if (rhs.x >= lhs.x + lhs.width) {
    if (rhs.y < lhs.y) {
      return [rectangle_model_tlbr_1.getTopRight(lhs), rhs];
    } else if (rhs.y > lhs.y + lhs.height) {
      return [rectangle_model_tlbr_1.getBottomRight(lhs), rhs];
    } else {
      return [{
        x: lhs.x + lhs.width,
        y: rhs.y
      }, rhs];
    }
  } else if (rhs.y <= lhs.y) {
    return [{
      x: rhs.x,
      y: lhs.y
    }, rhs];
  } else if (rhs.y >= lhs.y + lhs.height) {
    return [{
      x: rhs.x,
      y: lhs.y + lhs.height
    }, rhs];
  } else {
    return [rectangle_model_tlbr_1.getCentre(lhs), rhs];
  }
}

exports.lineRectangleToPoint2 = lineRectangleToPoint2;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lines.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var rectangle_model_bounding_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.bounding.js");

function lines(rectangle) {
  var bounding = rectangle_model_bounding_1.boundingTLBR(rectangle);
  return {
    top: [bounding.topLeft, {
      x: bounding.bottomRight.x,
      y: bounding.topLeft.y
    }],
    left: [bounding.topLeft, {
      x: bounding.topLeft.x,
      y: bounding.bottomRight.y
    }],
    bottom: [{
      x: bounding.topLeft.x,
      y: bounding.bottomRight.y
    }, bounding.bottomRight],
    right: [{
      x: bounding.bottomRight.x,
      y: bounding.topLeft.y
    }, bounding.bottomRight]
  };
}

exports.lines = lines;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.overlap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

var line_model_intersect_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.intersect.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

var line_model_length_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.length.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var triangle_model_overlap_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.overlap.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lineTo.js");

function overlaps(lhs, rhs) {
  if (line_model_is_1.is(rhs)) {
    return rectangleOverlapsLine2(lhs, rhs);
  } else if (triangle_model_is_1.is(rhs)) {
    return rectangleOverlapsTriangle2(lhs, rhs);
  } else if (rectangle_model_is_1.is(rhs)) {
    return rectangleOverlapsRectangle(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return rectangleOverlapsCircle(lhs, rhs);
  } else {
    return rectangleOverlapsPoint2(lhs, rhs);
  }
}

exports.overlaps = overlaps;

function rectangleOverlapsLine2(lhs, rhs) {
  if (rectangleOverlapsPoint2(lhs, rhs[0]) || rectangleOverlapsPoint2(lhs, rhs[1])) {
    return true;
  }

  return line_model_intersect_1.line2IntersectsRectangle(rhs, lhs);
}

exports.rectangleOverlapsLine2 = rectangleOverlapsLine2;

function rectangleOverlapsTriangle2(lhs, rhs) {
  return triangle_model_overlap_1.triangle2OverlapsRectangle(rhs, lhs);
}

exports.rectangleOverlapsTriangle2 = rectangleOverlapsTriangle2;

function rectangleOverlapsRectangle(lhs, rhs) {
  return !(lhs.x > rhs.x + rhs.width || lhs.y > rhs.y + rhs.height || lhs.x + lhs.width < rhs.x || lhs.y + lhs.height < rhs.y);
}

exports.rectangleOverlapsRectangle = rectangleOverlapsRectangle;

function rectangleOverlapsCircle(lhs, rhs) {
  return rectangleOverlapsPoint2(lhs, rhs) || line_model_length_1.lengthOf(rectangle_model_lineTo_1.lineTo(lhs, {
    x: rhs.x,
    y: rhs.y
  })) <= rhs.radius;
}

exports.rectangleOverlapsCircle = rectangleOverlapsCircle;

function rectangleOverlapsPoint2(lhs, rhs) {
  return rhs.x >= lhs.x && rhs.x <= lhs.x + lhs.width && rhs.y >= lhs.y && rhs.y <= lhs.y + lhs.height;
}

exports.rectangleOverlapsPoint2 = rectangleOverlapsPoint2;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.tlbr.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function getCentre(rectangle) {
  return {
    x: rectangle.x + rectangle.width / 2,
    y: rectangle.y + rectangle.height / 2
  };
}

exports.getCentre = getCentre;

function getTopLeft(rectangle) {
  return {
    x: rectangle.x,
    y: rectangle.y
  };
}

exports.getTopLeft = getTopLeft;

function getTopRight(rectangle) {
  return {
    x: rectangle.x + rectangle.width,
    y: rectangle.y
  };
}

exports.getTopRight = getTopRight;

function getBottomLeft(rectangle) {
  return {
    x: rectangle.x,
    y: rectangle.y + rectangle.height
  };
}

exports.getBottomLeft = getBottomLeft;

function getBottomRight(rectangle) {
  return {
    x: rectangle.x + rectangle.width,
    y: rectangle.y + rectangle.height
  };
}

exports.getBottomRight = getBottomRight;

function fromTopLeftBottomRight(tl, br) {
  return {
    x: tl.x,
    y: tl.y,
    width: br.x - tl.x,
    height: br.y - tl.y
  };
}

exports.fromTopLeftBottomRight = fromTopLeftBottomRight;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/shapes.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var vector_maths_1 = __webpack_require__("./node_modules/@morleydev/pauper/maths/vector.maths.js");

var circle_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.js");

var line_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.js");

var point_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.js");

var rectangle_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.js");

var rectangle_model_tlbr_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.tlbr.js");

var triangle_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.js");

var circle_model_2 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.js");

exports.Circle = circle_model_2.Circle;

var point_model_2 = __webpack_require__("./node_modules/@morleydev/pauper/models/point/point.model.js");

exports.Point2 = point_model_2.Point2;

var line_model_2 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.js");

exports.Line2 = line_model_2.Line2;

var rectangle_model_2 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.js");

exports.Rectangle = rectangle_model_2.Rectangle;

var text_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/text/text.model.js");

exports.Text2 = text_model_1.Text2;

var triangle_model_2 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.js");

exports.Triangle2 = triangle_model_2.Triangle2;
exports.Shape2 = {
  collision: function collision(lhs, rhs) {
    if (line_model_1.Line2.is(lhs)) {
      return line_model_1.Line2.intersects(lhs, rhs);
    } else if (triangle_model_1.Triangle2.is(lhs)) {
      return triangle_model_1.Triangle2.overlaps(lhs, rhs);
    } else if (circle_model_1.Circle.is(lhs)) {
      return circle_model_1.Circle.overlaps(lhs, rhs);
    } else if (rectangle_model_1.Rectangle.is(lhs)) {
      return rectangle_model_1.Rectangle.overlaps(lhs, rhs);
    } else {
      return false;
    }
  },
  add: function add(lhs, rhs) {
    if (Array.isArray(lhs)) {
      return lhs.map(function (vert) {
        return vector_maths_1.Vector2.add(vert, rhs);
      });
    } else {
      return Object.assign({}, lhs, vector_maths_1.Vector2.add(lhs, rhs));
    }
  },
  getCentre: function getCentre(shape) {
    if (Array.isArray(shape)) {
      return {
        x: shape.map(function (a) {
          return a.x;
        }).reduce(function (sum, curr) {
          return sum + curr;
        }) / shape.length,
        y: shape.map(function (a) {
          return a.y;
        }).reduce(function (sum, curr) {
          return sum + curr;
        }) / shape.length
      };
    } else if (rectangle_model_1.Rectangle.is(shape)) {
      return rectangle_model_tlbr_1.getCentre(shape);
    } else {
      return {
        x: shape.x,
        y: shape.y
      };
    }
  },
  bounding: function bounding(lhs) {
    if (line_model_1.Line2.is(lhs)) {
      var topLeft = {
        x: Math.min(lhs[0].x, lhs[1].x),
        y: Math.min(lhs[0].y, lhs[1].y)
      };
      var bottomRight = {
        x: Math.max(lhs[0].x, lhs[1].x),
        y: Math.max(lhs[0].y, lhs[1].y)
      };
      return rectangle_model_1.Rectangle.fromTopLeftBottomRight(topLeft, bottomRight);
    } else if (triangle_model_1.Triangle2.is(lhs)) {
      var _topLeft = {
        x: Math.min(lhs[0].x, lhs[1].x, lhs[2].x),
        y: Math.min(lhs[0].y, lhs[1].y, lhs[1].y)
      };
      var _bottomRight = {
        x: Math.max(lhs[0].x, lhs[1].x, lhs[2].x),
        y: Math.max(lhs[0].y, lhs[1].y, lhs[2].y)
      };
      return rectangle_model_1.Rectangle.fromTopLeftBottomRight(_topLeft, _bottomRight);
    } else if (circle_model_1.Circle.is(lhs)) {
      return rectangle_model_1.Rectangle(lhs.x - lhs.radius, lhs.y - lhs.radius, lhs.radius * 2, lhs.radius * 2);
    } else if (rectangle_model_1.Rectangle.is(lhs)) {
      return lhs;
    } else if (point_model_1.Point2.is(lhs)) {
      return rectangle_model_1.Rectangle(lhs.x, lhs.y, 0, 0);
    } else {
      return rectangle_model_1.Rectangle(0, 0, 0, 0);
    }
  },
  lineTo: function lineTo(lhs, rhs) {
    if (line_model_1.Line2.is(lhs)) {
      return line_model_1.Line2.lineTo(lhs, rhs);
    } else if (triangle_model_1.Triangle2.is(lhs)) {
      return triangle_model_1.Triangle2.lineTo(lhs, rhs);
    } else if (circle_model_1.Circle.is(lhs)) {
      return circle_model_1.Circle.lineTo(lhs, rhs);
    } else if (rectangle_model_1.Rectangle.is(lhs)) {
      return rectangle_model_1.Rectangle.lineTo(lhs, rhs);
    } else if (point_model_1.Point2.is(lhs)) {
      var flip = function flip(_ref) {
        var a = _ref[0],
            b = _ref[1];
        return [b, a];
      };

      if (line_model_1.Line2.is(rhs)) {
        return flip(exports.Shape2.lineTo(rhs, lhs));
      } else if (triangle_model_1.Triangle2.is(rhs)) {
        return flip(triangle_model_1.Triangle2.lineTo(rhs, lhs));
      } else if (circle_model_1.Circle.is(rhs)) {
        return flip(circle_model_1.Circle.lineTo(rhs, lhs));
      } else if (rectangle_model_1.Rectangle.is(rhs)) {
        return flip(rectangle_model_1.Rectangle.lineTo(rhs, lhs));
      } else if (point_model_1.Point2.is(rhs)) {
        return [lhs, rhs];
      } else {
        return [point_model_1.Point2(0, 0), point_model_1.Point2(0, 0)];
      }
    } else {
      return [point_model_1.Point2(0, 0), point_model_1.Point2(0, 0)];
    }
  }
};

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/text/text.model.is.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function is(possible) {
  return possible.text != null && possible.x != null && possible.y != null;
}

exports.is = is;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/text/text.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var is = __webpack_require__("./node_modules/@morleydev/pauper/models/text/text.model.is.js");

exports.Text2 = Object.assign(function (text, x, y, fontSize, fontFamily) {
  return {
    text: text,
    x: x,
    y: y,
    fontSize: fontSize,
    fontFamily: fontFamily
  };
}, Object.assign({}, is));

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function is(possible) {
  return Array.isArray(possible) && possible.length === 3;
}

exports.is = is;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/triangle/triangle.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var is = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var lines = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.lines.js");

var overlaps = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.overlap.js");

var lineTo = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.lineTo.js");

exports.Triangle2 = Object.assign(function (a, b, c) {
  return [a, b, c];
}, Object.assign({}, is, overlaps, lines, lineTo));

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/triangle/triangle.model.lineTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var functional_pipe_1 = __webpack_require__("./node_modules/@morleydev/functional-pipe/index.js");

var operators_1 = __webpack_require__("./node_modules/@morleydev/functional-pipe/iterable/operators.js");

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

var circle_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.lineTo.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

var line_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.lineTo.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lineTo_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lineTo.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var triangle_model_lines_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.lines.js");

function lineTo(lhs, rhs) {
  if (line_model_is_1.is(rhs)) {
    return flip(line_model_lineTo_1.lineLine2ToTriangle2(rhs, lhs));
  } else if (triangle_model_is_1.is(rhs)) {
    return lineTriangle2ToTriangle2(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return flip(circle_model_lineTo_1.lineCircleToTriangle2(rhs, lhs));
  } else if (rectangle_model_is_1.is(rhs)) {
    return flip(rectangle_model_lineTo_1.lineRectangleToTriangle(rhs, lhs));
  } else {
    return lineTriangleToPoint2(lhs, rhs);
  }
}

exports.lineTo = lineTo;

var flip = function flip(_ref) {
  var a = _ref[0],
      b = _ref[1];
  return [b, a];
};

function lineTriangle2ToTriangle2(lhs, rhs) {
  var leftLines = triangle_model_lines_1.lines(lhs);
  var rightLines = triangle_model_lines_1.lines(rhs);
  return functional_pipe_1.$$(leftLines).$(operators_1.flatMap(function (lline) {
    return operators_1.map(function (rline) {
      return line_model_lineTo_1.lineLine2ToLine2(lline, rline);
    })(rightLines);
  })).$$(line_model_lineTo_1.findShortestLine);
}

exports.lineTriangle2ToTriangle2 = lineTriangle2ToTriangle2;

function lineTriangleToPoint2(lhs, rhs) {
  return functional_pipe_1.$$(lhs).$(triangle_model_lines_1.lines).$(operators_1.map(function (line) {
    return line_model_lineTo_1.lineLine2ToPoint2(line, rhs);
  })).$$(line_model_lineTo_1.findShortestLine);
}

exports.lineTriangleToPoint2 = lineTriangleToPoint2;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/triangle/triangle.model.lines.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function lines(lhs) {
  return [[lhs[0], lhs[1]], [lhs[1], lhs[2]], [lhs[2], lhs[0]]];
}

exports.lines = lines;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/models/triangle/triangle.model.overlap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var circle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/circle/circle.model.is.js");

var line_model_intersect_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.intersect.js");

var line_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/line/line.model.is.js");

var rectangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.is.js");

var rectangle_model_lines_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/rectangle/rectangle.model.lines.js");

var triangle_model_is_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.is.js");

var triangle_model_lines_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/triangle/triangle.model.lines.js");

function overlaps(lhs, rhs) {
  if (triangle_model_is_1.is(rhs)) {
    return triangle2OverlapsTriangle2(lhs, rhs);
  } else if (line_model_is_1.is(rhs)) {
    return triangle2OverlapsLine2(lhs, rhs);
  } else if (rectangle_model_is_1.is(rhs)) {
    return triangle2OverlapsRectangle(lhs, rhs);
  } else if (circle_model_is_1.is(rhs)) {
    return triangle2OverlapsCircle(lhs, rhs);
  } else {
    return triangle2OverlapsPoint2(lhs, rhs);
  }
}

exports.overlaps = overlaps;

function triangle2OverlapsCircle(lhs, rhs) {
  if (triangle2OverlapsPoint2(lhs, rhs)) {
    return true;
  }

  return triangle_model_lines_1.lines(lhs).some(function (line) {
    return line_model_intersect_1.line2IntersectsCircle(line, rhs);
  });
}

exports.triangle2OverlapsCircle = triangle2OverlapsCircle;

function triangle2OverlapsRectangle(lhs, rhs) {
  var _rectangle_model_line = rectangle_model_lines_1.lines(rhs),
      bottom = _rectangle_model_line.bottom,
      top = _rectangle_model_line.top,
      left = _rectangle_model_line.left,
      right = _rectangle_model_line.right;

  var rectLineSet = [bottom, top, left, right];
  return rectLineSet.some(function (line) {
    return triangle2OverlapsLine2(lhs, line);
  });
}

exports.triangle2OverlapsRectangle = triangle2OverlapsRectangle;

function triangle2OverlapsTriangle2(lhs, rhs) {
  if (triangle2OverlapsPoint2(lhs, rhs[0]) || triangle2OverlapsPoint2(lhs, rhs[1]) || triangle2OverlapsPoint2(lhs, rhs[2])) {
    return true;
  }

  var lhsLines = triangle_model_lines_1.lines(lhs);
  return triangle_model_lines_1.lines(rhs).some(function (rhsLine) {
    return triangle2OverlapsLine2(lhs, rhsLine);
  });
}

exports.triangle2OverlapsTriangle2 = triangle2OverlapsTriangle2;

function triangle2OverlapsLine2(_ref, _ref2) {
  var v1 = _ref[0],
      v2 = _ref[1],
      v3 = _ref[2];
  var a = _ref2[0],
      b = _ref2[1];

  if (triangle2OverlapsPoint2([v1, v2, v3], a) || triangle2OverlapsPoint2([v1, v2, v3], b)) {
    return false;
  }

  return line_model_intersect_1.line2IntersectsTriangle2([a, b], [v1, v2, v3]);
}

exports.triangle2OverlapsLine2 = triangle2OverlapsLine2;

function triangle2OverlapsPoint2(_ref3, rhs) {
  var v1 = _ref3[0],
      v2 = _ref3[1],
      v3 = _ref3[2];

  var sign = function sign(p1, p2, p3) {
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
  };

  var b1 = sign(rhs, v1, v2) < 0.0;
  var b2 = sign(rhs, v2, v3) < 0.0;
  var b3 = sign(rhs, v3, v1) < 0.0;
  return b1 === b2 && b2 === b3;
}

exports.triangle2OverlapsPoint2 = triangle2OverlapsPoint2;

/***/ }),

/***/ "./node_modules/@morleydev/pauper/render/jsx/render.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var render_frame_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/render/render-frame.model.js");

var colour_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/colour.model.js");

var react_test_renderer_1 = __webpack_require__("./node_modules/react-test-renderer/index.js");

var ReactRenderer =
/*#__PURE__*/
function () {
  function ReactRenderer(element) {
    this.renderer = react_test_renderer_1.create(element);
  }

  var _proto = ReactRenderer.prototype;

  _proto.frame = function frame() {
    var json = this.renderer.toJSON();
    return json != null ? jsonToFrame(json) : [];
  };

  return ReactRenderer;
}();

exports.ReactRenderer = ReactRenderer;

function jsonToFrame(json) {
  switch (json.type) {
    case "clear":
      return [render_frame_model_1.Clear(json.props["colour"] || colour_model_1.RGB(0, 0, 0)), (json.children || []).map(jsonToFrame)];

    case "origin":
      return render_frame_model_1.Origin(json.props["coords"], (json.children || []).map(jsonToFrame));

    case "rotate":
      return render_frame_model_1.Rotate(json.props["radians"], (json.children || []).map(jsonToFrame));

    case "scale":
      return render_frame_model_1.Scale(json.props["by"], (json.children || []).map(jsonToFrame));

    case "fill":
      return render_frame_model_1.Fill(json.props["shape"], json.props["colour"]);

    case "stroke":
      return render_frame_model_1.Stroke(json.props["shape"], json.props["colour"]);

    case "blit":
      return render_frame_model_1.Blit(json.props["image"], json.props["dst"], json.props["src"]);

    case "renderTarget":
      return render_frame_model_1.RenderTarget(json.props["dst"], (json.children || []).map(jsonToFrame), json.props["size"]);

    default:
      return (json.children || []).map(jsonToFrame);
  }
}

/***/ }),

/***/ "./node_modules/@morleydev/pauper/render/render-frame.model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.Frame = function () {
  for (var _len = arguments.length, _commands = new Array(_len), _key = 0; _key < _len; _key++) {
    _commands[_key] = arguments[_key];
  }

  return _commands;
};

var FrameCommandType;

(function (FrameCommandType) {
  FrameCommandType[FrameCommandType["Clear"] = 0] = "Clear";
  FrameCommandType[FrameCommandType["Origin"] = 1] = "Origin";
  FrameCommandType[FrameCommandType["Rotate"] = 2] = "Rotate";
  FrameCommandType[FrameCommandType["Scale"] = 3] = "Scale";
  FrameCommandType[FrameCommandType["Fill"] = 4] = "Fill";
  FrameCommandType[FrameCommandType["Stroke"] = 5] = "Stroke";
  FrameCommandType[FrameCommandType["Blit"] = 6] = "Blit";
  FrameCommandType[FrameCommandType["RenderTarget"] = 7] = "RenderTarget";
})(FrameCommandType = exports.FrameCommandType || (exports.FrameCommandType = {}));

exports.Clear = function (colour) {
  return colour != null ? [FrameCommandType.Clear, colour] : [FrameCommandType.Clear];
};

exports.Origin = function (origin, child) {
  return [FrameCommandType.Origin, origin, child];
};

exports.Rotate = function (radian, child) {
  return [FrameCommandType.Rotate, radian, child];
};

exports.Scale = function (scale, child) {
  return [FrameCommandType.Scale, scale, child];
};

exports.Fill = function (dst, colour) {
  return [FrameCommandType.Fill, dst, colour];
};

exports.Stroke = function (dst, colour) {
  return [FrameCommandType.Stroke, dst, colour];
};

exports.Blit = function (image, dst, src) {
  return src != null ? [FrameCommandType.Blit, image, dst, src] : [FrameCommandType.Blit, image, dst];
};

exports.RenderTarget = function (dst, frame, size) {
  return [FrameCommandType.RenderTarget, dst, frame, size];
};

/***/ }),

/***/ "./node_modules/@morleydev/pauper/render/render-to-canvas.func.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var shapes_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/models/shapes.model.js");

var render_frame_model_1 = __webpack_require__("./node_modules/@morleydev/pauper/render/render-frame.model.js");

function renderToCanvas(target, frame) {
  return frame.forEach(function (command) {
    return RenderCommand(target, command);
  });
}

exports.renderToCanvas = renderToCanvas;

function RenderCommand(target, command) {
  var commandType = command[0];

  if (!Array.isArray(commandType)) {
    switch (commandType) {
      case render_frame_model_1.FrameCommandType.Clear:
        return renderClear(target, command);

      case render_frame_model_1.FrameCommandType.Origin:
        return renderOrigin(target, command);

      case render_frame_model_1.FrameCommandType.RenderTarget:
        return renderRenderTarget(target, command);

      case render_frame_model_1.FrameCommandType.Rotate:
        return renderRotate(target, command);

      case render_frame_model_1.FrameCommandType.Scale:
        return renderScale(target, command);

      case render_frame_model_1.FrameCommandType.Fill:
        return renderFill(target, command);

      case render_frame_model_1.FrameCommandType.Stroke:
        return renderStroke(target, command);

      case render_frame_model_1.FrameCommandType.Blit:
        return renderBlit(target, command);
    }
  } else {
    return command.forEach(function (c) {
      return RenderCommand(target, c);
    });
  }
}

function renderOrigin(_ref, command) {
  var canvas = _ref.canvas,
      context = _ref.context,
      assets = _ref.assets;
  var origin = command[1];
  context.translate(origin.x | 0, origin.y | 0);
  renderToCanvas({
    canvas: canvas,
    context: context,
    assets: assets
  }, command[2]);
  context.translate(-origin.x | 0, -origin.y | 0);
}

function renderRotate(_ref2, command) {
  var canvas = _ref2.canvas,
      context = _ref2.context,
      assets = _ref2.assets;
  var rotation = command[1];
  context.rotate(rotation);
  renderToCanvas({
    canvas: canvas,
    context: context,
    assets: assets
  }, command[2]);
  context.rotate(-rotation);
}

function renderScale(_ref3, command) {
  var canvas = _ref3.canvas,
      context = _ref3.context,
      assets = _ref3.assets;
  var scale = command[1];
  context.scale(scale.x, scale.y);
  renderToCanvas({
    canvas: canvas,
    context: context,
    assets: assets
  }, command[2]);
  context.scale(1 / scale.x, 1 / scale.y);
}

function renderBlit(_ref4, command) {
  var canvas = _ref4.canvas,
      context = _ref4.context,
      assets = _ref4.assets;
  var image = command[1];
  var dst = command[2];
  var src = command[3];
  var imgAsset = assets.getImage(image);

  if (shapes_model_1.Rectangle.is(dst)) {
    if (src != null) {
      context.drawImage(imgAsset, src.x | 0, src.y | 0, src.width | 0, src.height | 0, dst.x | 0, dst.y | 0, dst.width | 0, dst.height | 0);
    } else {
      context.drawImage(imgAsset, dst.x | 0, dst.y | 0, dst.width | 0, dst.height | 0);
    }
  } else {
    context.drawImage(imgAsset, dst.x | 0, dst.y | 0);
  }
}

function renderFill(_ref5, fill) {
  var canvas = _ref5.canvas,
      context = _ref5.context,
      assets = _ref5.assets;
  var shape = fill[1];
  var colour = fill[2];
  context.beginPath();
  context.fillStyle = getRGBA(colour);

  if (Array.isArray(shape)) {
    context.moveTo(shape[0].x | 0, shape[0].y | 0);

    for (var i = 1; i < shape.length; ++i) {
      context.lineTo(shape[i].x | 0, shape[i].y | 0);
    }

    context.fill();
  } else if (shapes_model_1.Text2.is(shape)) {
    var size = shape.fontSize || 10;
    context.font = size + "px " + (shape.fontFamily || "serif");
    context.fillText(shape.text, shape.x | 0, shape.y + size | 0);
  } else if (shapes_model_1.Rectangle.is(shape)) {
    context.fillRect(shape.x | 0, shape.y | 0, shape.width | 0, shape.height | 0);
  } else if (shapes_model_1.Circle.is(shape)) {
    context.arc(shape.x | 0, shape.y | 0, shape.radius | 0, 0, 2 * Math.PI);
    context.fill();
  }
}

function renderStroke(_ref6, fill) {
  var canvas = _ref6.canvas,
      context = _ref6.context,
      assets = _ref6.assets;
  var shape = fill[1];
  var colour = fill[2];
  context.beginPath();
  context.strokeStyle = getRGBA(colour);

  if (Array.isArray(shape)) {
    context.moveTo(shape[0].x | 0, shape[0].y | 0);

    for (var i = 1; i < shape.length; ++i) {
      context.lineTo(shape[i].x | 0, shape[i].y | 0);
    }

    context.stroke();
  } else if (shapes_model_1.Text2.is(shape)) {
    var size = shape.fontSize || 10;
    context.font = size + "px " + (shape.fontFamily || "serif");
    context.strokeText(shape.text, shape.x | 0, shape.y + size / 2 | 0);
  } else if (shapes_model_1.Rectangle.is(shape)) {
    context.strokeRect(shape.x | 0, shape.y | 0, shape.width | 0, shape.height | 0);
  } else if (shapes_model_1.Circle.is(shape)) {
    context.arc(shape.x | 0, shape.y | 0, shape.radius | 0, 0, 2 * Math.PI);
    context.stroke();
  }

  context.closePath();
}

function renderClear(_ref7, clear) {
  var canvas = _ref7.canvas,
      context = _ref7.context,
      assets = _ref7.assets;
  context.setTransform(1, 0, 0, 1, 0, 0);
  context.clearRect(0, 0, canvas.width | 0, canvas.height | 0);
  var colour = clear[1];
  context.fillStyle = colour ? getRGB(colour) : "black";
  context.fillRect(0, 0, canvas.width | 0, canvas.height | 0);
} // tslint:disable-next-line:readonly-keyword


var canvasCache = {};

function renderRenderTarget(_ref8, _ref9) {
  var canvas = _ref8.canvas,
      context = _ref8.context,
      assets = _ref8.assets;
  var _ = _ref9[0],
      dst = _ref9[1],
      frames = _ref9[2],
      size = _ref9[3];
  var width = (size == null ? dst.width : size.x) | 0;
  var height = (size == null ? dst.height : size.y) | 0;
  var key = "" + width + height;
  var targetCanvas = canvasCache[key];
  canvasCache[key] = null;

  if (targetCanvas == null) {
    var newCanvas = document.createElement("canvas");
    newCanvas.width = (size == null ? dst.width : size.x) | 0;
    newCanvas.height = (size == null ? dst.height : size.y) | 0;
    targetCanvas = {
      canvas: newCanvas,
      context: newCanvas.getContext("2d"),
      assets: assets
    };
  }

  renderToCanvas(targetCanvas, frames);
  context.drawImage(targetCanvas.canvas, dst.x | 0, dst.y | 0, dst.width | 0, dst.height | 0);
  canvasCache[key] = targetCanvas;
}

function getRGBA(colour) {
  return colour.a != null ? "rgba(" + (colour.r | 0) + ", " + (colour.g | 0) + ", " + (colour.b | 0) + ", " + colour.a + ")" : getRGB(colour);
}

function getRGB(colour) {
  return "rgb(" + (colour.r | 0) + ", " + (colour.g | 0) + ", " + (colour.b | 0) + ")";
}

/***/ }),

/***/ "./node_modules/@morleydev/pauper/utility/is-browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBrowser = typeof window !== "undefined";

/***/ }),

/***/ "./node_modules/@morleydev/pauper/utility/is-production.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isProduction = process && process.env && process.env["NODE_ENV"] === "Production";
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_a-number-value.js":
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js");

module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__("./node_modules/core-js/modules/_wks.js")('unscopables');

var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__("./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});

module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }

  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-copy-within.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

module.exports = [].copyWithin || function copyWithin(target
/* = 0 */
, start
/* = 0, end = @length */
) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;

  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }

  while (count-- > 0) {
    if (from in O) O[to] = O[from];else delete O[to];
    to += inc;
    from += inc;
  }

  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-fill.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

module.exports = function fill(value
/* , start = 0, end = @length */
) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

  while (endPos > index) {
    O[index++] = value;
  }

  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-from-iterable.js":
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__("./node_modules/core-js/modules/_for-of.js");

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js/modules/_to-absolute-index.js");

module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }
    return !IS_INCLUDES && -1;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var IObject = __webpack_require__("./node_modules/core-js/modules/_iobject.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var asc = __webpack_require__("./node_modules/core-js/modules/_array-species-create.js");

module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;

    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);

        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true;
              // some

              case 5:
                return val;
              // find

              case 6:
                return index;
              // findIndex

              case 2:
                result.push(val);
              // filter
            } else if (IS_EVERY) return false; // every
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-reduce.js":
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var IObject = __webpack_require__("./node_modules/core-js/modules/_iobject.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }

    index += i;

    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }

  for (; isRight ? index >= 0 : length > index; index += i) {
    if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
  }

  return memo;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var isArray = __webpack_require__("./node_modules/core-js/modules/_is-array.js");

var SPECIES = __webpack_require__("./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;

  if (isArray(original)) {
    C = original.constructor; // cross-realm fallback

    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }

  return C === undefined ? Array : C;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__("./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_bind.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var invoke = __webpack_require__("./node_modules/core-js/modules/_invoke.js");

var arraySlice = [].slice;
var factories = {};

var construct = function construct(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) {
      n[i] = 'a[' + i + ']';
    } // eslint-disable-next-line no-new-func


    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }

  return factories[len](F, args);
};

module.exports = Function.bind || function bind(that
/* , ...args */
) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);

  var bound = function bound()
  /* args... */
  {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };

  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js");

var TAG = __webpack_require__("./node_modules/core-js/modules/_wks.js")('toStringTag'); // ES3 wrong here


var ARG = cof(function () {
  return arguments;
}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (e) {
    /* empty */
  }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
  : ARG ? cof(O) // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

var create = __webpack_require__("./node_modules/core-js/modules/_object-create.js");

var redefineAll = __webpack_require__("./node_modules/core-js/modules/_redefine-all.js");

var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var anInstance = __webpack_require__("./node_modules/core-js/modules/_an-instance.js");

var forOf = __webpack_require__("./node_modules/core-js/modules/_for-of.js");

var $iterDefine = __webpack_require__("./node_modules/core-js/modules/_iter-define.js");

var step = __webpack_require__("./node_modules/core-js/modules/_iter-step.js");

var setSpecies = __webpack_require__("./node_modules/core-js/modules/_set-species.js");

var DESCRIPTORS = __webpack_require__("./node_modules/core-js/modules/_descriptors.js");

var fastKey = __webpack_require__("./node_modules/core-js/modules/_meta.js").fastKey;

var validate = __webpack_require__("./node_modules/core-js/modules/_validate-collection.js");

var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function getEntry(that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index]; // frozen object case

  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type

      that._i = create(null); // index

      that._f = undefined; // first entry

      that._l = undefined; // last entry

      that[SIZE] = 0; // size

      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }

        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function _delete(key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);

        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }

        return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn
      /* , that = undefined */
      ) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;

        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this); // revert to the last existing entry

          while (entry && entry.r) {
            entry = entry.p;
          }
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function get() {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var entry = getEntry(that, key);
    var prev, index; // change existing entry

    if (entry) {
      entry.v = value; // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true),
        // <- index
        k: key,
        // <- key
        v: value,
        // <- value
        p: prev = that._l,
        // <- previous entry
        n: undefined,
        // <- next entry
        r: false // <- removed

      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++; // add to index

      if (index !== 'F') that._i[index] = entry;
    }

    return that;
  },
  getEntry: getEntry,
  setStrong: function setStrong(C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target

      this._k = kind; // kind

      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l; // revert to the last existing entry

      while (entry && entry.r) {
        entry = entry.p;
      } // get next entry


      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      } // return step by kind


      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

    setSpecies(NAME);
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-to-json.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__("./node_modules/core-js/modules/_classof.js");

var from = __webpack_require__("./node_modules/core-js/modules/_array-from-iterable.js");

module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-weak.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var redefineAll = __webpack_require__("./node_modules/core-js/modules/_redefine-all.js");

var getWeak = __webpack_require__("./node_modules/core-js/modules/_meta.js").getWeak;

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var anInstance = __webpack_require__("./node_modules/core-js/modules/_an-instance.js");

var forOf = __webpack_require__("./node_modules/core-js/modules/_for-of.js");

var createArrayMethod = __webpack_require__("./node_modules/core-js/modules/_array-methods.js");

var $has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var validate = __webpack_require__("./node_modules/core-js/modules/_validate-collection.js");

var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0; // fallback for uncaught frozen keys

var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function UncaughtFrozenStore() {
  this.a = [];
};

var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function get(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function has(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function set(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.a.push([key, value]);
  },
  'delete': function _delete(key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};
module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type

      that._i = id++; // collection id

      that._l = undefined; // leak store for uncaught frozen objects

      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function _delete(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

var redefineAll = __webpack_require__("./node_modules/core-js/modules/_redefine-all.js");

var meta = __webpack_require__("./node_modules/core-js/modules/_meta.js");

var forOf = __webpack_require__("./node_modules/core-js/modules/_for-of.js");

var anInstance = __webpack_require__("./node_modules/core-js/modules/_an-instance.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var $iterDetect = __webpack_require__("./node_modules/core-js/modules/_iter-detect.js");

var setToStringTag = __webpack_require__("./node_modules/core-js/modules/_set-to-string-tag.js");

var inheritIfRequired = __webpack_require__("./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};

  var fixMethod = function fixMethod(KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);
      return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);
      return this;
    });
  };

  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C(); // early implementations not supports chaining

    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    }); // most early implementations doesn't supports iterables, most modern - not close it correctly

    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same

    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;

      while (index--) {
        $instance[ADDER](index, index);
      }

      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);
  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);
  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
  return C;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/***/ (function(module, exports) {

var core = module.exports = {
  version: '2.5.1'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_create-property.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $defineProperty = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

var createDesc = __webpack_require__("./node_modules/core-js/modules/_property-desc.js");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;

  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };

    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };

    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }

  return function ()
  /* ...args */
  {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-iso-string.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function lz(num) {
  return num > 9 ? num : '0' + num;
}; // PhantomJS / old WebKit has a broken implementations


module.exports = fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-primitive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var document = __webpack_require__("./node_modules/core-js/modules/_global.js").document; // typeof document.createElement is 'object' in old IE


var is = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__("./node_modules/core-js/modules/_object-keys.js");

var gOPS = __webpack_require__("./node_modules/core-js/modules/_object-gops.js");

var pIE = __webpack_require__("./node_modules/core-js/modules/_object-pie.js");

module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;

  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;

    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var core = __webpack_require__("./node_modules/core-js/modules/_core.js");

var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;

  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

    out = (own ? target : source)[key]; // bind timers to global for call from export context

    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

    if (target) redefine(target, key, out, type & $export.U); // export

    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};

global.core = core; // type bitmap

$export.F = 1; // forced

$export.G = 2; // global

$export.S = 4; // static

$export.P = 8; // proto

$export.B = 16; // bind

$export.W = 32; // wrap

$export.U = 64; // safe

$export.R = 128; // real proto method for `library`

module.exports = $export;

/***/ }),

/***/ "./node_modules/core-js/modules/_fails-is-regexp.js":
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__("./node_modules/core-js/modules/_wks.js")('match');

module.exports = function (KEY) {
  var re = /./;

  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) {
      /* empty */
    }
  }

  return true;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_fix-re-wks.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

var wks = __webpack_require__("./node_modules/core-js/modules/_wks.js");

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];

  if (fails(function () {
    var O = {};

    O[SYMBOL] = function () {
      return 7;
    };

    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    } // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 21.2.5.3 get RegExp.prototype.flags

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_flatten-into-array.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

var isArray = __webpack_require__("./node_modules/core-js/modules/_is-array.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var IS_CONCAT_SPREADABLE = __webpack_require__("./node_modules/core-js/modules/_wks.js")('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
      spreadable = false;

      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }

    sourceIndex++;
  }

  return targetIndex;
}

module.exports = flattenIntoArray;

/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var call = __webpack_require__("./node_modules/core-js/modules/_iter-call.js");

var isArrayIter = __webpack_require__("./node_modules/core-js/modules/_is-array-iter.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var getIterFn = __webpack_require__("./node_modules/core-js/modules/core.get-iterator-method.js");

var BREAK = {};
var RETURN = {};

var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};

exports.BREAK = BREAK;
exports.RETURN = RETURN;

/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

var createDesc = __webpack_require__("./node_modules/core-js/modules/_property-desc.js");

module.exports = __webpack_require__("./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__("./node_modules/core-js/modules/_global.js").document;

module.exports = document && document.documentElement;

/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__("./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__("./node_modules/core-js/modules/_dom-create.js")('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var setPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_set-proto.js").set;

module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;

  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }

  return that;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;

  switch (args.length) {
    case 0:
      return un ? fn() : fn.call(that);

    case 1:
      return un ? fn(args[0]) : fn.call(that, args[0]);

    case 2:
      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

    case 3:
      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

    case 4:
      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
  }

  return fn.apply(that, args);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js"); // eslint-disable-next-line no-prototype-builtins


module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__("./node_modules/core-js/modules/_iterators.js");

var ITERATOR = __webpack_require__("./node_modules/core-js/modules/_wks.js")('iterator');

var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js");

module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-integer.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var floor = Math.floor;

module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-regexp.js":
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js");

var MATCH = __webpack_require__("./node_modules/core-js/modules/_wks.js")('match');

module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = __webpack_require__("./node_modules/core-js/modules/_object-create.js");

var descriptor = __webpack_require__("./node_modules/core-js/modules/_property-desc.js");

var setToStringTag = __webpack_require__("./node_modules/core-js/modules/_set-to-string-tag.js");

var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

__webpack_require__("./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__("./node_modules/core-js/modules/_wks.js")('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, {
    next: descriptor(1, next)
  });
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__("./node_modules/core-js/modules/_library.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var Iterators = __webpack_require__("./node_modules/core-js/modules/_iterators.js");

var $iterCreate = __webpack_require__("./node_modules/core-js/modules/_iter-create.js");

var setToStringTag = __webpack_require__("./node_modules/core-js/modules/_set-to-string-tag.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var ITERATOR = __webpack_require__("./node_modules/core-js/modules/_wks.js")('iterator');

var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);

  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];

    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };

      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }

    return function entries() {
      return new Constructor(this, kind);
    };
  };

  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype; // Fix native

  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  } // fix Array#{values, @@iterator}.name in V8 / FF


  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;

    $default = function values() {
      return $native.call(this);
    };
  } // Define iterator


  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  } // Plug for library


  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;

  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }

  return methods;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__("./node_modules/core-js/modules/_wks.js")('iterator');

var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();

  riter['return'] = function () {
    SAFE_CLOSING = true;
  }; // eslint-disable-next-line no-throw-literal


  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {
  /* empty */
}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;

  try {
    var arr = [7];
    var iter = arr[ITERATOR]();

    iter.next = function () {
      return {
        done: safe = true
      };
    };

    arr[ITERATOR] = function () {
      return iter;
    };

    exec(arr);
  } catch (e) {
    /* empty */
  }

  return safe;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return {
    value: value,
    done: !!done
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/***/ (function(module, exports) {

module.exports = {};

/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/***/ (function(module, exports) {

module.exports = false;

/***/ }),

/***/ "./node_modules/core-js/modules/_math-expm1.js":
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = !$expm1 // Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

/***/ }),

/***/ "./node_modules/core-js/modules/_math-fround.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__("./node_modules/core-js/modules/_math-sign.js");

var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function roundTiesToEven(n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs); // eslint-disable-next-line no-self-compare

  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_math-log1p.js":
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_math-scale.js":
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (arguments.length === 0 // eslint-disable-next-line no-self-compare
  || x != x // eslint-disable-next-line no-self-compare
  || inLow != inLow // eslint-disable-next-line no-self-compare
  || inHigh != inHigh // eslint-disable-next-line no-self-compare
  || outLow != outLow // eslint-disable-next-line no-self-compare
  || outHigh != outHigh) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_math-sign.js":
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__("./node_modules/core-js/modules/_uid.js")('meta');

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var setDesc = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var FREEZE = !__webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});

var setMeta = function setMeta(it) {
  setDesc(it, META, {
    value: {
      i: 'O' + ++id,
      // object ID
      w: {} // weak collections IDs

    }
  });
};

var fastKey = function fastKey(it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F'; // not necessary to add metadata

    if (!create) return 'E'; // add missing metadata

    setMeta(it); // return object ID
  }

  return it[META].i;
};

var getWeak = function getWeak(it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true; // not necessary to add metadata

    if (!create) return false; // add missing metadata

    setMeta(it); // return hash weak collections IDs
  }

  return it[META].w;
}; // add metadata on freeze-family methods calling


var onFreeze = function onFreeze(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};

var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

/***/ }),

/***/ "./node_modules/core-js/modules/_metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__("./node_modules/core-js/modules/es6.map.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var shared = __webpack_require__("./node_modules/core-js/modules/_shared.js")('metadata');

var store = shared.store || (shared.store = new (__webpack_require__("./node_modules/core-js/modules/es6.weak-map.js"))());

var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
  var targetMetadata = store.get(target);

  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }

  var keyMetadata = targetMetadata.get(targetKey);

  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  }

  return keyMetadata;
};

var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};

var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};

var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};

var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) {
    keys.push(key);
  });
  return keys;
};

var toMetaKey = function toMetaKey(it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};

var exp = function exp(O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

/***/ }),

/***/ "./node_modules/core-js/modules/_microtask.js":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var macrotask = __webpack_require__("./node_modules/core-js/modules/_task.js").set;

var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__("./node_modules/core-js/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function flush() {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();

    while (head) {
      fn = head.fn;
      head = head.next;

      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }

    last = undefined;
    if (parent) parent.enter();
  }; // Node.js


  if (isNode) {
    notify = function notify() {
      process.nextTick(flush);
    }; // browsers with MutationObserver

  } else if (Observer) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, {
      characterData: true
    }); // eslint-disable-line no-new

    notify = function notify() {
      node.data = toggle = !toggle;
    }; // environments with maybe non-completely correct, but existent Promise

  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();

    notify = function notify() {
      promise.then(flush);
    }; // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout

  } else {
    notify = function notify() {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = {
      fn: fn,
      next: undefined
    };
    if (last) last.next = task;

    if (!head) {
      head = task;
      notify();
    }

    last = task;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_new-promise-capability.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 25.4.1.5 NewPromiseCapability(C)

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-assign.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 19.1.2.1 Object.assign(target, source, ...)

var getKeys = __webpack_require__("./node_modules/core-js/modules/_object-keys.js");

var gOPS = __webpack_require__("./node_modules/core-js/modules/_object-gops.js");

var pIE = __webpack_require__("./node_modules/core-js/modules/_object-pie.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var IObject = __webpack_require__("./node_modules/core-js/modules/_iobject.js");

var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

module.exports = !$assign || __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  var A = {};
  var B = {}; // eslint-disable-next-line no-undef

  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;

  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;

    while (length > j) {
      if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    }
  }

  return T;
} : $assign;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var dPs = __webpack_require__("./node_modules/core-js/modules/_object-dps.js");

var enumBugKeys = __webpack_require__("./node_modules/core-js/modules/_enum-bug-keys.js");

var IE_PROTO = __webpack_require__("./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

var Empty = function Empty() {
  /* empty */
};

var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__("./node_modules/core-js/modules/_dom-create.js")('iframe');

  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';

  __webpack_require__("./node_modules/core-js/modules/_html.js").appendChild(iframe);

  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);

  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;

  while (i--) {
    delete _createDict[PROTOTYPE][enumBugKeys[i]];
  }

  return _createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;

  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

    result[IE_PROTO] = O;
  } else result = _createDict();

  return Properties === undefined ? result : dPs(result, Properties);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var IE8_DOM_DEFINE = __webpack_require__("./node_modules/core-js/modules/_ie8-dom-define.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

var dP = Object.defineProperty;
exports.f = __webpack_require__("./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var getKeys = __webpack_require__("./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__("./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;

  while (length > i) {
    dP.f(O, P = keys[i++], Properties[P]);
  }

  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-forced-pam.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Forced replacement prototype accessors methods

module.exports = __webpack_require__("./node_modules/core-js/modules/_library.js") || !__webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  var K = Math.random(); // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call

  __defineSetter__.call(null, K, function () {
    /* empty */
  });

  delete __webpack_require__("./node_modules/core-js/modules/_global.js")[K];
});

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__("./node_modules/core-js/modules/_object-pie.js");

var createDesc = __webpack_require__("./node_modules/core-js/modules/_property-desc.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var IE8_DOM_DEFINE = __webpack_require__("./node_modules/core-js/modules/_ie8-dom-define.js");

var gOPD = Object.getOwnPropertyDescriptor;
exports.f = __webpack_require__("./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {
    /* empty */
  }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var gOPN = __webpack_require__("./node_modules/core-js/modules/_object-gopn.js").f;

var toString = {}.toString;
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__("./node_modules/core-js/modules/_object-keys-internal.js");

var hiddenKeys = __webpack_require__("./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var IE_PROTO = __webpack_require__("./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];

  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }

  return O instanceof Object ? ObjectProto : null;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var arrayIndexOf = __webpack_require__("./node_modules/core-js/modules/_array-includes.js")(false);

var IE_PROTO = __webpack_require__("./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;

  for (key in O) {
    if (key != IE_PROTO) has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys


  while (names.length > i) {
    if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__("./node_modules/core-js/modules/_object-keys-internal.js");

var enumBugKeys = __webpack_require__("./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-sap.js":
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var core = __webpack_require__("./node_modules/core-js/modules/_core.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-to-array.js":
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__("./node_modules/core-js/modules/_object-keys.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var isEnum = __webpack_require__("./node_modules/core-js/modules/_object-pie.js").f;

module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;

    while (length > i) {
      if (isEnum.call(O, key = keys[i++])) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }

    return result;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_own-keys.js":
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__("./node_modules/core-js/modules/_object-gopn.js");

var gOPS = __webpack_require__("./node_modules/core-js/modules/_object-gops.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var Reflect = __webpack_require__("./node_modules/core-js/modules/_global.js").Reflect;

module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_parse-float.js":
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__("./node_modules/core-js/modules/_global.js").parseFloat;

var $trim = __webpack_require__("./node_modules/core-js/modules/_string-trim.js").trim;

module.exports = 1 / $parseFloat(__webpack_require__("./node_modules/core-js/modules/_string-ws.js") + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

/***/ }),

/***/ "./node_modules/core-js/modules/_parse-int.js":
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__("./node_modules/core-js/modules/_global.js").parseInt;

var $trim = __webpack_require__("./node_modules/core-js/modules/_string-trim.js").trim;

var ws = __webpack_require__("./node_modules/core-js/modules/_string-ws.js");

var hex = /^[-+]?0[xX]/;
module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

/***/ }),

/***/ "./node_modules/core-js/modules/_perform.js":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return {
      e: false,
      v: exec()
    };
  } catch (e) {
    return {
      e: true,
      v: e
    };
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_promise-resolve.js":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var newPromiseCapability = __webpack_require__("./node_modules/core-js/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

module.exports = function (target, src, safe) {
  for (var key in src) {
    redefine(target, key, src[key], safe);
  }

  return target;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var SRC = __webpack_require__("./node_modules/core-js/modules/_uid.js")('src');

var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__("./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),

/***/ "./node_modules/core-js/modules/_same-value.js":
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-collection-from.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/proposal-setmap-offrom/

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var forOf = __webpack_require__("./node_modules/core-js/modules/_for-of.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, {
    from: function from(source
    /* , mapFn, thisArg */
    ) {
      var mapFn = arguments[1];
      var mapping, A, n, cb;
      aFunction(this);
      mapping = mapFn !== undefined;
      if (mapping) aFunction(mapFn);
      if (source == undefined) return new this();
      A = [];

      if (mapping) {
        n = 0;
        cb = ctx(mapFn, arguments[2], 2);
        forOf(source, false, function (nextItem) {
          A.push(cb(nextItem, n++));
        });
      } else {
        forOf(source, false, A.push, A);
      }

      return new this(A);
    }
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-collection-of.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/proposal-setmap-offrom/

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, {
    of: function of() {
      var length = arguments.length;
      var A = Array(length);

      while (length--) {
        A[length] = arguments[length];
      }

      return new this(A);
    }
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var check = function check(O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};

module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = __webpack_require__("./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__("./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }

    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

var DESCRIPTORS = __webpack_require__("./node_modules/core-js/modules/_descriptors.js");

var SPECIES = __webpack_require__("./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function get() {
      return this;
    }
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var TAG = __webpack_require__("./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
    configurable: true,
    value: tag
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("./node_modules/core-js/modules/_shared.js")('keys');

var uid = __webpack_require__("./node_modules/core-js/modules/_uid.js");

module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

module.exports = function (key) {
  return store[key] || (store[key] = {});
};

/***/ }),

/***/ "./node_modules/core-js/modules/_species-constructor.js":
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var SPECIES = __webpack_require__("./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {
      /* empty */
    }, 1) : method.call(null);
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-at.js":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js"); // true  -> String#at
// false -> String#codePointAt


module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-context.js":
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__("./node_modules/core-js/modules/_is-regexp.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-html.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)

var createHTML = function createHTML(string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-pad.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var repeat = __webpack_require__("./node_modules/core-js/modules/_string-repeat.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-repeat.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");

  for (; n > 0; (n >>>= 1) && (str += str)) {
    if (n & 1) res += str;
  }

  return res;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-trim.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var spaces = __webpack_require__("./node_modules/core-js/modules/_string-ws.js");

var space = '[' + spaces + ']';
var non = "\u200B\x85";
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function exporter(KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
}; // 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim


var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

/***/ }),

/***/ "./node_modules/core-js/modules/_string-ws.js":
/***/ (function(module, exports) {

module.exports = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003" + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

/***/ }),

/***/ "./node_modules/core-js/modules/_task.js":
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var invoke = __webpack_require__("./node_modules/core-js/modules/_invoke.js");

var html = __webpack_require__("./node_modules/core-js/modules/_html.js");

var cel = __webpack_require__("./node_modules/core-js/modules/_dom-create.js");

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function run() {
  var id = +this; // eslint-disable-next-line no-prototype-builtins

  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var listener = function listener(event) {
  run.call(event.data);
}; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };

    defer(counter);
    return counter;
  };

  clearTask = function clearImmediate(id) {
    delete queue[id];
  }; // Node.js 0.8-


  if (__webpack_require__("./node_modules/core-js/modules/_cof.js")(process) == 'process') {
    defer = function defer(id) {
      process.nextTick(ctx(run, id, 1));
    }; // Sphere (JS game engine) Dispatch API

  } else if (Dispatch && Dispatch.now) {
    defer = function defer(id) {
      Dispatch.now(ctx(run, id, 1));
    }; // Browsers with MessageChannel, includes WebWorkers

  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function defer(id) {
      global.postMessage(id + '', '*');
    };

    global.addEventListener('message', listener, false); // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function defer(id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    }; // Rest old browsers

  } else {
    defer = function defer(id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}

module.exports = {
  set: setTask,
  clear: clearTask
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var max = Math.max;
var min = Math.min;

module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-index.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;

module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__("./node_modules/core-js/modules/_iobject.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

module.exports = function (it) {
  return IObject(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var min = Math.min;

module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

module.exports = function (it) {
  return Object(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string


module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ "./node_modules/core-js/modules/_typed-array.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (__webpack_require__("./node_modules/core-js/modules/_descriptors.js")) {
  var LIBRARY = __webpack_require__("./node_modules/core-js/modules/_library.js");

  var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

  var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

  var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

  var $typed = __webpack_require__("./node_modules/core-js/modules/_typed.js");

  var $buffer = __webpack_require__("./node_modules/core-js/modules/_typed-buffer.js");

  var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

  var anInstance = __webpack_require__("./node_modules/core-js/modules/_an-instance.js");

  var propertyDesc = __webpack_require__("./node_modules/core-js/modules/_property-desc.js");

  var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

  var redefineAll = __webpack_require__("./node_modules/core-js/modules/_redefine-all.js");

  var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

  var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

  var toIndex = __webpack_require__("./node_modules/core-js/modules/_to-index.js");

  var toAbsoluteIndex = __webpack_require__("./node_modules/core-js/modules/_to-absolute-index.js");

  var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

  var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

  var classof = __webpack_require__("./node_modules/core-js/modules/_classof.js");

  var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

  var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

  var isArrayIter = __webpack_require__("./node_modules/core-js/modules/_is-array-iter.js");

  var create = __webpack_require__("./node_modules/core-js/modules/_object-create.js");

  var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

  var gOPN = __webpack_require__("./node_modules/core-js/modules/_object-gopn.js").f;

  var getIterFn = __webpack_require__("./node_modules/core-js/modules/core.get-iterator-method.js");

  var uid = __webpack_require__("./node_modules/core-js/modules/_uid.js");

  var wks = __webpack_require__("./node_modules/core-js/modules/_wks.js");

  var createArrayMethod = __webpack_require__("./node_modules/core-js/modules/_array-methods.js");

  var createArrayIncludes = __webpack_require__("./node_modules/core-js/modules/_array-includes.js");

  var speciesConstructor = __webpack_require__("./node_modules/core-js/modules/_species-constructor.js");

  var ArrayIterators = __webpack_require__("./node_modules/core-js/modules/es6.array.iterator.js");

  var Iterators = __webpack_require__("./node_modules/core-js/modules/_iterators.js");

  var $iterDetect = __webpack_require__("./node_modules/core-js/modules/_iter-detect.js");

  var setSpecies = __webpack_require__("./node_modules/core-js/modules/_set-species.js");

  var arrayFill = __webpack_require__("./node_modules/core-js/modules/_array-fill.js");

  var arrayCopyWithin = __webpack_require__("./node_modules/core-js/modules/_array-copy-within.js");

  var $DP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

  var $GOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js");

  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';
  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });
  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });
  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function toOffset(it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function validate(it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function allocate(C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    }

    return new C(length);
  };

  var speciesFromList = function speciesFromList(O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function fromList(C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);

    while (length > index) {
      result[index] = list[index++];
    }

    return result;
  };

  var addGetter = function addGetter(it, key, internal) {
    dP(it, key, {
      get: function get() {
        return this._d[internal];
      }
    });
  };

  var $from = function from(source
  /* , mapfn, thisArg */
  ) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;

    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      }

      O = values;
    }

    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);

    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }

    return result;
  };

  var $of = function of()
  /* ...items */
  {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);

    while (length > index) {
      result[index] = arguments[index++];
    }

    return result;
  }; // iOS Safari 6.x fails here


  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
    arrayToLocaleString.call(new Uint8Array(1));
  });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start
    /* , end */
    ) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn
    /* , thisArg */
    ) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value
    /* , start, end */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn
    /* , thisArg */
    ) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate
    /* , thisArg */
    ) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate
    /* , thisArg */
    ) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn
    /* , thisArg */
    ) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement
    /* , fromIndex */
    ) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement
    /* , fromIndex */
    ) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) {
      // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement
    /* , fromIndex */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn
    /* , thisArg */
    ) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn
    /* , initialValue */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;

      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      }

      return that;
    },
    some: function some(callbackfn
    /* , thisArg */
    ) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike
  /* , offset */
  ) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);

    while (index < len) {
      this[offset + index] = src[index++];
    }
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function isTAIndex(target, key) {
    return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
  };

  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
  };

  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors
    && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
      target[key] = desc.value;
      return target;
    }

    return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () {
    arrayToString.call({});
  })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function constructor() {
      /* noop */
    },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function get() {
      return this[TYPED_ARRAY];
    }
  }); // eslint-disable-next-line max-statements

  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];

    var getter = function getter(that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };

    var setter = function setter(that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };

    var addElement = function addElement(that, index) {
      dP(that, index, {
        get: function get() {
          return getter(this, index);
        },
        set: function set(value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;

        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;

          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }

          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }

        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });

        while (index < length) {
          addElement(that, index++);
        }
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new

      new TypedArray(null); // eslint-disable-line no-new

      new TypedArray(1.5); // eslint-disable-line no-new

      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass; // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645

        if (!isObject(data)) return new Base(toIndex(data));

        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
        }

        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }

    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function get() {
          return NAME;
        }
      });
    }

    O[NAME] = TypedArray;
    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });
    $export($export.S + $export.F * fails(function () {
      Base.of.call(TypedArray, 1);
    }), NAME, {
      from: $from,
      of: $of
    });
    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
    $export($export.P, NAME, proto);
    setSpecies(NAME);
    $export($export.P + $export.F * FORCED_SET, NAME, {
      set: $set
    });
    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, {
      slice: $slice
    });
    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {
      toLocaleString: $toLocaleString
    });
    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () {
  /* empty */
};

/***/ }),

/***/ "./node_modules/core-js/modules/_typed-buffer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var DESCRIPTORS = __webpack_require__("./node_modules/core-js/modules/_descriptors.js");

var LIBRARY = __webpack_require__("./node_modules/core-js/modules/_library.js");

var $typed = __webpack_require__("./node_modules/core-js/modules/_typed.js");

var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var redefineAll = __webpack_require__("./node_modules/core-js/modules/_redefine-all.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var anInstance = __webpack_require__("./node_modules/core-js/modules/_an-instance.js");

var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var toIndex = __webpack_require__("./node_modules/core-js/modules/_to-index.js");

var gOPN = __webpack_require__("./node_modules/core-js/modules/_object-gopn.js").f;

var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

var arrayFill = __webpack_require__("./node_modules/core-js/modules/_array-fill.js");

var setToStringTag = __webpack_require__("./node_modules/core-js/modules/_set-to-string-tag.js");

var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError; // eslint-disable-next-line no-shadow-restricted-names

var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754

function packIEEE754(value, mLen, nBytes) {
  var buffer = Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value); // eslint-disable-next-line no-self-compare

  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);

    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {
    ;
  }

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {
    ;
  }

  buffer[--i] |= s * 128;
  return buffer;
}

function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;

  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {
    ;
  }

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {
    ;
  }

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}

function packI8(it) {
  return [it & 0xff];
}

function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}

function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}

function packF64(it) {
  return packIEEE754(it, 52, 8);
}

function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, {
    get: function get() {
      return this[internal];
    }
  });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}

function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);

  for (var i = 0; i < bytes; i++) {
    store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
  }
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset
    /* , littleEndian */
    ) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset
    /* , littleEndian */
    ) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new

    new $ArrayBuffer(1.5); // eslint-disable-line no-new

    new $ArrayBuffer(NaN); // eslint-disable-line no-new

    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };

    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];

    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }

    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  } // iOS Safari 7.x bug


  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

/***/ }),

/***/ "./node_modules/core-js/modules/_typed.js":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var uid = __webpack_require__("./node_modules/core-js/modules/_uid.js");

var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;
var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var core = __webpack_require__("./node_modules/core-js/modules/_core.js");

var LIBRARY = __webpack_require__("./node_modules/core-js/modules/_library.js");

var wksExt = __webpack_require__("./node_modules/core-js/modules/_wks-ext.js");

var defineProperty = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
    value: wksExt.f(name)
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__("./node_modules/core-js/modules/_wks.js");

/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__("./node_modules/core-js/modules/_shared.js")('wks');

var uid = __webpack_require__("./node_modules/core-js/modules/_uid.js");

var Symbol = __webpack_require__("./node_modules/core-js/modules/_global.js").Symbol;

var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("./node_modules/core-js/modules/_classof.js");

var ITERATOR = __webpack_require__("./node_modules/core-js/modules/_wks.js")('iterator');

var Iterators = __webpack_require__("./node_modules/core-js/modules/_iterators.js");

module.exports = __webpack_require__("./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.copy-within.js":
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', {
  copyWithin: __webpack_require__("./node_modules/core-js/modules/_array-copy-within.js")
});

__webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js")('copyWithin');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.every.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $every = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(4);

$export($export.P + $export.F * !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn
  /* , thisArg */
  ) {
    return $every(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.fill.js":
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', {
  fill: __webpack_require__("./node_modules/core-js/modules/_array-fill.js")
});

__webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js")('fill');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.filter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $filter = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(2);

$export($export.P + $export.F * !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn
  /* , thisArg */
  ) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find-index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $find = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(6);

var KEY = 'findIndex';
var forced = true; // Shouldn't skip holes

if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $find = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(5);

var KEY = 'find';
var forced = true; // Shouldn't skip holes

if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.for-each.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $forEach = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(0);

var STRICT = __webpack_require__("./node_modules/core-js/modules/_strict-method.js")([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn
  /* , thisArg */
  ) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.from.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var call = __webpack_require__("./node_modules/core-js/modules/_iter-call.js");

var isArrayIter = __webpack_require__("./node_modules/core-js/modules/_is-array-iter.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var createProperty = __webpack_require__("./node_modules/core-js/modules/_create-property.js");

var getIterFn = __webpack_require__("./node_modules/core-js/modules/core.get-iterator-method.js");

$export($export.S + $export.F * !__webpack_require__("./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike
  /* , mapfn = undefined, thisArg = undefined */
  ) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);

      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }

    result.length = index;
    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.index-of.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $indexOf = __webpack_require__("./node_modules/core-js/modules/_array-includes.js")(false);

var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement
  /* , fromIndex = 0 */
  ) {
    return NEGATIVE_ZERO // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.is-array.js":
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Array', {
  isArray: __webpack_require__("./node_modules/core-js/modules/_is-array.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addToUnscopables = __webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js");

var step = __webpack_require__("./node_modules/core-js/modules/_iter-step.js");

var Iterators = __webpack_require__("./node_modules/core-js/modules/_iterators.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js"); // 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()


module.exports = __webpack_require__("./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target

  this._i = 0; // next index

  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;

  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }

  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.join.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 22.1.3.13 Array.prototype.join(separator)

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var arrayJoin = [].join; // fallback for not array-like strings

$export($export.P + $export.F * (__webpack_require__("./node_modules/core-js/modules/_iobject.js") != Object || !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.last-index-of.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement
  /* , fromIndex = @[*-1] */
  ) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;

    for (; index >= 0; index--) {
      if (index in O) if (O[index] === searchElement) return index || 0;
    }

    return -1;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.map.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $map = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(1);

$export($export.P + $export.F * !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn
  /* , thisArg */
  ) {
    return $map(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.of.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var createProperty = __webpack_require__("./node_modules/core-js/modules/_create-property.js"); // WebKit Array.of isn't generic


$export($export.S + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  function F() {
    /* empty */
  }

  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of()
  /* ...args */
  {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);

    while (aLen > index) {
      createProperty(result, index, arguments[index++]);
    }

    result.length = aLen;
    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce-right.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $reduce = __webpack_require__("./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn
  /* , initialValue */
  ) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $reduce = __webpack_require__("./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn
  /* , initialValue */
  ) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.slice.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var html = __webpack_require__("./node_modules/core-js/modules/_html.js");

var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var arraySlice = [].slice; // fallback for not array-like ES3 strings and DOM objects

$export($export.P + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = Array(size);
    var i = 0;

    for (; i < size; i++) {
      cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    }

    return cloned;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.some.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $some = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(3);

$export($export.P + $export.F * !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn
  /* , thisArg */
  ) {
    return $some(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.sort.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var $sort = [].sort;
var test = [1, 2, 3];
$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null); // Old WebKit
}) || !__webpack_require__("./node_modules/core-js/modules/_strict-method.js")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.species.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_set-species.js")('Array');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.now.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Date', {
  now: function now() {
    return new Date().getTime();
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-iso-string.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toISOString = __webpack_require__("./node_modules/core-js/modules/_date-to-iso-string.js"); // PhantomJS / old WebKit has a broken implementations


$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-json.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

$export($export.P + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
    toISOString: function toISOString() {
      return 1;
    }
  }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-primitive.js":
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__("./node_modules/core-js/modules/_wks.js")('toPrimitive');

var proto = Date.prototype;
if (!(TO_PRIMITIVE in proto)) __webpack_require__("./node_modules/core-js/modules/_hide.js")(proto, TO_PRIMITIVE, __webpack_require__("./node_modules/core-js/modules/_date-to-primitive.js"));

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-string.js":
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;

if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__("./node_modules/core-js/modules/_redefine.js")(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this); // eslint-disable-next-line no-self-compare

    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.bind.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.P, 'Function', {
  bind: __webpack_require__("./node_modules/core-js/modules/_bind.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.has-instance.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var HAS_INSTANCE = __webpack_require__("./node_modules/core-js/modules/_wks.js")('hasInstance');

var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)

if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f(FunctionProto, HAS_INSTANCE, {
  value: function value(O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

    while (O = getPrototypeOf(O)) {
      if (this.prototype === O) return true;
    }

    return false;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.name.js":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name'; // 19.2.4.2 name

NAME in FProto || __webpack_require__("./node_modules/core-js/modules/_descriptors.js") && dP(FProto, NAME, {
  configurable: true,
  get: function get() {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var strong = __webpack_require__("./node_modules/core-js/modules/_collection-strong.js");

var validate = __webpack_require__("./node_modules/core-js/modules/_validate-collection.js");

var MAP = 'Map'; // 23.1 Map Objects

module.exports = __webpack_require__("./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.acosh.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var log1p = __webpack_require__("./node_modules/core-js/modules/_math-log1p.js");

var sqrt = Math.sqrt;
var $acosh = Math.acosh;
$export($export.S + $export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
&& Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
&& $acosh(Infinity) == Infinity), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.asinh.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
} // Tor Browser bug: Math.asinh(0) -> -0


$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
  asinh: asinh
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.atanh.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0

$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cbrt.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var sign = __webpack_require__("./node_modules/core-js/modules/_math-sign.js");

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.clz32.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cosh.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var exp = Math.exp;
$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.expm1.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $expm1 = __webpack_require__("./node_modules/core-js/modules/_math-expm1.js");

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {
  expm1: $expm1
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.fround.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  fround: __webpack_require__("./node_modules/core-js/modules/_math-fround.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.hypot.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var abs = Math.abs;
$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) {
    // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;

    while (i < aLen) {
      arg = abs(arguments[i++]);

      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }

    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.imul.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity

$export($export.S + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log10.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log1p.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log1p: __webpack_require__("./node_modules/core-js/modules/_math-log1p.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log2.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sign.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  sign: __webpack_require__("./node_modules/core-js/modules/_math-sign.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sinh.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var expm1 = __webpack_require__("./node_modules/core-js/modules/_math-expm1.js");

var exp = Math.exp; // V8 near Chromium 38 has a problem with very small numbers

$export($export.S + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.tanh.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var expm1 = __webpack_require__("./node_modules/core-js/modules/_math-expm1.js");

var exp = Math.exp;
$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.trunc.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.constructor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js");

var inheritIfRequired = __webpack_require__("./node_modules/core-js/modules/_inherit-if-required.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var gOPN = __webpack_require__("./node_modules/core-js/modules/_object-gopn.js").f;

var gOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js").f;

var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

var $trim = __webpack_require__("./node_modules/core-js/modules/_string-trim.js").trim;

var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype; // Opera ~12 has broken Object#toString

var BROKEN_COF = cof(__webpack_require__("./node_modules/core-js/modules/_object-create.js")(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype; // 7.1.3 ToNumber(argument)

var toNumber = function toNumber(argument) {
  var it = toPrimitive(argument, false);

  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;

    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:
        case 98:
          radix = 2;
          maxCode = 49;
          break;
        // fast equal /^0b[01]+$/i

        case 79:
        case 111:
          radix = 8;
          maxCode = 55;
          break;
        // fast equal /^0o[0-7]+$/i

        default:
          return +it;
      }

      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols

        if (code < 48 || code > maxCode) return NaN;
      }

      return parseInt(digits, radix);
    }
  }

  return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number // check on 1..constructor(foo) case
    && (BROKEN_COF ? fails(function () {
      proto.valueOf.call(that);
    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };

  for (var keys = __webpack_require__("./node_modules/core-js/modules/_descriptors.js") ? gOPN(Base) : ( // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }

  $Number.prototype = proto;
  proto.constructor = $Number;

  __webpack_require__("./node_modules/core-js/modules/_redefine.js")(global, NUMBER, $Number);
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.epsilon.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  EPSILON: Math.pow(2, -52)
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-finite.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var _isFinite = __webpack_require__("./node_modules/core-js/modules/_global.js").isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-integer.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  isInteger: __webpack_require__("./node_modules/core-js/modules/_is-integer.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-nan.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-safe-integer.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var isInteger = __webpack_require__("./node_modules/core-js/modules/_is-integer.js");

var abs = Math.abs;
$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.max-safe-integer.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  MAX_SAFE_INTEGER: 0x1fffffffffffff
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.min-safe-integer.js":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  MIN_SAFE_INTEGER: -0x1fffffffffffff
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-float.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $parseFloat = __webpack_require__("./node_modules/core-js/modules/_parse-float.js"); // 20.1.2.12 Number.parseFloat(string)


$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {
  parseFloat: $parseFloat
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-int.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $parseInt = __webpack_require__("./node_modules/core-js/modules/_parse-int.js"); // 20.1.2.13 Number.parseInt(string, radix)


$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {
  parseInt: $parseInt
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-fixed.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var aNumberValue = __webpack_require__("./node_modules/core-js/modules/_a-number-value.js");

var repeat = __webpack_require__("./node_modules/core-js/modules/_string-repeat.js");

var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function multiply(n, c) {
  var i = -1;
  var c2 = c;

  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};

var divide = function divide(n) {
  var i = 6;
  var c = 0;

  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = c % n * 1e7;
  }
};

var numToString = function numToString() {
  var i = 6;
  var s = '';

  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  }

  return s;
};

var pow = function pow(x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function log(x) {
  var n = 0;
  var x2 = x;

  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }

  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }

  return n;
};

$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !__webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare

    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);

    if (x < 0) {
      s = '-';
      x = -x;
    }

    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;

      if (e > 0) {
        multiply(0, z);
        j = f;

        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }

        multiply(pow(10, j, 1), 0);
        j = e - 1;

        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }

        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }

    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }

    return m;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-precision.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var aNumberValue = __webpack_require__("./node_modules/core-js/modules/_a-number-value.js");

var $toPrecision = 1.0.toPrecision;
$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.assign.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S + $export.F, 'Object', {
  assign: __webpack_require__("./node_modules/core-js/modules/_object-assign.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.create.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js"); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


$export($export.S, 'Object', {
  create: __webpack_require__("./node_modules/core-js/modules/_object-create.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-properties.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js"); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)


$export($export.S + $export.F * !__webpack_require__("./node_modules/core-js/modules/_descriptors.js"), 'Object', {
  defineProperties: __webpack_require__("./node_modules/core-js/modules/_object-dps.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-property.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js"); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


$export($export.S + $export.F * !__webpack_require__("./node_modules/core-js/modules/_descriptors.js"), 'Object', {
  defineProperty: __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.freeze.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var meta = __webpack_require__("./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var $getOwnPropertyDescriptor = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js").f;

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-names.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyNames', function () {
  return __webpack_require__("./node_modules/core-js/modules/_object-gopn-ext.js").f;
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-prototype-of.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var $getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-extensible.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-frozen.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-sealed.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Object', {
  is: __webpack_require__("./node_modules/core-js/modules/_same-value.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.keys.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var $keys = __webpack_require__("./node_modules/core-js/modules/_object-keys.js");

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.prevent-extensions.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var meta = __webpack_require__("./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.seal.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var meta = __webpack_require__("./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__("./node_modules/core-js/modules/_object-sap.js")('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.set-prototype-of.js":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Object', {
  setPrototypeOf: __webpack_require__("./node_modules/core-js/modules/_set-proto.js").set
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.to-string.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 19.1.3.6 Object.prototype.toString()

var classof = __webpack_require__("./node_modules/core-js/modules/_classof.js");

var test = {};
test[__webpack_require__("./node_modules/core-js/modules/_wks.js")('toStringTag')] = 'z';

if (test + '' != '[object z]') {
  __webpack_require__("./node_modules/core-js/modules/_redefine.js")(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-float.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $parseFloat = __webpack_require__("./node_modules/core-js/modules/_parse-float.js"); // 18.2.4 parseFloat(string)


$export($export.G + $export.F * (parseFloat != $parseFloat), {
  parseFloat: $parseFloat
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-int.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $parseInt = __webpack_require__("./node_modules/core-js/modules/_parse-int.js"); // 18.2.5 parseInt(string, radix)


$export($export.G + $export.F * (parseInt != $parseInt), {
  parseInt: $parseInt
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.promise.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__("./node_modules/core-js/modules/_library.js");

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var ctx = __webpack_require__("./node_modules/core-js/modules/_ctx.js");

var classof = __webpack_require__("./node_modules/core-js/modules/_classof.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var anInstance = __webpack_require__("./node_modules/core-js/modules/_an-instance.js");

var forOf = __webpack_require__("./node_modules/core-js/modules/_for-of.js");

var speciesConstructor = __webpack_require__("./node_modules/core-js/modules/_species-constructor.js");

var task = __webpack_require__("./node_modules/core-js/modules/_task.js").set;

var microtask = __webpack_require__("./node_modules/core-js/modules/_microtask.js")();

var newPromiseCapabilityModule = __webpack_require__("./node_modules/core-js/modules/_new-promise-capability.js");

var perform = __webpack_require__("./node_modules/core-js/modules/_perform.js");

var promiseResolve = __webpack_require__("./node_modules/core-js/modules/_promise-resolve.js");

var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';

var empty = function empty() {
  /* empty */
};

var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);

    var FakePromise = (promise.constructor = {})[__webpack_require__("./node_modules/core-js/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) {
    /* empty */
  }
}(); // helpers

var isThenable = function isThenable(it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function notify(promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;

    var run = function run(reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;

      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }

          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) domain.exit();
          }

          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        reject(e);
      }
    };

    while (chain.length > i) {
      run(chain[i++]);
    } // variable length - can't use forEach


    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};

var onUnhandled = function onUnhandled(promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;

    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({
            promise: promise,
            reason: value
          });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    }

    promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};

var isUnhandled = function isUnhandled(promise) {
  if (promise._h == 1) return false;
  var chain = promise._a || promise._c;
  var i = 0;
  var reaction;

  while (chain.length > i) {
    reaction = chain[i++];
    if (reaction.fail || !isUnhandled(reaction.promise)) return false;
  }

  return true;
};

var onHandleUnhandled = function onHandleUnhandled(promise) {
  task.call(global, function () {
    var handler;

    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({
        promise: promise,
        reason: promise._v
      });
    }
  });
};

var $reject = function $reject(value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap

  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};

var $resolve = function $resolve(value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap

  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");

    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = {
          _w: promise,
          _d: false
        }; // wrap

        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({
      _w: promise,
      _d: false
    }, e); // wrap
  }
}; // constructor polyfill


if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);

    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  }; // eslint-disable-next-line no-unused-vars


  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions

    this._a = undefined; // <- checked in isUnhandled reactions

    this._s = 0; // <- state

    this._d = false; // <- done

    this._v = undefined; // <- value

    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

    this._n = false; // <- notify
  };

  Internal.prototype = __webpack_require__("./node_modules/core-js/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;

      this._c.push(reaction);

      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function _catch(onRejected) {
      return this.then(undefined, onRejected);
    }
  });

  OwnPromiseCapability = function OwnPromiseCapability() {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Promise: $Promise
});

__webpack_require__("./node_modules/core-js/modules/_set-to-string-tag.js")($Promise, PROMISE);

__webpack_require__("./node_modules/core-js/modules/_set-species.js")(PROMISE);

Wrapper = __webpack_require__("./node_modules/core-js/modules/_core.js")[PROMISE]; // statics

$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__("./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.apply.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var rApply = (__webpack_require__("./node_modules/core-js/modules/_global.js").Reflect || {}).apply;
var fApply = Function.apply; // MS Edge argumentsList argument is optional

$export($export.S + $export.F * !__webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  rApply(function () {
    /* empty */
  });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.construct.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var create = __webpack_require__("./node_modules/core-js/modules/_object-create.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var bind = __webpack_require__("./node_modules/core-js/modules/_bind.js");

var rConstruct = (__webpack_require__("./node_modules/core-js/modules/_global.js").Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it

var NEW_TARGET_BUG = fails(function () {
  function F() {
    /* empty */
  }

  return !(rConstruct(function () {
    /* empty */
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {
    /* empty */
  });
});
$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args
  /* , newTarget */
  ) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();

        case 1:
          return new Target(args[0]);

        case 2:
          return new Target(args[0], args[1]);

        case 3:
          return new Target(args[0], args[1], args[2]);

        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      } // w/o altered newTarget, lot of arguments case


      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    } // with altered newTarget, not support built-in constructors


    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.define-property.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js"); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false


$export($export.S + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, {
    value: 1
  }), 1, {
    value: 2
  });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);

    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.delete-property.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var gOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js").f;

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.enumerate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 26.1.5 Reflect.enumerate(target)

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var Enumerate = function Enumerate(iterated) {
  this._t = anObject(iterated); // target

  this._i = 0; // next index

  var keys = this._k = []; // keys

  var key;

  for (key in iterated) {
    keys.push(key);
  }
};

__webpack_require__("./node_modules/core-js/modules/_iter-create.js")(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;

  do {
    if (that._i >= keys.length) return {
      value: undefined,
      done: true
    };
  } while (!((key = keys[that._i++]) in that._t));

  return {
    value: key,
    done: false
  };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var getProto = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

function get(target, propertyKey
/* , receiver */
) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {
  get: get
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.has.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.is-extensible.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var $isExtensible = Object.isExtensible;
$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.own-keys.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', {
  ownKeys: __webpack_require__("./node_modules/core-js/modules/_own-keys.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var $preventExtensions = Object.preventExtensions;
$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);

    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var setProto = __webpack_require__("./node_modules/core-js/modules/_set-proto.js");

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);

    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set.js":
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

var gOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var createDesc = __webpack_require__("./node_modules/core-js/modules/_property-desc.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

function set(target, propertyKey, V
/* , receiver */
) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;

  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }

    ownDesc = createDesc(0);
  }

  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }

  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {
  set: set
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.constructor.js":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var inheritIfRequired = __webpack_require__("./node_modules/core-js/modules/_inherit-if-required.js");

var dP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f;

var gOPN = __webpack_require__("./node_modules/core-js/modules/_object-gopn.js").f;

var isRegExp = __webpack_require__("./node_modules/core-js/modules/_is-regexp.js");

var $flags = __webpack_require__("./node_modules/core-js/modules/_flags.js");

var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g; // "new" creates a new object, old webkit buggy here

var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__("./node_modules/core-js/modules/_descriptors.js") && (!CORRECT_NEW || __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  re2[__webpack_require__("./node_modules/core-js/modules/_wks.js")('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
  };

  var proxy = function proxy(key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function get() {
        return Base[key];
      },
      set: function set(it) {
        Base[key] = it;
      }
    });
  };

  for (var keys = gOPN(Base), i = 0; keys.length > i;) {
    proxy(keys[i++]);
  }

  proto.constructor = $RegExp;
  $RegExp.prototype = proto;

  __webpack_require__("./node_modules/core-js/modules/_redefine.js")(global, 'RegExp', $RegExp);
}

__webpack_require__("./node_modules/core-js/modules/_set-species.js")('RegExp');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__("./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__("./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__("./node_modules/core-js/modules/_flags.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.match.js":
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__("./node_modules/core-js/modules/_fix-re-wks.js")('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';

    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.replace.js":
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__("./node_modules/core-js/modules/_fix-re-wks.js")('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';

    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.search.js":
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__("./node_modules/core-js/modules/_fix-re-wks.js")('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';

    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.split.js":
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__("./node_modules/core-js/modules/_fix-re-wks.js")('split', 2, function (defined, SPLIT, $split) {
  'use strict';

  var isRegExp = __webpack_require__("./node_modules/core-js/modules/_is-regexp.js");

  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';

  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it

    $split = function $split(separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split

      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy

      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i; // Doesn't need flags gy, but they don't hurt

      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);

      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];

        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index)); // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func

          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) {
              if (arguments[i] === undefined) match[i] = undefined;
            }
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }

        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }

      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));

      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    }; // Chakra, V8

  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function $split(separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  } // 21.1.3.17 String.prototype.split(separator, limit)


  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("./node_modules/core-js/modules/es6.regexp.flags.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var $flags = __webpack_require__("./node_modules/core-js/modules/_flags.js");

var DESCRIPTORS = __webpack_require__("./node_modules/core-js/modules/_descriptors.js");

var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function define(fn) {
  __webpack_require__("./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
}; // 21.2.5.14 RegExp.prototype.toString()


if (__webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return $toString.call({
    source: 'a',
    flags: 'b'
  }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  }); // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.set.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var strong = __webpack_require__("./node_modules/core-js/modules/_collection-strong.js");

var validate = __webpack_require__("./node_modules/core-js/modules/_validate-collection.js");

var SET = 'Set'; // 23.2 Set Objects

module.exports = __webpack_require__("./node_modules/core-js/modules/_collection.js")(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.anchor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.2 String.prototype.anchor(name)

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.big.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.3 String.prototype.big()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.blink.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.4 String.prototype.blink()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.bold.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.5 String.prototype.bold()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.code-point-at.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $at = __webpack_require__("./node_modules/core-js/modules/_string-at.js")(false);

$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.ends-with.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var context = __webpack_require__("./node_modules/core-js/modules/_string-context.js");

var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];
$export($export.P + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails-is-regexp.js")(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString
  /* , endPosition = @length */
  ) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fixed.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.6 String.prototype.fixed()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontcolor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.7 String.prototype.fontcolor(color)

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontsize.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.8 String.prototype.fontsize(size)

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.from-code-point.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js/modules/_to-absolute-index.js");

var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) {
    // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;

    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
    }

    return res.join('');
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.includes.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var context = __webpack_require__("./node_modules/core-js/modules/_string-context.js");

var INCLUDES = 'includes';
$export($export.P + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails-is-regexp.js")(INCLUDES), 'String', {
  includes: function includes(searchString
  /* , position = 0 */
  ) {
    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.italics.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.9 String.prototype.italics()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.iterator.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $at = __webpack_require__("./node_modules/core-js/modules/_string-at.js")(true); // 21.1.3.27 String.prototype[@@iterator]()


__webpack_require__("./node_modules/core-js/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target

  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return {
    value: undefined,
    done: true
  };
  point = $at(O, index);
  this._i += point.length;
  return {
    value: point,
    done: false
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.link.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.10 String.prototype.link(url)

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.raw.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;

    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    }

    return res.join('');
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.repeat.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__("./node_modules/core-js/modules/_string-repeat.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.small.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.11 String.prototype.small()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.starts-with.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var context = __webpack_require__("./node_modules/core-js/modules/_string-context.js");

var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];
$export($export.P + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails-is-regexp.js")(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString
  /* , position = 0 */
  ) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.strike.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.12 String.prototype.strike()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sub.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.13 String.prototype.sub()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sup.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.14 String.prototype.sup()

__webpack_require__("./node_modules/core-js/modules/_string-html.js")('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.trim.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 21.1.3.25 String.prototype.trim()

__webpack_require__("./node_modules/core-js/modules/_string-trim.js")('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // ECMAScript 6 symbols shim

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var has = __webpack_require__("./node_modules/core-js/modules/_has.js");

var DESCRIPTORS = __webpack_require__("./node_modules/core-js/modules/_descriptors.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

var META = __webpack_require__("./node_modules/core-js/modules/_meta.js").KEY;

var $fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var shared = __webpack_require__("./node_modules/core-js/modules/_shared.js");

var setToStringTag = __webpack_require__("./node_modules/core-js/modules/_set-to-string-tag.js");

var uid = __webpack_require__("./node_modules/core-js/modules/_uid.js");

var wks = __webpack_require__("./node_modules/core-js/modules/_wks.js");

var wksExt = __webpack_require__("./node_modules/core-js/modules/_wks-ext.js");

var wksDefine = __webpack_require__("./node_modules/core-js/modules/_wks-define.js");

var enumKeys = __webpack_require__("./node_modules/core-js/modules/_enum-keys.js");

var isArray = __webpack_require__("./node_modules/core-js/modules/_is-array.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

var createDesc = __webpack_require__("./node_modules/core-js/modules/_property-desc.js");

var _create = __webpack_require__("./node_modules/core-js/modules/_object-create.js");

var gOPNExt = __webpack_require__("./node_modules/core-js/modules/_object-gopn-ext.js");

var $GOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js");

var $DP = __webpack_require__("./node_modules/core-js/modules/_object-dp.js");

var $keys = __webpack_require__("./node_modules/core-js/modules/_object-keys.js");

var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;

var _stringify = $JSON && $JSON.stringify;

var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function get() {
      return dP(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);

  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, {
        enumerable: createDesc(0, false)
      });
    }

    return setSymbolDesc(it, key, D);
  }

  return dP(it, key, D);
};

var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;

  while (l > i) {
    $defineProperty(it, key = keys[i++], P[key]);
  }

  return it;
};

var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};

var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};

var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }

  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }

  return result;
}; // 19.4.1.1 Symbol([description])


if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };

    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: $set
    });
    return wrap(tag);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__("./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__("./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  __webpack_require__("./node_modules/core-js/modules/_object-gops.js").f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__("./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Symbol: $Symbol
});

for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  wks(es6Symbols[j++]);
}

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
  wksDefine(wellKnownSymbols[k++]);
}

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});
$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
}); // 24.3.2 JSON.stringify(value [, replacer [, space]])

$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols

  return _stringify([S]) != '[null]' || _stringify({
    a: S
  }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

    var args = [it];
    var i = 1;
    var replacer, $replacer;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    replacer = args[1];
    if (typeof replacer == 'function') $replacer = replacer;
    if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
      if ($replacer) value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
}); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__("./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

setToStringTag(global.JSON, 'JSON', true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.array-buffer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $typed = __webpack_require__("./node_modules/core-js/modules/_typed.js");

var buffer = __webpack_require__("./node_modules/core-js/modules/_typed-buffer.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var ArrayBuffer = __webpack_require__("./node_modules/core-js/modules/_global.js").ArrayBuffer;

var speciesConstructor = __webpack_require__("./node_modules/core-js/modules/_species-constructor.js");

var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';
$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
  ArrayBuffer: $ArrayBuffer
});
$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});
$export($export.P + $export.U + $export.F * __webpack_require__("./node_modules/core-js/modules/_fails.js")(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix

    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var final = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;

    while (first < final) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    }

    return result;
  }
});

__webpack_require__("./node_modules/core-js/modules/_set-species.js")(ARRAY_BUFFER);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.data-view.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.G + $export.W + $export.F * !__webpack_require__("./node_modules/core-js/modules/_typed.js").ABV, {
  DataView: __webpack_require__("./node_modules/core-js/modules/_typed-buffer.js").DataView
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float32-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float64-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int16-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int32-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int8-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint16-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint32-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-map.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var each = __webpack_require__("./node_modules/core-js/modules/_array-methods.js")(0);

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

var meta = __webpack_require__("./node_modules/core-js/modules/_meta.js");

var assign = __webpack_require__("./node_modules/core-js/modules/_object-assign.js");

var weak = __webpack_require__("./node_modules/core-js/modules/_collection-weak.js");

var isObject = __webpack_require__("./node_modules/core-js/modules/_is-object.js");

var fails = __webpack_require__("./node_modules/core-js/modules/_fails.js");

var validate = __webpack_require__("./node_modules/core-js/modules/_validate-collection.js");

var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function wrapper(get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
}; // 23.3 WeakMap Objects

var $WeakMap = module.exports = __webpack_require__("./node_modules/core-js/modules/_collection.js")(WEAK_MAP, wrapper, methods, weak, true, true); // IE11 WeakMap frozen keys fix


if (fails(function () {
  return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
})) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();

        var result = this._f[key](a, b);

        return key == 'set' ? this : result; // store all the rest on native weakmap
      }

      return method.call(this, a, b);
    });
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-set.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var weak = __webpack_require__("./node_modules/core-js/modules/_collection-weak.js");

var validate = __webpack_require__("./node_modules/core-js/modules/_validate-collection.js");

var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects

__webpack_require__("./node_modules/core-js/modules/_collection.js")(WEAK_SET, function (get) {
  return function WeakSet() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flat-map.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var flattenIntoArray = __webpack_require__("./node_modules/core-js/modules/_flatten-into-array.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var arraySpeciesCreate = __webpack_require__("./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn
  /* , thisArg */
  ) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js")('flatMap');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flatten.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var flattenIntoArray = __webpack_require__("./node_modules/core-js/modules/_flatten-into-array.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var toInteger = __webpack_require__("./node_modules/core-js/modules/_to-integer.js");

var arraySpeciesCreate = __webpack_require__("./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatten: function flatten()
  /* depthArg = 1 */
  {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js")('flatten');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.includes.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/Array.prototype.includes

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $includes = __webpack_require__("./node_modules/core-js/modules/_array-includes.js")(true);

$export($export.P, 'Array', {
  includes: function includes(el
  /* , fromIndex = 0 */
  ) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__("./node_modules/core-js/modules/_add-to-unscopables.js")('includes');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.asap.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var microtask = __webpack_require__("./node_modules/core-js/modules/_microtask.js")();

var process = __webpack_require__("./node_modules/core-js/modules/_global.js").process;

var isNode = __webpack_require__("./node_modules/core-js/modules/_cof.js")(process) == 'process';
$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.error.is-error.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var cof = __webpack_require__("./node_modules/core-js/modules/_cof.js");

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.global.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.G, {
  global: __webpack_require__("./node_modules/core-js/modules/_global.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.from.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__("./node_modules/core-js/modules/_set-collection-from.js")('Map');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.of.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__("./node_modules/core-js/modules/_set-collection-of.js")('Map');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.to-json.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.P + $export.R, 'Map', {
  toJSON: __webpack_require__("./node_modules/core-js/modules/_collection-to-json.js")('Map')
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.clamp.js":
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.deg-per-rad.js":
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  DEG_PER_RAD: Math.PI / 180
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.degrees.js":
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var RAD_PER_DEG = 180 / Math.PI;
$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.fscale.js":
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var scale = __webpack_require__("./node_modules/core-js/modules/_math-scale.js");

var fround = __webpack_require__("./node_modules/core-js/modules/_math-fround.js");

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.iaddh.js":
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.imulh.js":
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.isubh.js":
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.rad-per-deg.js":
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  RAD_PER_DEG: 180 / Math.PI
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.radians.js":
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var DEG_PER_RAD = Math.PI / 180;
$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.scale.js":
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  scale: __webpack_require__("./node_modules/core-js/modules/_math-scale.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.signbit.js":
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  signbit: function signbit(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.umulh.js":
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.define-getter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var $defineProperty = __webpack_require__("./node_modules/core-js/modules/_object-dp.js"); // B.2.2.2 Object.prototype.__defineGetter__(P, getter)


__webpack_require__("./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__("./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, {
      get: aFunction(getter),
      enumerable: true,
      configurable: true
    });
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.define-setter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var $defineProperty = __webpack_require__("./node_modules/core-js/modules/_object-dp.js"); // B.2.2.3 Object.prototype.__defineSetter__(P, setter)


__webpack_require__("./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__("./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, {
      set: aFunction(setter),
      enumerable: true,
      configurable: true
    });
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.entries.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $entries = __webpack_require__("./node_modules/core-js/modules/_object-to-array.js")(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var ownKeys = __webpack_require__("./node_modules/core-js/modules/_own-keys.js");

var toIObject = __webpack_require__("./node_modules/core-js/modules/_to-iobject.js");

var gOPD = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js");

var createProperty = __webpack_require__("./node_modules/core-js/modules/_create-property.js");

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;

    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }

    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.lookup-getter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var getOwnPropertyDescriptor = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js").f; // B.2.2.4 Object.prototype.__lookupGetter__(P)


__webpack_require__("./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__("./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;

    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.lookup-setter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__("./node_modules/core-js/modules/_to-object.js");

var toPrimitive = __webpack_require__("./node_modules/core-js/modules/_to-primitive.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var getOwnPropertyDescriptor = __webpack_require__("./node_modules/core-js/modules/_object-gopd.js").f; // B.2.2.5 Object.prototype.__lookupSetter__(P)


__webpack_require__("./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__("./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;

    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.values.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $values = __webpack_require__("./node_modules/core-js/modules/_object-to-array.js")(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.observable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/zenparsing/es-observable

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var core = __webpack_require__("./node_modules/core-js/modules/_core.js");

var microtask = __webpack_require__("./node_modules/core-js/modules/_microtask.js")();

var OBSERVABLE = __webpack_require__("./node_modules/core-js/modules/_wks.js")('observable');

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var anInstance = __webpack_require__("./node_modules/core-js/modules/_an-instance.js");

var redefineAll = __webpack_require__("./node_modules/core-js/modules/_redefine-all.js");

var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var forOf = __webpack_require__("./node_modules/core-js/modules/_for-of.js");

var RETURN = forOf.RETURN;

var getMethod = function getMethod(fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function cleanupSubscription(subscription) {
  var cleanup = subscription._c;

  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function subscriptionClosed(subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function closeSubscription(subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function Subscription(observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);

  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;

    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function cleanup() {
        subscription.unsubscribe();
      };else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  }

  if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() {
    closeSubscription(this);
  }
});

var SubscriptionObserver = function SubscriptionObserver(subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;

    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;

      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;

    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    }

    cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;

    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;

      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      }

      cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function next(value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});
redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);

    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }

    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          }

          observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = Array(l); i < l;) {
      items[i] = arguments[i++];
    }

    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          }

          observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  }
});
hide($Observable.prototype, OBSERVABLE, function () {
  return this;
});
$export($export.G, {
  Observable: $Observable
});

__webpack_require__("./node_modules/core-js/modules/_set-species.js")('Observable');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.finally.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally


var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var core = __webpack_require__("./node_modules/core-js/modules/_core.js");

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var speciesConstructor = __webpack_require__("./node_modules/core-js/modules/_species-constructor.js");

var promiseResolve = __webpack_require__("./node_modules/core-js/modules/_promise-resolve.js");

$export($export.P + $export.R, 'Promise', {
  'finally': function _finally(onFinally) {
    var C = speciesConstructor(this, core.Promise || global.Promise);
    var isFunction = typeof onFinally == 'function';
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.try.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/proposal-promise-try

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var newPromiseCapability = __webpack_require__("./node_modules/core-js/modules/_new-promise-capability.js");

var perform = __webpack_require__("./node_modules/core-js/modules/_perform.js");

$export($export.S, 'Promise', {
  'try': function _try(callbackfn) {
    var promiseCapability = newPromiseCapability.f(this);
    var result = perform(callbackfn);
    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
    return promiseCapability.promise;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.define-metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;
metadata.exp({
  defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.delete-metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;
metadata.exp({
  deleteMetadata: function deleteMetadata(metadataKey, target
  /* , targetKey */
  ) {
    var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
    var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
    if (metadataMap.size) return true;
    var targetMetadata = store.get(target);
    targetMetadata['delete'](targetKey);
    return !!targetMetadata.size || store['delete'](target);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js":
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__("./node_modules/core-js/modules/es6.set.js");

var from = __webpack_require__("./node_modules/core-js/modules/_array-from-iterable.js");

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({
  getMetadataKeys: function getMetadataKeys(target
  /* , targetKey */
  ) {
    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({
  getMetadata: function getMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js":
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;
metadata.exp({
  getOwnMetadataKeys: function getOwnMetadataKeys(target
  /* , targetKey */
  ) {
    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;
metadata.exp({
  getOwnMetadata: function getOwnMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var getPrototypeOf = __webpack_require__("./node_modules/core-js/modules/_object-gpo.js");

var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({
  hasMetadata: function hasMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-own-metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;
metadata.exp({
  hasOwnMetadata: function hasOwnMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.metadata.js":
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__("./node_modules/core-js/modules/_metadata.js");

var anObject = __webpack_require__("./node_modules/core-js/modules/_an-object.js");

var aFunction = __webpack_require__("./node_modules/core-js/modules/_a-function.js");

var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;
$metadata.exp({
  metadata: function metadata(metadataKey, metadataValue) {
    return function decorator(target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
    };
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.from.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__("./node_modules/core-js/modules/_set-collection-from.js")('Set');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.of.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__("./node_modules/core-js/modules/_set-collection-of.js")('Set');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.to-json.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.P + $export.R, 'Set', {
  toJSON: __webpack_require__("./node_modules/core-js/modules/_collection-to-json.js")('Set')
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.at.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/mathiasbynens/String.prototype.at

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $at = __webpack_require__("./node_modules/core-js/modules/_string-at.js")(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.match-all.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/String.prototype.matchAll/

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var defined = __webpack_require__("./node_modules/core-js/modules/_defined.js");

var toLength = __webpack_require__("./node_modules/core-js/modules/_to-length.js");

var isRegExp = __webpack_require__("./node_modules/core-js/modules/_is-regexp.js");

var getFlags = __webpack_require__("./node_modules/core-js/modules/_flags.js");

var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__("./node_modules/core-js/modules/_iter-create.js")($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);

  return {
    value: match,
    done: match === null
  };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-end.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $pad = __webpack_require__("./node_modules/core-js/modules/_string-pad.js");

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength
  /* , fillString = ' ' */
  ) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-start.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $pad = __webpack_require__("./node_modules/core-js/modules/_string-pad.js");

$export($export.P, 'String', {
  padStart: function padStart(maxLength
  /* , fillString = ' ' */
  ) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-left.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__("./node_modules/core-js/modules/_string-trim.js")('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-right.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__("./node_modules/core-js/modules/_string-trim.js")('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_wks-define.js")('asyncIterator');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.observable.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/_wks-define.js")('observable');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.system.global.js":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

$export($export.S, 'System', {
  global: __webpack_require__("./node_modules/core-js/modules/_global.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-map.from.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__("./node_modules/core-js/modules/_set-collection-from.js")('WeakMap');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-map.of.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__("./node_modules/core-js/modules/_set-collection-of.js")('WeakMap');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-set.from.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__("./node_modules/core-js/modules/_set-collection-from.js")('WeakSet');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-set.of.js":
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__("./node_modules/core-js/modules/_set-collection-of.js")('WeakSet');

/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__("./node_modules/core-js/modules/es6.array.iterator.js");

var getKeys = __webpack_require__("./node_modules/core-js/modules/_object-keys.js");

var redefine = __webpack_require__("./node_modules/core-js/modules/_redefine.js");

var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__("./node_modules/core-js/modules/_hide.js");

var Iterators = __webpack_require__("./node_modules/core-js/modules/_iterators.js");

var wks = __webpack_require__("./node_modules/core-js/modules/_wks.js");

var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;
var DOMIterables = {
  CSSRuleList: true,
  // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true,
  // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true,
  // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;

  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) {
      if (!proto[key]) redefine(proto, key, $iterators[key], true);
    }
  }
}

/***/ }),

/***/ "./node_modules/core-js/modules/web.immediate.js":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var $task = __webpack_require__("./node_modules/core-js/modules/_task.js");

$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

/***/ }),

/***/ "./node_modules/core-js/modules/web.timers.js":
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__("./node_modules/core-js/modules/_global.js");

var $export = __webpack_require__("./node_modules/core-js/modules/_export.js");

var navigator = global.navigator;
var slice = [].slice;
var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check

var wrap = function wrap(set) {
  return function (fn, time
  /* , ...args */
  ) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};

$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

/***/ }),

/***/ "./node_modules/core-js/shim.js":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/core-js/modules/es6.symbol.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.create.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.define-property.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.define-properties.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.get-prototype-of.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.keys.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.get-own-property-names.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.freeze.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.seal.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.prevent-extensions.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.is-frozen.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.is-sealed.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.is-extensible.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.assign.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.is.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.set-prototype-of.js");

__webpack_require__("./node_modules/core-js/modules/es6.object.to-string.js");

__webpack_require__("./node_modules/core-js/modules/es6.function.bind.js");

__webpack_require__("./node_modules/core-js/modules/es6.function.name.js");

__webpack_require__("./node_modules/core-js/modules/es6.function.has-instance.js");

__webpack_require__("./node_modules/core-js/modules/es6.parse-int.js");

__webpack_require__("./node_modules/core-js/modules/es6.parse-float.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.constructor.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.to-fixed.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.to-precision.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.epsilon.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.is-finite.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.is-integer.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.is-nan.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.is-safe-integer.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.max-safe-integer.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.min-safe-integer.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.parse-float.js");

__webpack_require__("./node_modules/core-js/modules/es6.number.parse-int.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.acosh.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.asinh.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.atanh.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.cbrt.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.clz32.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.cosh.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.expm1.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.fround.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.hypot.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.imul.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.log10.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.log1p.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.log2.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.sign.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.sinh.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.tanh.js");

__webpack_require__("./node_modules/core-js/modules/es6.math.trunc.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.from-code-point.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.raw.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.trim.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.iterator.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.code-point-at.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.ends-with.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.includes.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.repeat.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.starts-with.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.anchor.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.big.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.blink.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.bold.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.fixed.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.fontcolor.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.fontsize.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.italics.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.link.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.small.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.strike.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.sub.js");

__webpack_require__("./node_modules/core-js/modules/es6.string.sup.js");

__webpack_require__("./node_modules/core-js/modules/es6.date.now.js");

__webpack_require__("./node_modules/core-js/modules/es6.date.to-json.js");

__webpack_require__("./node_modules/core-js/modules/es6.date.to-iso-string.js");

__webpack_require__("./node_modules/core-js/modules/es6.date.to-string.js");

__webpack_require__("./node_modules/core-js/modules/es6.date.to-primitive.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.is-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.from.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.of.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.join.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.slice.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.sort.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.for-each.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.map.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.filter.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.some.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.every.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.reduce.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.reduce-right.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.index-of.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.last-index-of.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.copy-within.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.fill.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.find.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.find-index.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.species.js");

__webpack_require__("./node_modules/core-js/modules/es6.array.iterator.js");

__webpack_require__("./node_modules/core-js/modules/es6.regexp.constructor.js");

__webpack_require__("./node_modules/core-js/modules/es6.regexp.to-string.js");

__webpack_require__("./node_modules/core-js/modules/es6.regexp.flags.js");

__webpack_require__("./node_modules/core-js/modules/es6.regexp.match.js");

__webpack_require__("./node_modules/core-js/modules/es6.regexp.replace.js");

__webpack_require__("./node_modules/core-js/modules/es6.regexp.search.js");

__webpack_require__("./node_modules/core-js/modules/es6.regexp.split.js");

__webpack_require__("./node_modules/core-js/modules/es6.promise.js");

__webpack_require__("./node_modules/core-js/modules/es6.map.js");

__webpack_require__("./node_modules/core-js/modules/es6.set.js");

__webpack_require__("./node_modules/core-js/modules/es6.weak-map.js");

__webpack_require__("./node_modules/core-js/modules/es6.weak-set.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.array-buffer.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.data-view.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.int8-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.uint8-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.int16-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.uint16-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.int32-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.uint32-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.float32-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.typed.float64-array.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.apply.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.construct.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.define-property.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.delete-property.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.enumerate.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.get.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.get-prototype-of.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.has.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.is-extensible.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.own-keys.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.prevent-extensions.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.set.js");

__webpack_require__("./node_modules/core-js/modules/es6.reflect.set-prototype-of.js");

__webpack_require__("./node_modules/core-js/modules/es7.array.includes.js");

__webpack_require__("./node_modules/core-js/modules/es7.array.flat-map.js");

__webpack_require__("./node_modules/core-js/modules/es7.array.flatten.js");

__webpack_require__("./node_modules/core-js/modules/es7.string.at.js");

__webpack_require__("./node_modules/core-js/modules/es7.string.pad-start.js");

__webpack_require__("./node_modules/core-js/modules/es7.string.pad-end.js");

__webpack_require__("./node_modules/core-js/modules/es7.string.trim-left.js");

__webpack_require__("./node_modules/core-js/modules/es7.string.trim-right.js");

__webpack_require__("./node_modules/core-js/modules/es7.string.match-all.js");

__webpack_require__("./node_modules/core-js/modules/es7.symbol.async-iterator.js");

__webpack_require__("./node_modules/core-js/modules/es7.symbol.observable.js");

__webpack_require__("./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js");

__webpack_require__("./node_modules/core-js/modules/es7.object.values.js");

__webpack_require__("./node_modules/core-js/modules/es7.object.entries.js");

__webpack_require__("./node_modules/core-js/modules/es7.object.define-getter.js");

__webpack_require__("./node_modules/core-js/modules/es7.object.define-setter.js");

__webpack_require__("./node_modules/core-js/modules/es7.object.lookup-getter.js");

__webpack_require__("./node_modules/core-js/modules/es7.object.lookup-setter.js");

__webpack_require__("./node_modules/core-js/modules/es7.map.to-json.js");

__webpack_require__("./node_modules/core-js/modules/es7.set.to-json.js");

__webpack_require__("./node_modules/core-js/modules/es7.map.of.js");

__webpack_require__("./node_modules/core-js/modules/es7.set.of.js");

__webpack_require__("./node_modules/core-js/modules/es7.weak-map.of.js");

__webpack_require__("./node_modules/core-js/modules/es7.weak-set.of.js");

__webpack_require__("./node_modules/core-js/modules/es7.map.from.js");

__webpack_require__("./node_modules/core-js/modules/es7.set.from.js");

__webpack_require__("./node_modules/core-js/modules/es7.weak-map.from.js");

__webpack_require__("./node_modules/core-js/modules/es7.weak-set.from.js");

__webpack_require__("./node_modules/core-js/modules/es7.global.js");

__webpack_require__("./node_modules/core-js/modules/es7.system.global.js");

__webpack_require__("./node_modules/core-js/modules/es7.error.is-error.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.clamp.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.deg-per-rad.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.degrees.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.fscale.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.iaddh.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.isubh.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.imulh.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.rad-per-deg.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.radians.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.scale.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.umulh.js");

__webpack_require__("./node_modules/core-js/modules/es7.math.signbit.js");

__webpack_require__("./node_modules/core-js/modules/es7.promise.finally.js");

__webpack_require__("./node_modules/core-js/modules/es7.promise.try.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.define-metadata.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.delete-metadata.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.get-metadata.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.get-own-metadata.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.has-metadata.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.has-own-metadata.js");

__webpack_require__("./node_modules/core-js/modules/es7.reflect.metadata.js");

__webpack_require__("./node_modules/core-js/modules/es7.asap.js");

__webpack_require__("./node_modules/core-js/modules/es7.observable.js");

__webpack_require__("./node_modules/core-js/modules/web.timers.js");

__webpack_require__("./node_modules/core-js/modules/web.immediate.js");

__webpack_require__("./node_modules/core-js/modules/web.dom.iterable.js");

module.exports = __webpack_require__("./node_modules/core-js/modules/_core.js");

/***/ }),

/***/ "./node_modules/fbjs/lib/emptyFunction.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}
/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */


var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);

emptyFunction.thatReturnsThis = function () {
  return this;
};

emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),

/***/ "./node_modules/fbjs/lib/emptyObject.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/fbjs/lib/invariant.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;

    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame

    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/fbjs/lib/shallowEqual.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */


var hasOwnProperty = Object.prototype.hasOwnProperty;
/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */

function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */


function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),

/***/ "./node_modules/fbjs/lib/warning.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var emptyFunction = __webpack_require__("./node_modules/fbjs/lib/emptyFunction.js");
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */


var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/howler/dist/howler.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 *  howler.js v2.0.5
 *  howlerjs.com
 *
 *  (c) 2013-2017, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
(function () {
  'use strict';
  /** Global Methods **/

  /***************************************************************************/

  /**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */

  var HowlerGlobal = function HowlerGlobal() {
    this.init();
  };

  HowlerGlobal.prototype = {
    /**
     * Initialize the global Howler object.
     * @return {Howler}
     */
    init: function init() {
      var self = this || Howler; // Create a global ID counter.

      self._counter = 1000; // Internal properties.

      self._codecs = {};
      self._howls = [];
      self._muted = false;
      self._volume = 1;
      self._canPlayEvent = 'canplaythrough';
      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.

      self.masterGain = null;
      self.noAudio = false;
      self.usingWebAudio = true;
      self.autoSuspend = true;
      self.ctx = null; // Set to false to disable the auto iOS enabler.

      self.mobileAutoEnable = true; // Setup the various state values for global tracking.

      self._setup();

      return self;
    },

    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function volume(vol) {
      var self = this || Howler;
      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.

      if (!self.ctx) {
        setupAudioContext();
      }

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        self._volume = vol; // Don't update any of the nodes if we are muted.

        if (self._muted) {
          return self;
        } // When using Web Audio, we just need to adjust the master gain.


        if (self.usingWebAudio) {
          self.masterGain.gain.value = vol;
        } // Loop through and change volume for all HTML5 audio nodes.


        for (var i = 0; i < self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.


            for (var j = 0; j < ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node) {
                sound._node.volume = sound._volume * vol;
              }
            }
          }
        }

        return self;
      }

      return self._volume;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    mute: function mute(muted) {
      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.

      if (!self.ctx) {
        setupAudioContext();
      }

      self._muted = muted; // With Web Audio, we just need to mute the master gain.

      if (self.usingWebAudio) {
        self.masterGain.gain.value = muted ? 0 : self._volume;
      } // Loop through and mute all HTML5 Audio nodes.


      for (var i = 0; i < self._howls.length; i++) {
        if (!self._howls[i]._webAudio) {
          // Get all of the sounds in this Howl group.
          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.


          for (var j = 0; j < ids.length; j++) {
            var sound = self._howls[i]._soundById(ids[j]);

            if (sound && sound._node) {
              sound._node.muted = muted ? true : sound._muted;
            }
          }
        }
      }

      return self;
    },

    /**
     * Unload and destroy all currently loaded Howl objects.
     * @return {Howler}
     */
    unload: function unload() {
      var self = this || Howler;

      for (var i = self._howls.length - 1; i >= 0; i--) {
        self._howls[i].unload();
      } // Create a new AudioContext to make sure it is fully reset.


      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
        self.ctx.close();
        self.ctx = null;
        setupAudioContext();
      }

      return self;
    },

    /**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function codecs(ext) {
      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
    },

    /**
     * Setup various state values for global tracking.
     * @return {Howler}
     */
    _setup: function _setup() {
      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.

      self.state = self.ctx ? self.ctx.state || 'running' : 'running'; // Automatically begin the 30-second suspend process

      self._autoSuspend(); // Check if audio is available.


      if (!self.usingWebAudio) {
        // No audio is available on this system if noAudio is set to true.
        if (typeof Audio !== 'undefined') {
          try {
            var test = new Audio(); // Check if the canplaythrough event is available.

            if (typeof test.oncanplaythrough === 'undefined') {
              self._canPlayEvent = 'canplay';
            }
          } catch (e) {
            self.noAudio = true;
          }
        } else {
          self.noAudio = true;
        }
      } // Test to make sure audio isn't disabled in Internet Explorer.


      try {
        var test = new Audio();

        if (test.muted) {
          self.noAudio = true;
        }
      } catch (e) {} // Check for supported codecs.


      if (!self.noAudio) {
        self._setupCodecs();
      }

      return self;
    },

    /**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
    _setupCodecs: function _setupCodecs() {
      var self = this || Howler;
      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.

      try {
        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;
      } catch (err) {
        return self;
      }

      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
        return self;
      }

      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.

      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);

      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;
      self._codecs = {
        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
        mpeg: !!mpegTest,
        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
      };
      return self;
    },

    /**
     * Mobile browsers will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _enableMobileAudio: function _enableMobileAudio() {
      var self = this || Howler; // Only run this on mobile devices if audio isn't already eanbled.

      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);
      var isTouch = !!('ontouchend' in window || self._navigator && self._navigator.maxTouchPoints > 0 || self._navigator && self._navigator.msMaxTouchPoints > 0);

      if (self._mobileEnabled || !self.ctx || !isMobile && !isTouch) {
        return;
      }

      self._mobileEnabled = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.

      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
        self._mobileUnloaded = true;
        self.unload();
      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
      // http://stackoverflow.com/questions/24119684


      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS, Android, etc.

      var unlock = function unlock() {
        // Fix Android can not play in suspend state.
        Howler._autoResume(); // Create an empty buffer.


        var source = self.ctx.createBufferSource();
        source.buffer = self._scratchBuffer;
        source.connect(self.ctx.destination); // Play the empty buffer.

        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.


        if (typeof self.ctx.resume === 'function') {
          self.ctx.resume();
        } // Setup a timeout to check that we are unlocked on the next event loop.


        source.onended = function () {
          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.

          self._mobileEnabled = true;
          self.mobileAutoEnable = false; // Remove the touch start listener.

          document.removeEventListener('touchstart', unlock, true);
          document.removeEventListener('touchend', unlock, true);
        };
      }; // Setup a touch start listener to attempt an unlock in.


      document.addEventListener('touchstart', unlock, true);
      document.addEventListener('touchend', unlock, true);
      return self;
    },

    /**
     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
     * @return {Howler}
     */
    _autoSuspend: function _autoSuspend() {
      var self = this;

      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
        return;
      } // Check if any sounds are playing.


      for (var i = 0; i < self._howls.length; i++) {
        if (self._howls[i]._webAudio) {
          for (var j = 0; j < self._howls[i]._sounds.length; j++) {
            if (!self._howls[i]._sounds[j]._paused) {
              return self;
            }
          }
        }
      }

      if (self._suspendTimer) {
        clearTimeout(self._suspendTimer);
      } // If no sound has played after 30 seconds, suspend the context.


      self._suspendTimer = setTimeout(function () {
        if (!self.autoSuspend) {
          return;
        }

        self._suspendTimer = null;
        self.state = 'suspending';
        self.ctx.suspend().then(function () {
          self.state = 'suspended';

          if (self._resumeAfterSuspend) {
            delete self._resumeAfterSuspend;

            self._autoResume();
          }
        });
      }, 30000);
      return self;
    },

    /**
     * Automatically resume the Web Audio AudioContext when a new sound is played.
     * @return {Howler}
     */
    _autoResume: function _autoResume() {
      var self = this;

      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      if (self.state === 'running' && self._suspendTimer) {
        clearTimeout(self._suspendTimer);
        self._suspendTimer = null;
      } else if (self.state === 'suspended') {
        self.ctx.resume().then(function () {
          self.state = 'running'; // Emit to all Howls that the audio has resumed.

          for (var i = 0; i < self._howls.length; i++) {
            self._howls[i]._emit('resume');
          }
        });

        if (self._suspendTimer) {
          clearTimeout(self._suspendTimer);
          self._suspendTimer = null;
        }
      } else if (self.state === 'suspending') {
        self._resumeAfterSuspend = true;
      }

      return self;
    }
  }; // Setup the global audio controller.

  var Howler = new HowlerGlobal();
  /** Group Methods **/

  /***************************************************************************/

  /**
   * Create an audio group controller.
   * @param {Object} o Passed in properties for this group.
   */

  var Howl = function Howl(o) {
    var self = this; // Throw an error if no source is provided.

    if (!o.src || o.src.length === 0) {
      console.error('An array of source files must be passed with any new Howl.');
      return;
    }

    self.init(o);
  };

  Howl.prototype = {
    /**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
    init: function init(o) {
      var self = this; // If we don't have an AudioContext created yet, run the setup.

      if (!Howler.ctx) {
        setupAudioContext();
      } // Setup user-defined default properties.


      self._autoplay = o.autoplay || false;
      self._format = typeof o.format !== 'string' ? o.format : [o.format];
      self._html5 = o.html5 || false;
      self._muted = o.mute || false;
      self._loop = o.loop || false;
      self._pool = o.pool || 5;
      self._preload = typeof o.preload === 'boolean' ? o.preload : true;
      self._rate = o.rate || 1;
      self._sprite = o.sprite || {};
      self._src = typeof o.src !== 'string' ? o.src : [o.src];
      self._volume = o.volume !== undefined ? o.volume : 1;
      self._xhrWithCredentials = o.xhrWithCredentials || false; // Setup all other default properties.

      self._duration = 0;
      self._state = 'unloaded';
      self._sounds = [];
      self._endTimers = {};
      self._queue = []; // Setup event listeners.

      self._onend = o.onend ? [{
        fn: o.onend
      }] : [];
      self._onfade = o.onfade ? [{
        fn: o.onfade
      }] : [];
      self._onload = o.onload ? [{
        fn: o.onload
      }] : [];
      self._onloaderror = o.onloaderror ? [{
        fn: o.onloaderror
      }] : [];
      self._onplayerror = o.onplayerror ? [{
        fn: o.onplayerror
      }] : [];
      self._onpause = o.onpause ? [{
        fn: o.onpause
      }] : [];
      self._onplay = o.onplay ? [{
        fn: o.onplay
      }] : [];
      self._onstop = o.onstop ? [{
        fn: o.onstop
      }] : [];
      self._onmute = o.onmute ? [{
        fn: o.onmute
      }] : [];
      self._onvolume = o.onvolume ? [{
        fn: o.onvolume
      }] : [];
      self._onrate = o.onrate ? [{
        fn: o.onrate
      }] : [];
      self._onseek = o.onseek ? [{
        fn: o.onseek
      }] : [];
      self._onresume = []; // Web Audio or HTML5 Audio?

      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio on iOS.

      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {
        Howler._enableMobileAudio();
      } // Keep track of this Howl group in the global controller.


      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.


      if (self._autoplay) {
        self._queue.push({
          event: 'play',
          action: function action() {
            self.play();
          }
        });
      } // Load the source file unless otherwise specified.


      if (self._preload) {
        self.load();
      }

      return self;
    },

    /**
     * Load the audio file.
     * @return {Howler}
     */
    load: function load() {
      var self = this;
      var url = null; // If no audio is available, quit immediately.

      if (Howler.noAudio) {
        self._emit('loaderror', null, 'No audio support.');

        return;
      } // Make sure our source is in an array.


      if (typeof self._src === 'string') {
        self._src = [self._src];
      } // Loop through the sources and pick the first one that is compatible.


      for (var i = 0; i < self._src.length; i++) {
        var ext, str;

        if (self._format && self._format[i]) {
          // If an extension was specified, use that instead.
          ext = self._format[i];
        } else {
          // Make sure the source is a string.
          str = self._src[i];

          if (typeof str !== 'string') {
            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');

            continue;
          } // Extract the file extension from the URL or base64 data URI.


          ext = /^data:audio\/([^;,]+);/i.exec(str);

          if (!ext) {
            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          }
        } // Log a warning if no extension was found.


        if (!ext) {
          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
        } // Check if this extension is available.


        if (ext && Howler.codecs(ext)) {
          url = self._src[i];
          break;
        }
      }

      if (!url) {
        self._emit('loaderror', null, 'No codec support for selected audio sources.');

        return;
      }

      self._src = url;
      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,
      // drop down to HTML5 Audio to avoid Mixed Content errors.

      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
        self._html5 = true;
        self._webAudio = false;
      } // Create a new sound object and add it to the pool.


      new Sound(self); // Load and decode the audio data for playback.

      if (self._webAudio) {
        loadBuffer(self);
      }

      return self;
    },

    /**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Number}          Sound ID.
     */
    play: function play(sprite, internal) {
      var self = this;
      var id = null; // Determine if a sprite, sound id or nothing was passed

      if (typeof sprite === 'number') {
        id = sprite;
        sprite = null;
      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
        // If the passed sprite doesn't exist, do nothing.
        return null;
      } else if (typeof sprite === 'undefined') {
        // Use the default sound sprite (plays the full audio length).
        sprite = '__default'; // Check if there is a single paused sound that isn't ended.
        // If there is, play that sound. If not, continue as usual.

        var num = 0;

        for (var i = 0; i < self._sounds.length; i++) {
          if (self._sounds[i]._paused && !self._sounds[i]._ended) {
            num++;
            id = self._sounds[i]._id;
          }
        }

        if (num === 1) {
          sprite = null;
        } else {
          id = null;
        }
      } // Get the selected node, or get one from the pool.


      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.

      if (!sound) {
        return null;
      } // Select the sprite definition.


      if (id && !sprite) {
        sprite = sound._sprite || '__default';
      } // If the sound hasn't loaded, we must wait to get the audio's duration.
      // We also need to wait to make sure we don't run into race conditions with
      // the order of function calls.


      if (self._state !== 'loaded') {
        // Set the sprite value on this sound.
        sound._sprite = sprite; // Makr this sounded as not ended in case another sound is played before this one loads.

        sound._ended = false; // Add the sound to the queue to be played on load.

        var soundId = sound._id;

        self._queue.push({
          event: 'play',
          action: function action() {
            self.play(soundId);
          }
        });

        return soundId;
      } // Don't play the sound if an id was passed and it is already playing.


      if (id && !sound._paused) {
        // Trigger the play event, in order to keep iterating through queue.
        if (!internal) {
          setTimeout(function () {
            self._emit('play', sound._id);
          }, 0);
        }

        return sound._id;
      } // Make sure the AudioContext isn't suspended, and resume it if it is.


      if (self._webAudio) {
        Howler._autoResume();
      } // Determine how long to play for and where to start playing.


      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);
      var timeout = duration * 1000 / Math.abs(sound._rate); // Update the parameters of the sound

      sound._paused = false;
      sound._ended = false;
      sound._sprite = sprite;
      sound._seek = seek;
      sound._start = self._sprite[sprite][0] / 1000;
      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
      sound._loop = !!(sound._loop || self._sprite[sprite][2]); // Begin the actual playback.

      var node = sound._node;

      if (self._webAudio) {
        // Fire this when the sound is ready to play to begin Web Audio playback.
        var playWebAudio = function playWebAudio() {
          self._refreshBuffer(sound); // Setup the playback params.


          var vol = sound._muted || self._muted ? 0 : sound._volume;
          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.

          if (typeof node.bufferSource.start === 'undefined') {
            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
          } else {
            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
          } // Start a new timer if none is present.


          if (timeout !== Infinity) {
            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
          }

          if (!internal) {
            setTimeout(function () {
              self._emit('play', sound._id);
            }, 0);
          }
        };

        if (Howler.state === 'running') {
          playWebAudio();
        } else {
          self.once('resume', playWebAudio); // Cancel the end timer.

          self._clearTimer(sound._id);
        }
      } else {
        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
        var playHtml5 = function playHtml5() {
          node.currentTime = seek;
          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
          node.volume = sound._volume * Howler.volume();
          node.playbackRate = sound._rate; // Mobile browsers will throw an error if this is called without user interaction.

          try {
            node.play(); // If the node is still paused, then we can assume there was a playback issue.

            if (node.paused) {
              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices where playback was not within a user interaction.');

              return;
            } // Setup the new end timer.


            if (timeout !== Infinity) {
              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            }

            if (!internal) {
              self._emit('play', sound._id);
            }
          } catch (err) {
            self._emit('playerror', sound._id, err);
          }
        }; // Play immediately if ready, or wait for the 'canplaythrough'e vent.


        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;

        if (node.readyState === 4 || loadedNoReadyState) {
          playHtml5();
        } else {
          var listener = function listener() {
            // Begin playback.
            playHtml5(); // Clear this listener.

            node.removeEventListener(Howler._canPlayEvent, listener, false);
          };

          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.

          self._clearTimer(sound._id);
        }
      }

      return sound._id;
    },

    /**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
    pause: function pause(id) {
      var self = this; // If the sound hasn't loaded, add it to the load queue to pause when capable.

      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'pause',
          action: function action() {
            self.pause(id);
          }
        });

        return self;
      } // If no id is passed, get all ID's to be paused.


      var ids = self._getSoundIds(id);

      for (var i = 0; i < ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]); // Get the sound.


        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = self.seek(ids[i]);
          sound._rateSeek = 0;
          sound._paused = true; // Stop currently running fades.

          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound has been created.
              if (!sound._node.bufferSource) {
                continue;
              }

              if (typeof sound._node.bufferSource.stop === 'undefined') {
                sound._node.bufferSource.noteOff(0);
              } else {
                sound._node.bufferSource.stop(0);
              } // Clean up the buffer source.


              self._cleanBuffer(sound._node);
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.pause();
            }
          }
        } // Fire the pause event, unless `true` is passed as the 2nd argument.


        if (!arguments[1]) {
          self._emit('pause', sound ? sound._id : null);
        }
      }

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Howl}
     */
    stop: function stop(id, internal) {
      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.

      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'stop',
          action: function action() {
            self.stop(id);
          }
        });

        return self;
      } // If no id is passed, get all ID's to be stopped.


      var ids = self._getSoundIds(id);

      for (var i = 0; i < ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]); // Get the sound.


        var sound = self._soundById(ids[i]);

        if (sound) {
          // Reset the seek position.
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          sound._paused = true;
          sound._ended = true; // Stop currently running fades.

          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound's AudioBufferSourceNode has been created.
              if (sound._node.bufferSource) {
                if (typeof sound._node.bufferSource.stop === 'undefined') {
                  sound._node.bufferSource.noteOff(0);
                } else {
                  sound._node.bufferSource.stop(0);
                } // Clean up the buffer source.


                self._cleanBuffer(sound._node);
              }
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.currentTime = sound._start || 0;

              sound._node.pause();
            }
          }

          if (!internal) {
            self._emit('stop', sound._id);
          }
        }
      }

      return self;
    },

    /**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
    mute: function mute(muted, id) {
      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.

      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'mute',
          action: function action() {
            self.mute(muted, id);
          }
        });

        return self;
      } // If applying mute/unmute to all sounds, update the group's value.


      if (typeof id === 'undefined') {
        if (typeof muted === 'boolean') {
          self._muted = muted;
        } else {
          return self._muted;
        }
      } // If no id is passed, get all ID's to be muted.


      var ids = self._getSoundIds(id);

      for (var i = 0; i < ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          sound._muted = muted;

          if (self._webAudio && sound._node) {
            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
          } else if (sound._node) {
            sound._node.muted = Howler._muted ? true : muted;
          }

          self._emit('mute', sound._id);
        }
      }

      return self;
    },

    /**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
    volume: function volume() {
      var self = this;
      var args = arguments;
      var vol, id; // Determine the values based on arguments.

      if (args.length === 0) {
        // Return the value of the groups' volume.
        return self._volume;
      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
        // First check if this is an ID, and if not, assume it is a new volume.
        var ids = self._getSoundIds();

        var index = ids.indexOf(args[0]);

        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          vol = parseFloat(args[0]);
        }
      } else if (args.length >= 2) {
        vol = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      } // Update the volume or return the current volume.


      var sound;

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'volume',
            action: function action() {
              self.volume.apply(self, args);
            }
          });

          return self;
        } // Set the group volume.


        if (typeof id === 'undefined') {
          self._volume = vol;
        } // Update one or all volumes.


        id = self._getSoundIds(id);

        for (var i = 0; i < id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            sound._volume = vol; // Stop currently running fades.

            if (!args[2]) {
              self._stopFade(id[i]);
            }

            if (self._webAudio && sound._node && !sound._muted) {
              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            } else if (sound._node && !sound._muted) {
              sound._node.volume = vol * Howler.volume();
            }

            self._emit('volume', sound._id);
          }
        }
      } else {
        sound = id ? self._soundById(id) : self._sounds[0];
        return sound ? sound._volume : 0;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
    fade: function fade(from, to, len, id) {
      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.

      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'fade',
          action: function action() {
            self.fade(from, to, len, id);
          }
        });

        return self;
      } // Set the volume to the start position.


      self.volume(from, id); // Fade the volume of one or all sounds.

      var ids = self._getSoundIds(id);

      for (var i = 0; i < ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.


        if (sound) {
          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
          if (!id) {
            self._stopFade(ids[i]);
          } // If we are using Web Audio, let the native methods do the actual fade.


          if (self._webAudio && !sound._muted) {
            var currentTime = Howler.ctx.currentTime;
            var end = currentTime + len / 1000;
            sound._volume = from;

            sound._node.gain.setValueAtTime(from, currentTime);

            sound._node.gain.linearRampToValueAtTime(to, end);
          }

          self._startFadeInterval(sound, from, to, len, ids[i]);
        }
      }

      return self;
    },

    /**
     * Starts the internal interval to fade a sound.
     * @param  {Object} sound Reference to sound to fade.
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id to fade.
     */
    _startFadeInterval: function _startFadeInterval(sound, from, to, len, id) {
      var self = this;
      var vol = from;
      var dir = from > to ? 'out' : 'in';
      var diff = Math.abs(from - to);
      var steps = diff / 0.01;
      var stepLen = steps > 0 ? len / steps : len; // Since browsers clamp timeouts to 4ms, we need to clamp our steps to that too.

      if (stepLen < 4) {
        steps = Math.ceil(steps / (4 / stepLen));
        stepLen = 4;
      }

      sound._interval = setInterval(function () {
        // Update the volume amount, but only if the volume should change.
        if (steps > 0) {
          vol += dir === 'in' ? 0.01 : -0.01;
        } // Make sure the volume is in the right bounds.


        vol = Math.max(0, vol);
        vol = Math.min(1, vol); // Round to within 2 decimal points.

        vol = Math.round(vol * 100) / 100; // Change the volume.

        if (self._webAudio) {
          if (typeof id === 'undefined') {
            self._volume = vol;
          }

          sound._volume = vol;
        } else {
          self.volume(vol, sound._id, true);
        } // When the fade is complete, stop it and fire event.


        if (to < from && vol <= to || to > from && vol >= to) {
          clearInterval(sound._interval);
          sound._interval = null;
          self.volume(to, sound._id);

          self._emit('fade', sound._id);
        }
      }, stepLen);
    },

    /**
     * Internal method that stops the currently playing fade when
     * a new fade starts, volume is changed or the sound is stopped.
     * @param  {Number} id The sound id.
     * @return {Howl}
     */
    _stopFade: function _stopFade(id) {
      var self = this;

      var sound = self._soundById(id);

      if (sound && sound._interval) {
        if (self._webAudio) {
          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
        }

        clearInterval(sound._interval);
        sound._interval = null;

        self._emit('fade', id);
      }

      return self;
    },

    /**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
    loop: function loop() {
      var self = this;
      var args = arguments;
      var loop, id, sound; // Determine the values for loop and id.

      if (args.length === 0) {
        // Return the grou's loop value.
        return self._loop;
      } else if (args.length === 1) {
        if (typeof args[0] === 'boolean') {
          loop = args[0];
          self._loop = loop;
        } else {
          // Return this sound's loop value.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._loop : false;
        }
      } else if (args.length === 2) {
        loop = args[0];
        id = parseInt(args[1], 10);
      } // If no id is passed, get all ID's to be looped.


      var ids = self._getSoundIds(id);

      for (var i = 0; i < ids.length; i++) {
        sound = self._soundById(ids[i]);

        if (sound) {
          sound._loop = loop;

          if (self._webAudio && sound._node && sound._node.bufferSource) {
            sound._node.bufferSource.loop = loop;

            if (loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop;
            }
          }
        }
      }

      return self;
    },

    /**
     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   rate() -> Returns the first sound node's current playback rate.
     *   rate(id) -> Returns the sound id's current playback rate.
     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
     *   rate(rate, id) -> Sets the playback rate of passed sound id.
     * @return {Howl/Number} Returns self or the current playback rate.
     */
    rate: function rate() {
      var self = this;
      var args = arguments;
      var rate, id; // Determine the values based on arguments.

      if (args.length === 0) {
        // We will simply return the current rate of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new rate value.
        var ids = self._getSoundIds();

        var index = ids.indexOf(args[0]);

        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          rate = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        rate = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      } // Update the playback rate or return the current value.


      var sound;

      if (typeof rate === 'number') {
        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'rate',
            action: function action() {
              self.rate.apply(self, args);
            }
          });

          return self;
        } // Set the group rate.


        if (typeof id === 'undefined') {
          self._rate = rate;
        } // Update one or all volumes.


        id = self._getSoundIds(id);

        for (var i = 0; i < id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            // Keep track of our position when the rate changed and update the playback
            // start position so we can properly adjust the seek position for time elapsed.
            sound._rateSeek = self.seek(id[i]);
            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
            sound._rate = rate; // Change the playback rate.

            if (self._webAudio && sound._node && sound._node.bufferSource) {
              sound._node.bufferSource.playbackRate.value = rate;
            } else if (sound._node) {
              sound._node.playbackRate = rate;
            } // Reset the timers.


            var seek = self.seek(id[i]);
            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;
            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.

            if (self._endTimers[id[i]] || !sound._paused) {
              self._clearTimer(id[i]);

              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
            }

            self._emit('rate', sound._id);
          }
        }
      } else {
        sound = self._soundById(id);
        return sound ? sound._rate : self._rate;
      }

      return self;
    },

    /**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
    seek: function seek() {
      var self = this;
      var args = arguments;
      var seek, id; // Determine the values based on arguments.

      if (args.length === 0) {
        // We will simply return the current position of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new seek position.
        var ids = self._getSoundIds();

        var index = ids.indexOf(args[0]);

        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else if (self._sounds.length) {
          id = self._sounds[0]._id;
          seek = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        seek = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      } // If there is no ID, bail out.


      if (typeof id === 'undefined') {
        return self;
      } // If the sound hasn't loaded, add it to the load queue to seek when capable.


      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'seek',
          action: function action() {
            self.seek.apply(self, args);
          }
        });

        return self;
      } // Get the sound.


      var sound = self._soundById(id);

      if (sound) {
        if (typeof seek === 'number' && seek >= 0) {
          // Pause the sound and update position for restarting playback.
          var playing = self.playing(id);

          if (playing) {
            self.pause(id, true);
          } // Move the position of the track and cancel timer.


          sound._seek = seek;
          sound._ended = false;

          self._clearTimer(id); // Restart the playback if the sound was playing.


          if (playing) {
            self.play(id, true);
          } // Update the seek position for HTML5 Audio.


          if (!self._webAudio && sound._node) {
            sound._node.currentTime = seek;
          }

          self._emit('seek', id);
        } else {
          if (self._webAudio) {
            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
          } else {
            return sound._node.currentTime;
          }
        }
      }

      return self;
    },

    /**
     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
     * @return {Boolean} True if playing and false if not.
     */
    playing: function playing(id) {
      var self = this; // Check the passed sound ID (if any).

      if (typeof id === 'number') {
        var sound = self._soundById(id);

        return sound ? !sound._paused : false;
      } // Otherwise, loop through all sounds and check if any are playing.


      for (var i = 0; i < self._sounds.length; i++) {
        if (!self._sounds[i]._paused) {
          return true;
        }
      }

      return false;
    },

    /**
     * Get the duration of this sound. Passing a sound id will return the sprite duration.
     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
     * @return {Number} Audio duration in seconds.
     */
    duration: function duration(id) {
      var self = this;
      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.

      var sound = self._soundById(id);

      if (sound) {
        duration = self._sprite[sound._sprite][1] / 1000;
      }

      return duration;
    },

    /**
     * Returns the current loaded state of this Howl.
     * @return {String} 'unloaded', 'loading', 'loaded'
     */
    state: function state() {
      return this._state;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
    unload: function unload() {
      var self = this; // Stop playing any active sounds.

      var sounds = self._sounds;

      for (var i = 0; i < sounds.length; i++) {
        // Stop the sound if it is currently playing.
        if (!sounds[i]._paused) {
          self.stop(sounds[i]._id);
        } // Remove the source or disconnect.


        if (!self._webAudio) {
          // Set the source to 0-second silence to stop any downloading (except in IE).
          var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);

          if (!checkIE) {
            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
          } // Remove any event listeners.


          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);

          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
        } // Empty out all of the nodes.


        delete sounds[i]._node; // Make sure all timers are cleared out.

        self._clearTimer(sounds[i]._id); // Remove the references in the global Howler object.


        var index = Howler._howls.indexOf(self);

        if (index >= 0) {
          Howler._howls.splice(index, 1);
        }
      } // Delete this sound from the cache (if no other Howl is using it).


      var remCache = true;

      for (i = 0; i < Howler._howls.length; i++) {
        if (Howler._howls[i]._src === self._src) {
          remCache = false;
          break;
        }
      }

      if (cache && remCache) {
        delete cache[self._src];
      } // Clear global errors.


      Howler.noAudio = false; // Clear out `self`.

      self._state = 'unloaded';
      self._sounds = [];
      self = null;
      return null;
    },

    /**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
     * @return {Howl}
     */
    on: function on(event, fn, id, once) {
      var self = this;
      var events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(once ? {
          id: id,
          fn: fn,
          once: once
        } : {
          id: id,
          fn: fn
        });
      }

      return self;
    },

    /**
     * Remove a custom event. Call without parameters to remove all events.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
    off: function off(event, fn, id) {
      var self = this;
      var events = self['_on' + event];
      var i = 0; // Allow passing just an event and ID.

      if (typeof fn === 'number') {
        id = fn;
        fn = null;
      }

      if (fn || id) {
        // Loop through event store and remove the passed function.
        for (i = 0; i < events.length; i++) {
          var isId = id === events[i].id;

          if (fn === events[i].fn && isId || !fn && isId) {
            events.splice(i, 1);
            break;
          }
        }
      } else if (event) {
        // Clear out all events of this type.
        self['_on' + event] = [];
      } else {
        // Clear out all events of every type.
        var keys = Object.keys(self);

        for (i = 0; i < keys.length; i++) {
          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {
            self[keys[i]] = [];
          }
        }
      }

      return self;
    },

    /**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    once: function once(event, fn, id) {
      var self = this; // Setup the event listener.

      self.on(event, fn, id, 1);
      return self;
    },

    /**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
    _emit: function _emit(event, id, msg) {
      var self = this;
      var events = self['_on' + event]; // Loop through event store and fire all functions.

      for (var i = events.length - 1; i >= 0; i--) {
        if (!events[i].id || events[i].id === id || event === 'load') {
          setTimeout(function (fn) {
            fn.call(this, id, msg);
          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.

          if (events[i].once) {
            self.off(event, events[i].fn, events[i].id);
          }
        }
      }

      return self;
    },

    /**
     * Queue of actions initiated before the sound has loaded.
     * These will be called in sequence, with the next only firing
     * after the previous has finished executing (even if async like play).
     * @return {Howl}
     */
    _loadQueue: function _loadQueue() {
      var self = this;

      if (self._queue.length > 0) {
        var task = self._queue[0]; // don't move onto the next task until this one is done

        self.once(task.event, function () {
          self._queue.shift();

          self._loadQueue();
        });
        task.action();
      }

      return self;
    },

    /**
     * Fired when playback ends at the end of the duration.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _ended: function _ended(sound) {
      var self = this;
      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping
      // audio before it completes playing. Lets check the node to make sure it
      // believes it has completed, before ending the playback.

      if (!self._webAudio && sound._node && !sound._node.paused) {
        setTimeout(self._ended.bind(self, sound), 100);
        return self;
      } // Should this sound loop?


      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.

      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.


      if (!self._webAudio && loop) {
        self.stop(sound._id, true).play(sound._id);
      } // Restart this timer if on a Web Audio loop.


      if (self._webAudio && loop) {
        self._emit('play', sound._id);

        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        sound._playStart = Howler.ctx.currentTime;
        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);
        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
      } // Mark the node as paused.


      if (self._webAudio && !loop) {
        sound._paused = true;
        sound._ended = true;
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;

        self._clearTimer(sound._id); // Clean up the buffer source.


        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.


        Howler._autoSuspend();
      } // When using a sprite, end the track.


      if (!self._webAudio && !loop) {
        self.stop(sound._id);
      }

      return self;
    },

    /**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
    _clearTimer: function _clearTimer(id) {
      var self = this;

      if (self._endTimers[id]) {
        clearTimeout(self._endTimers[id]);
        delete self._endTimers[id];
      }

      return self;
    },

    /**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
    _soundById: function _soundById(id) {
      var self = this; // Loop through all sounds and find the one with this ID.

      for (var i = 0; i < self._sounds.length; i++) {
        if (id === self._sounds[i]._id) {
          return self._sounds[i];
        }
      }

      return null;
    },

    /**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
    _inactiveSound: function _inactiveSound() {
      var self = this;

      self._drain(); // Find the first inactive node to recycle.


      for (var i = 0; i < self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          return self._sounds[i].reset();
        }
      } // If no inactive node was found, create a new one.


      return new Sound(self);
    },

    /**
     * Drain excess inactive sounds from the pool.
     */
    _drain: function _drain() {
      var self = this;
      var limit = self._pool;
      var cnt = 0;
      var i = 0; // If there are less sounds than the max pool size, we are done.

      if (self._sounds.length < limit) {
        return;
      } // Count the number of inactive sounds.


      for (i = 0; i < self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          cnt++;
        }
      } // Remove excess inactive sounds, going in reverse order.


      for (i = self._sounds.length - 1; i >= 0; i--) {
        if (cnt <= limit) {
          return;
        }

        if (self._sounds[i]._ended) {
          // Disconnect the audio source when using Web Audio.
          if (self._webAudio && self._sounds[i]._node) {
            self._sounds[i]._node.disconnect(0);
          } // Remove sounds until we have the pool size.


          self._sounds.splice(i, 1);

          cnt--;
        }
      }
    },

    /**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
    _getSoundIds: function _getSoundIds(id) {
      var self = this;

      if (typeof id === 'undefined') {
        var ids = [];

        for (var i = 0; i < self._sounds.length; i++) {
          ids.push(self._sounds[i]._id);
        }

        return ids;
      } else {
        return [id];
      }
    },

    /**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _refreshBuffer: function _refreshBuffer(sound) {
      var self = this; // Setup the buffer source for playback.

      sound._node.bufferSource = Howler.ctx.createBufferSource();
      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.

      if (sound._panner) {
        sound._node.bufferSource.connect(sound._panner);
      } else {
        sound._node.bufferSource.connect(sound._node);
      } // Setup looping and playback rate.


      sound._node.bufferSource.loop = sound._loop;

      if (sound._loop) {
        sound._node.bufferSource.loopStart = sound._start || 0;
        sound._node.bufferSource.loopEnd = sound._stop;
      }

      sound._node.bufferSource.playbackRate.value = sound._rate;
      return self;
    },

    /**
     * Prevent memory leaks by cleaning up the buffer source after playback.
     * @param  {Object} node Sound's audio node containing the buffer source.
     * @return {Howl}
     */
    _cleanBuffer: function _cleanBuffer(node) {
      var self = this;

      if (self._scratchBuffer) {
        node.bufferSource.onended = null;
        node.bufferSource.disconnect(0);

        try {
          node.bufferSource.buffer = self._scratchBuffer;
        } catch (e) {}
      }

      node.bufferSource = null;
      return self;
    }
  };
  /** Single Sound Methods **/

  /***************************************************************************/

  /**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */

  var Sound = function Sound(howl) {
    this._parent = howl;
    this.init();
  };

  Sound.prototype = {
    /**
     * Initialize a new Sound object.
     * @return {Sound}
     */
    init: function init() {
      var self = this;
      var parent = self._parent; // Setup the default parameters.

      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default'; // Generate a unique ID for this sound.

      self._id = ++Howler._counter; // Add itself to the parent's pool.

      parent._sounds.push(self); // Create the new node.


      self.create();
      return self;
    },

    /**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
    create: function create() {
      var self = this;
      var parent = self._parent;
      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;

      if (parent._webAudio) {
        // Create the gain node for controlling volume (the source will connect to this).
        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();

        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);

        self._node.paused = true;

        self._node.connect(Howler.masterGain);
      } else {
        self._node = new Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).

        self._errorFn = self._errorListener.bind(self);

        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.


        self._loadFn = self._loadListener.bind(self);

        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Setup the new audio node.


        self._node.src = parent._src;
        self._node.preload = 'auto';
        self._node.volume = volume * Howler.volume(); // Begin loading the source.

        self._node.load();
      }

      return self;
    },

    /**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
    reset: function reset() {
      var self = this;
      var parent = self._parent; // Reset all of the parameters of this sound.

      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._rateSeek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.

      self._id = ++Howler._counter;
      return self;
    },

    /**
     * HTML5 Audio error listener callback.
     */
    _errorListener: function _errorListener() {
      var self = this; // Fire an error event and pass back the code.

      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.


      self._node.removeEventListener('error', self._errorFn, false);
    },

    /**
     * HTML5 Audio canplaythrough listener callback.
     */
    _loadListener: function _loadListener() {
      var self = this;
      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.

      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.

      if (Object.keys(parent._sprite).length === 0) {
        parent._sprite = {
          __default: [0, parent._duration * 1000]
        };
      }

      if (parent._state !== 'loaded') {
        parent._state = 'loaded';

        parent._emit('load');

        parent._loadQueue();
      } // Clear the event listener.


      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
    }
  };
  /** Helper Methods **/

  /***************************************************************************/

  var cache = {};
  /**
   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
   * @param  {Howl} self
   */

  var loadBuffer = function loadBuffer(self) {
    var url = self._src; // Check if the buffer has already been cached and use it instead.

    if (cache[url]) {
      // Set the duration from the cache.
      self._duration = cache[url].duration; // Load the sound into this Howl.

      loadSound(self);
      return;
    }

    if (/^data:[^;]+;base64,/.test(url)) {
      // Decode the base64 data URI without XHR, since some browsers don't support it.
      var data = atob(url.split(',')[1]);
      var dataView = new Uint8Array(data.length);

      for (var i = 0; i < data.length; ++i) {
        dataView[i] = data.charCodeAt(i);
      }

      decodeAudioData(dataView.buffer, self);
    } else {
      // Load the buffer from the URL.
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.withCredentials = self._xhrWithCredentials;
      xhr.responseType = 'arraybuffer';

      xhr.onload = function () {
        // Make sure we get a successful response back.
        var code = (xhr.status + '')[0];

        if (code !== '0' && code !== '2' && code !== '3') {
          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');

          return;
        }

        decodeAudioData(xhr.response, self);
      };

      xhr.onerror = function () {
        // If there is an error, switch to HTML5 Audio.
        if (self._webAudio) {
          self._html5 = true;
          self._webAudio = false;
          self._sounds = [];
          delete cache[url];
          self.load();
        }
      };

      safeXhrSend(xhr);
    }
  };
  /**
   * Send the XHR request wrapped in a try/catch.
   * @param  {Object} xhr XHR to send.
   */


  var safeXhrSend = function safeXhrSend(xhr) {
    try {
      xhr.send();
    } catch (e) {
      xhr.onerror();
    }
  };
  /**
   * Decode audio data from an array buffer.
   * @param  {ArrayBuffer} arraybuffer The audio data.
   * @param  {Howl}        self
   */


  var decodeAudioData = function decodeAudioData(arraybuffer, self) {
    // Decode the buffer into an audio source.
    Howler.ctx.decodeAudioData(arraybuffer, function (buffer) {
      if (buffer && self._sounds.length > 0) {
        cache[self._src] = buffer;
        loadSound(self, buffer);
      }
    }, function () {
      self._emit('loaderror', null, 'Decoding audio data failed.');
    });
  };
  /**
   * Sound is now loaded, so finish setting everything up and fire the loaded event.
   * @param  {Howl} self
   * @param  {Object} buffer The decoded buffer sound source.
   */


  var loadSound = function loadSound(self, buffer) {
    // Set the duration.
    if (buffer && !self._duration) {
      self._duration = buffer.duration;
    } // Setup a sprite if none is defined.


    if (Object.keys(self._sprite).length === 0) {
      self._sprite = {
        __default: [0, self._duration * 1000]
      };
    } // Fire the loaded event.


    if (self._state !== 'loaded') {
      self._state = 'loaded';

      self._emit('load');

      self._loadQueue();
    }
  };
  /**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */


  var setupAudioContext = function setupAudioContext() {
    // Check if we are using Web Audio and setup the AudioContext if we are.
    try {
      if (typeof AudioContext !== 'undefined') {
        Howler.ctx = new AudioContext();
      } else if (typeof webkitAudioContext !== 'undefined') {
        Howler.ctx = new webkitAudioContext();
      } else {
        Howler.usingWebAudio = false;
      }
    } catch (e) {
      Howler.usingWebAudio = false;
    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).
    // If it is, disable Web Audio as it causes crashing.


    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);

    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);

    var version = appVersion ? parseInt(appVersion[1], 10) : null;

    if (iOS && version && version < 9) {
      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());

      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
        Howler.usingWebAudio = false;
      }
    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).


    if (Howler.usingWebAudio) {
      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
      Howler.masterGain.gain.value = Howler._muted ? 0 : 1;
      Howler.masterGain.connect(Howler.ctx.destination);
    } // Re-run the setup on Howler.


    Howler._setup();
  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.


  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return {
        Howler: Howler,
        Howl: Howl
      };
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } // Add support for CommonJS libraries such as browserify.


  if (true) {
    exports.Howler = Howler;
    exports.Howl = Howl;
  } // Define globally in case AMD is not available or unused.


  if (typeof window !== 'undefined') {
    window.HowlerGlobal = HowlerGlobal;
    window.Howler = Howler;
    window.Howl = Howl;
    window.Sound = Sound;
  } else if (typeof global !== 'undefined') {
    // Add to global in Node.js (for testing, etc).
    global.HowlerGlobal = HowlerGlobal;
    global.Howler = Howler;
    global.Howl = Howl;
    global.Sound = Sound;
  }
})();
/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.0.5
 *  howlerjs.com
 *
 *  (c) 2013-2017, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */


(function () {
  'use strict'; // Setup default properties.

  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
  /** Global Methods **/

  /***************************************************************************/

  /**
   * Helper method to update the stereo panning position of all current Howls.
   * Future Howls will not use this value unless explicitly set.
   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
   * @return {Howler/Number}     Self or current stereo panning value.
   */

  HowlerGlobal.prototype.stereo = function (pan) {
    var self = this; // Stop right here if not using Web Audio.

    if (!self.ctx || !self.ctx.listener) {
      return self;
    } // Loop through all Howls and update their stereo panning.


    for (var i = self._howls.length - 1; i >= 0; i--) {
      self._howls[i].stereo(pan);
    }

    return self;
  };
  /**
   * Get/set the position of the listener in 3D cartesian space. Sounds using
   * 3D position will be relative to the listener's position.
   * @param  {Number} x The x-position of the listener.
   * @param  {Number} y The y-position of the listener.
   * @param  {Number} z The z-position of the listener.
   * @return {Howler/Array}   Self or current listener position.
   */


  HowlerGlobal.prototype.pos = function (x, y, z) {
    var self = this; // Stop right here if not using Web Audio.

    if (!self.ctx || !self.ctx.listener) {
      return self;
    } // Set the defaults for optional 'y' & 'z'.


    y = typeof y !== 'number' ? self._pos[1] : y;
    z = typeof z !== 'number' ? self._pos[2] : z;

    if (typeof x === 'number') {
      self._pos = [x, y, z];
      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
    } else {
      return self._pos;
    }

    return self;
  };
  /**
   * Get/set the direction the listener is pointing in the 3D cartesian space.
   * A front and up vector must be provided. The front is the direction the
   * face of the listener is pointing, and up is the direction the top of the
   * listener is pointing. Thus, these values are expected to be at right angles
   * from each other.
   * @param  {Number} x   The x-orientation of the listener.
   * @param  {Number} y   The y-orientation of the listener.
   * @param  {Number} z   The z-orientation of the listener.
   * @param  {Number} xUp The x-orientation of the top of the listener.
   * @param  {Number} yUp The y-orientation of the top of the listener.
   * @param  {Number} zUp The z-orientation of the top of the listener.
   * @return {Howler/Array}     Returns self or the current orientation vectors.
   */


  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {
    var self = this; // Stop right here if not using Web Audio.

    if (!self.ctx || !self.ctx.listener) {
      return self;
    } // Set the defaults for optional 'y' & 'z'.


    var or = self._orientation;
    y = typeof y !== 'number' ? or[1] : y;
    z = typeof z !== 'number' ? or[2] : z;
    xUp = typeof xUp !== 'number' ? or[3] : xUp;
    yUp = typeof yUp !== 'number' ? or[4] : yUp;
    zUp = typeof zUp !== 'number' ? or[5] : zUp;

    if (typeof x === 'number') {
      self._orientation = [x, y, z, xUp, yUp, zUp];
      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
    } else {
      return or;
    }

    return self;
  };
  /** Group Methods **/

  /***************************************************************************/

  /**
   * Add new properties to the core init.
   * @param  {Function} _super Core init method.
   * @return {Howl}
   */


  Howl.prototype.init = function (_super) {
    return function (o) {
      var self = this; // Setup user-defined default properties.

      self._orientation = o.orientation || [1, 0, 0];
      self._stereo = o.stereo || null;
      self._pos = o.pos || null;
      self._pannerAttr = {
        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
      }; // Setup event listeners.

      self._onstereo = o.onstereo ? [{
        fn: o.onstereo
      }] : [];
      self._onpos = o.onpos ? [{
        fn: o.onpos
      }] : [];
      self._onorientation = o.onorientation ? [{
        fn: o.onorientation
      }] : []; // Complete initilization with howler.js core's init function.

      return _super.call(this, o);
    };
  }(Howl.prototype.init);
  /**
   * Get/set the stereo panning of the audio source for this sound or all in the group.
   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Number}    Returns self or the current stereo panning value.
   */


  Howl.prototype.stereo = function (pan, id) {
    var self = this; // Stop right here if not using Web Audio.

    if (!self._webAudio) {
      return self;
    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.


    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'stereo',
        action: function action() {
          self.stereo(pan, id);
        }
      });

      return self;
    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.


    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.

    if (typeof id === 'undefined') {
      // Return the group's stereo panning if no parameters are passed.
      if (typeof pan === 'number') {
        self._stereo = pan;
        self._pos = [pan, 0, 0];
      } else {
        return self._stereo;
      }
    } // Change the streo panning of one or all sounds in group.


    var ids = self._getSoundIds(id);

    for (var i = 0; i < ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof pan === 'number') {
          sound._stereo = pan;
          sound._pos = [pan, 0, 0];

          if (sound._node) {
            // If we are falling back, make sure the panningModel is equalpower.
            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.

            if (!sound._panner || !sound._panner.pan) {
              setupPanner(sound, pannerType);
            }

            if (pannerType === 'spatial') {
              sound._panner.setPosition(pan, 0, 0);
            } else {
              sound._panner.pan.value = pan;
            }
          }

          self._emit('stereo', sound._id);
        } else {
          return sound._stereo;
        }
      }
    }

    return self;
  };
  /**
   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
   * @param  {Number} x  The x-position of the audio source.
   * @param  {Number} y  The y-position of the audio source.
   * @param  {Number} z  The z-position of the audio source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
   */


  Howl.prototype.pos = function (x, y, z, id) {
    var self = this; // Stop right here if not using Web Audio.

    if (!self._webAudio) {
      return self;
    } // If the sound hasn't loaded, add it to the load queue to change position when capable.


    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'pos',
        action: function action() {
          self.pos(x, y, z, id);
        }
      });

      return self;
    } // Set the defaults for optional 'y' & 'z'.


    y = typeof y !== 'number' ? 0 : y;
    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.

    if (typeof id === 'undefined') {
      // Return the group's spatial position if no parameters are passed.
      if (typeof x === 'number') {
        self._pos = [x, y, z];
      } else {
        return self._pos;
      }
    } // Change the spatial position of one or all sounds in group.


    var ids = self._getSoundIds(id);

    for (var i = 0; i < ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._pos = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || sound._panner.pan) {
              setupPanner(sound, 'spatial');
            }

            sound._panner.setPosition(x, y, z);
          }

          self._emit('pos', sound._id);
        } else {
          return sound._pos;
        }
      }
    }

    return self;
  };
  /**
   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
   * space. Depending on how direction the sound is, based on the `cone` attributes,
   * a sound pointing away from the listener can be quiet or silent.
   * @param  {Number} x  The x-orientation of the source.
   * @param  {Number} y  The y-orientation of the source.
   * @param  {Number} z  The z-orientation of the source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
   */


  Howl.prototype.orientation = function (x, y, z, id) {
    var self = this; // Stop right here if not using Web Audio.

    if (!self._webAudio) {
      return self;
    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.


    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'orientation',
        action: function action() {
          self.orientation(x, y, z, id);
        }
      });

      return self;
    } // Set the defaults for optional 'y' & 'z'.


    y = typeof y !== 'number' ? self._orientation[1] : y;
    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.

    if (typeof id === 'undefined') {
      // Return the group's spatial orientation if no parameters are passed.
      if (typeof x === 'number') {
        self._orientation = [x, y, z];
      } else {
        return self._orientation;
      }
    } // Change the spatial orientation of one or all sounds in group.


    var ids = self._getSoundIds(id);

    for (var i = 0; i < ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._orientation = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner) {
              // Make sure we have a position to setup the node with.
              if (!sound._pos) {
                sound._pos = self._pos || [0, 0, -0.5];
              }

              setupPanner(sound, 'spatial');
            }

            sound._panner.setOrientation(x, y, z);
          }

          self._emit('orientation', sound._id);
        } else {
          return sound._orientation;
        }
      }
    }

    return self;
  };
  /**
   * Get/set the panner node's attributes for a sound or group of sounds.
   * This method can optionall take 0, 1 or 2 arguments.
   *   pannerAttr() -> Returns the group's values.
   *   pannerAttr(id) -> Returns the sound id's values.
   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
   *   pannerAttr(o, id) -> Set's the values of passed sound id.
   *
   *   Attributes:
   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      inside of which there will be no volume reduction.
   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
   *                     listener. Can be `linear`, `inverse` or `exponential.
   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
   *                   will not be reduced any further.
   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
   *                   This is simply a variable of the distance model and has a different effect depending on which model
   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
   *                     with `inverse` and `exponential`.
   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
   *                     Can be `HRTF` or `equalpower`.
   * 
   * @return {Howl/Object} Returns self or current panner attributes.
   */


  Howl.prototype.pannerAttr = function () {
    var self = this;
    var args = arguments;
    var o, id, sound; // Stop right here if not using Web Audio.

    if (!self._webAudio) {
      return self;
    } // Determine the values based on arguments.


    if (args.length === 0) {
      // Return the group's panner attribute values.
      return self._pannerAttr;
    } else if (args.length === 1) {
      if (typeof args[0] === 'object') {
        o = args[0]; // Set the grou's panner attribute values.

        if (typeof id === 'undefined') {
          if (!o.pannerAttr) {
            o.pannerAttr = {
              coneInnerAngle: o.coneInnerAngle,
              coneOuterAngle: o.coneOuterAngle,
              coneOuterGain: o.coneOuterGain,
              distanceModel: o.distanceModel,
              maxDistance: o.maxDistance,
              refDistance: o.refDistance,
              rolloffFactor: o.rolloffFactor,
              panningModel: o.panningModel
            };
          }

          self._pannerAttr = {
            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
          };
        }
      } else {
        // Return this sound's panner attribute values.
        sound = self._soundById(parseInt(args[0], 10));
        return sound ? sound._pannerAttr : self._pannerAttr;
      }
    } else if (args.length === 2) {
      o = args[0];
      id = parseInt(args[1], 10);
    } // Update the values of the specified sounds.


    var ids = self._getSoundIds(id);

    for (var i = 0; i < ids.length; i++) {
      sound = self._soundById(ids[i]);

      if (sound) {
        // Merge the new values into the sound.
        var pa = sound._pannerAttr;
        pa = {
          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
        }; // Update the panner values or create a new panner if none exists.

        var panner = sound._panner;

        if (panner) {
          panner.coneInnerAngle = pa.coneInnerAngle;
          panner.coneOuterAngle = pa.coneOuterAngle;
          panner.coneOuterGain = pa.coneOuterGain;
          panner.distanceModel = pa.distanceModel;
          panner.maxDistance = pa.maxDistance;
          panner.refDistance = pa.refDistance;
          panner.rolloffFactor = pa.rolloffFactor;
          panner.panningModel = pa.panningModel;
        } else {
          // Make sure we have a position to setup the node with.
          if (!sound._pos) {
            sound._pos = self._pos || [0, 0, -0.5];
          } // Create a new panner node.


          setupPanner(sound, 'spatial');
        }
      }
    }

    return self;
  };
  /** Single Sound Methods **/

  /***************************************************************************/

  /**
   * Add new properties to the core Sound init.
   * @param  {Function} _super Core Sound init method.
   * @return {Sound}
   */


  Sound.prototype.init = function (_super) {
    return function () {
      var self = this;
      var parent = self._parent; // Setup user-defined default properties.

      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.

      _super.call(this); // If a stereo or position was specified, set it up.


      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      }
    };
  }(Sound.prototype.init);
  /**
   * Override the Sound.reset method to clean up properties from the spatial plugin.
   * @param  {Function} _super Sound reset method.
   * @return {Sound}
   */


  Sound.prototype.reset = function (_super) {
    return function () {
      var self = this;
      var parent = self._parent; // Reset all spatial plugin properties on this sound.

      self._orientation = parent._orientation;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr; // Complete resetting of the sound.

      return _super.call(this);
    };
  }(Sound.prototype.reset);
  /** Helper Methods **/

  /***************************************************************************/

  /**
   * Create a new panner node and save it on the sound.
   * @param  {Sound} sound Specific sound to setup panning on.
   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
   */


  var setupPanner = function setupPanner(sound, type) {
    type = type || 'spatial'; // Create the new panner node.

    if (type === 'spatial') {
      sound._panner = Howler.ctx.createPanner();
      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
      sound._panner.refDistance = sound._pannerAttr.refDistance;
      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
      sound._panner.panningModel = sound._pannerAttr.panningModel;

      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);

      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
    } else {
      sound._panner = Howler.ctx.createStereoPanner();
      sound._panner.pan.value = sound._stereo;
    }

    sound._panner.connect(sound._node); // Update the connections.


    if (!sound._paused) {
      sound._parent.pause(sound._id, true).play(sound._id);
    }
  };
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),

/***/ "./node_modules/process/browser.js":
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (process.env.NODE_ENV !== 'production') {
  var invariant = __webpack_require__("./node_modules/fbjs/lib/invariant.js");

  var warning = __webpack_require__("./node_modules/fbjs/lib/warning.js");

  var ReactPropTypesSecret = __webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");

  var loggedTypeFailures = {};
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }

        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

/***/ }),

/***/ "./node_modules/react-test-renderer/cjs/react-test-renderer.development.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.2.0
 * react-test-renderer.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    var _assign = __webpack_require__("./node_modules/object-assign/index.js");

    var invariant = __webpack_require__("./node_modules/fbjs/lib/invariant.js");

    var warning = __webpack_require__("./node_modules/fbjs/lib/warning.js");

    var React = __webpack_require__("./node_modules/react/index.js");

    var emptyObject = __webpack_require__("./node_modules/fbjs/lib/emptyObject.js");

    var checkPropTypes = __webpack_require__("./node_modules/prop-types/checkPropTypes.js");

    var shallowEqual = __webpack_require__("./node_modules/fbjs/lib/shallowEqual.js");
    /**
     * WARNING: DO NOT manually require this module.
     * This is a replacement for `invariant(...)` used by the error code system
     * and will _only_ be required by the corresponding babel pass.
     * It always throws.
     */


    var enableAsyncSubtreeAPI = true; // Exports ReactDOM.createRoot

    var enableUserTimingAPI = true; // Mutating mode (React DOM, React ART, React Native):

    var enableMutatingReconciler = true; // Experimental noop mode (currently unused):

    var enableNoopReconciler = false; // Experimental persistent mode (CS):

    var enablePersistentReconciler = false; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

    var debugRenderPhaseSideEffects = false; // Only used in www builds.

    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */

    function get(key) {
      return key._reactInternalFiber;
    }

    function set(key, value) {
      key._reactInternalFiber = value;
    }

    var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

    function getComponentName(fiber) {
      var type = fiber.type;

      if (typeof type === 'string') {
        return type;
      }

      if (typeof type === 'function') {
        return type.displayName || type.name;
      }

      return null;
    }

    var IndeterminateComponent = 0; // Before we know whether it is functional or class

    var FunctionalComponent = 1;
    var ClassComponent = 2;
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

    var HostComponent = 5;
    var HostText = 6;
    var CallComponent = 7;
    var CallHandlerPhase = 8;
    var ReturnComponent = 9;
    var Fragment = 10; // Don't change these two values:

    var NoEffect = 0; //           0b00000000

    var PerformedWork = 1; //      0b00000001
    // You can change the rest (and add more).

    var Placement = 2; //          0b00000010

    var Update = 4; //             0b00000100

    var PlacementAndUpdate = 6; // 0b00000110

    var Deletion = 8; //           0b00001000

    var ContentReset = 16; //      0b00010000

    var Callback = 32; //          0b00100000

    var Err = 64; //               0b01000000

    var Ref = 128; //              0b10000000

    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;

      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }

        while (node['return']) {
          node = node['return'];

          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node['return']) {
          node = node['return'];
        }
      }

      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
      } // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.


      return UNMOUNTED;
    }

    function isFiberMounted(fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;

        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          warning(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component');
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);

      if (!fiber) {
        return false;
      }

      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function assertIsMounted(fiber) {
      !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var state = isFiberMountedImpl(fiber);
        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

        if (state === MOUNTING) {
          return null;
        }

        return fiber;
      } // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.


      var a = fiber;
      var b = alternate;

      while (true) {
        var parentA = a['return'];
        var parentB = parentA ? parentA.alternate : null;

        if (!parentA || !parentB) {
          // We're at the root.
          break;
        } // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.


        if (parentA.child === parentB.child) {
          var child = parentA.child;

          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }

            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }

            child = child.sibling;
          } // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.


          invariant(false, 'Unable to find node on an unmounted component.');
        }

        if (a['return'] !== b['return']) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          //
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;

          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              _child = _child.sibling;
            }

            !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
          }
        }

        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      } // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.


      !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      } // Otherwise B has to be current branch.


      return alternate;
    }

    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node['return'] || node['return'] === currentParent) {
            return null;
          }

          node = node['return'];
        }

        node.sibling['return'] = node['return'];
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node['return'] || node['return'] === currentParent) {
            return null;
          }

          node = node['return'];
        }

        node.sibling['return'] = node['return'];
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    var valueStack = [];
    {
      var fiberStack = [];
    }
    var index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }

    function pop(cursor, fiber) {
      if (index < 0) {
        {
          warning(false, 'Unexpected pop.');
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warning(false, 'Unexpected Fiber popped.');
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }

    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }

    function reset() {
      while (index > -1) {
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
    }

    var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
      return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
    };

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case IndeterminateComponent:
        case FunctionalComponent:
        case ClassComponent:
        case HostComponent:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName(fiber);
          var ownerName = null;

          if (owner) {
            ownerName = getComponentName(owner);
          }

          return describeComponentFrame(name, source, ownerName);

        default:
          return '';
      }
    } // This function can only be called with a work-in-progress fiber and
    // only during begin or complete phase. Do not call it under any other
    // circumstances.


    function getStackAddendumByWorkInProgressFiber(workInProgress) {
      var info = '';
      var node = workInProgress;

      do {
        info += describeFiber(node); // Otherwise this return pointer might point to the wrong tree:

        node = node['return'];
      } while (node);

      return info;
    }

    function getCurrentFiberOwnerName() {
      {
        var fiber = ReactDebugCurrentFiber.current;

        if (fiber === null) {
          return null;
        }

        var owner = fiber._debugOwner;

        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner);
        }
      }
      return null;
    }

    function getCurrentFiberStackAddendum() {
      {
        var fiber = ReactDebugCurrentFiber.current;

        if (fiber === null) {
          return null;
        } // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.


        return getStackAddendumByWorkInProgressFiber(fiber);
      }
      return null;
    }

    function resetCurrentFiber() {
      ReactDebugCurrentFrame.getCurrentStack = null;
      ReactDebugCurrentFiber.current = null;
      ReactDebugCurrentFiber.phase = null;
    }

    function setCurrentFiber(fiber) {
      ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
      ReactDebugCurrentFiber.current = fiber;
      ReactDebugCurrentFiber.phase = null;
    }

    function setCurrentPhase(phase) {
      ReactDebugCurrentFiber.phase = phase;
    }

    var ReactDebugCurrentFiber = {
      current: null,
      phase: null,
      resetCurrentFiber: resetCurrentFiber,
      setCurrentFiber: setCurrentFiber,
      setCurrentPhase: setCurrentPhase,
      getCurrentFiberOwnerName: getCurrentFiberOwnerName,
      getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
    }; // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.

    var reactEmoji = "\u269B";
    var warningEmoji = "\u26D4";
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

    var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).

    var currentPhase = null;
    var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.

    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false; // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.

    var labelsInCurrentCommit = new Set();

    var formatMarkName = function formatMarkName(markName) {
      return reactEmoji + ' ' + markName;
    };

    var formatLabel = function formatLabel(label, warning$$1) {
      var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';
      var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';
      return '' + prefix + label + suffix;
    };

    var beginMark = function beginMark(markName) {
      performance.mark(formatMarkName(markName));
    };

    var clearMark = function clearMark(markName) {
      performance.clearMarks(formatMarkName(markName));
    };

    var endMark = function endMark(label, markName, warning$$1) {
      var formattedMarkName = formatMarkName(markName);
      var formattedLabel = formatLabel(label, warning$$1);

      try {
        performance.measure(formattedLabel, formattedMarkName);
      } catch (err) {} // If previous mark was missing for some reason, this will throw.
      // This could only happen if React crashed in an unexpected place earlier.
      // Don't pile on with more errors.
      // Clear marks immediately to avoid growing buffer.


      performance.clearMarks(formattedMarkName);
      performance.clearMeasures(formattedLabel);
    };

    var getFiberMarkName = function getFiberMarkName(label, debugID) {
      return label + ' (#' + debugID + ')';
    };

    var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
      if (phase === null) {
        // These are composite component total time measurements.
        return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
      } else {
        // Composite component methods.
        return componentName + '.' + phase;
      }
    };

    var beginFiberMark = function beginFiberMark(fiber, phase) {
      var componentName = getComponentName(fiber) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);

      if (isCommitting && labelsInCurrentCommit.has(label)) {
        // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
      }

      labelsInCurrentCommit.add(label);
      var markName = getFiberMarkName(label, debugID);
      beginMark(markName);
      return true;
    };

    var clearFiberMark = function clearFiberMark(fiber, phase) {
      var componentName = getComponentName(fiber) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      clearMark(markName);
    };

    var endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
      var componentName = getComponentName(fiber) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      endMark(label, markName, warning$$1);
    };

    var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
      // Host components should be skipped in the timeline.
      // We could check typeof fiber.type, but does this work with RN?
      switch (fiber.tag) {
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case ReturnComponent:
        case Fragment:
          return true;

        default:
          return false;
      }
    };

    var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
      if (currentPhase !== null && currentPhaseFiber !== null) {
        clearFiberMark(currentPhaseFiber, currentPhase);
      }

      currentPhaseFiber = null;
      currentPhase = null;
      hasScheduledUpdateInCurrentPhase = false;
    };

    var pauseTimers = function pauseTimers() {
      // Stops all currently active measurements so that they can be resumed
      // if we continue in a later deferred loop from the same unit of work.
      var fiber = currentFiber;

      while (fiber) {
        if (fiber._debugIsCurrentlyTiming) {
          endFiberMark(fiber, null, null);
        }

        fiber = fiber['return'];
      }
    };

    var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
      if (fiber['return'] !== null) {
        resumeTimersRecursively(fiber['return']);
      }

      if (fiber._debugIsCurrentlyTiming) {
        beginFiberMark(fiber, null);
      }
    };

    var resumeTimers = function resumeTimers() {
      // Resumes all measurements that were active during the last deferred loop.
      if (currentFiber !== null) {
        resumeTimersRecursively(currentFiber);
      }
    };

    function recordEffect() {
      if (enableUserTimingAPI) {
        effectCountInCurrentCommit++;
      }
    }

    function recordScheduleUpdate() {
      if (enableUserTimingAPI) {
        if (isCommitting) {
          hasScheduledUpdateInCurrentCommit = true;
        }

        if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
          hasScheduledUpdateInCurrentPhase = true;
        }
      }
    }

    function startRequestCallbackTimer() {
      if (enableUserTimingAPI) {
        if (supportsUserTiming && !isWaitingForCallback) {
          isWaitingForCallback = true;
          beginMark('(Waiting for async callback...)');
        }
      }
    }

    function stopRequestCallbackTimer(didExpire) {
      if (enableUserTimingAPI) {
        if (supportsUserTiming) {
          isWaitingForCallback = false;
          var warning$$1 = didExpire ? 'React was blocked by main thread' : null;
          endMark('(Waiting for async callback...)', '(Waiting for async callback...)', warning$$1);
        }
      }
    }

    function startWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, this is the fiber to unwind from.


        currentFiber = fiber;

        if (!beginFiberMark(fiber, null)) {
          return;
        }

        fiber._debugIsCurrentlyTiming = true;
      }
    }

    function cancelWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // Remember we shouldn't complete measurement for this fiber.
        // Otherwise flamechart will be deep even for small updates.


        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
      }
    }

    function stopWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber['return'];

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
      }
    }

    function stopFailedWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber['return'];

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        var warning$$1 = 'An error was thrown inside this error boundary';
        endFiberMark(fiber, null, warning$$1);
      }
    }

    function startPhaseTimer(fiber, phase) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        clearPendingPhaseMeasurement();

        if (!beginFiberMark(fiber, phase)) {
          return;
        }

        currentPhaseFiber = fiber;
        currentPhase = phase;
      }
    }

    function stopPhaseTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        if (currentPhase !== null && currentPhaseFiber !== null) {
          var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
          endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
        }

        currentPhase = null;
        currentPhaseFiber = null;
      }
    }

    function startWorkLoopTimer(nextUnitOfWork) {
      if (enableUserTimingAPI) {
        currentFiber = nextUnitOfWork;

        if (!supportsUserTiming) {
          return;
        }

        commitCountInCurrentWorkLoop = 0; // This is top level call.
        // Any other measurements are performed within.

        beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

        resumeTimers();
      }
    }

    function stopWorkLoopTimer(interruptedBy) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning$$1 = null;

        if (interruptedBy !== null) {
          if (interruptedBy.tag === HostRoot) {
            warning$$1 = 'A top-level update interrupted the previous render';
          } else {
            var componentName = getComponentName(interruptedBy) || 'Unknown';
            warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';
          }
        } else if (commitCountInCurrentWorkLoop > 1) {
          warning$$1 = 'There were cascading updates';
        }

        commitCountInCurrentWorkLoop = 0; // Pause any measurements until the next loop.

        pauseTimers();
        endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning$$1);
      }
    }

    function startCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark('(Committing Changes)');
      }
    }

    function stopCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning$$1 = null;

        if (hasScheduledUpdateInCurrentCommit) {
          warning$$1 = 'Lifecycle hook scheduled a cascading update';
        } else if (commitCountInCurrentWorkLoop > 0) {
          warning$$1 = 'Caused by a cascading update in earlier commit';
        }

        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();
        endMark('(Committing Changes)', '(Committing Changes)', warning$$1);
      }
    }

    function startCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Host Effects)');
      }
    }

    function stopCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
      }
    }

    function startCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Calling Lifecycle Methods)');
      }
    }

    function stopCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
      }
    }

    {
      var warnedAboutMissingGetChildContext = {};
    } // A cursor to the current merged context object on the stack.

    var contextStackCursor = createCursor(emptyObject); // A cursor to a boolean indicating whether the context has changed.

    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.

    var previousContext = emptyObject;

    function getUnmaskedContext(workInProgress) {
      var hasOwnContext = isContextProvider(workInProgress);

      if (hasOwnContext) {
        // If the fiber is a context provider itself, when we read its context
        // we have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }

      return contextStackCursor.current;
    }

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function getMaskedContext(workInProgress, unmaskedContext) {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;

      if (!contextTypes) {
        return emptyObject;
      } // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.


      var instance = workInProgress.stateNode;

      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};

      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName(workInProgress) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.

      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    }

    function hasContextChanged() {
      return didPerformWorkStackCursor.current;
    }

    function isContextConsumer(fiber) {
      return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
    }

    function isContextProvider(fiber) {
      return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
    }

    function popContextProvider(fiber) {
      if (!isContextProvider(fiber)) {
        return;
      }

      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }

    function processChildContext(fiber, parentContext) {
      var instance = fiber.stateNode;
      var childContextTypes = fiber.type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.

      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(fiber) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }

      var childContext = void 0;
      {
        ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
      }
      startPhaseTimer(fiber, 'getChildContext');
      childContext = instance.getChildContext();
      stopPhaseTimer();
      {
        ReactDebugCurrentFiber.setCurrentPhase(null);
      }

      for (var contextKey in childContext) {
        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
      }

      {
        var name = getComponentName(fiber) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
        // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
      }
      return _assign({}, parentContext, childContext);
    }

    function pushContextProvider(workInProgress) {
      if (!isContextProvider(workInProgress)) {
        return false;
      }

      var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.

      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject; // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return true;
    }

    function invalidateContextProvider(workInProgress, didChange) {
      var instance = workInProgress.stateNode;
      !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext(workInProgress, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.

        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }

    function resetContext() {
      previousContext = emptyObject;
      contextStackCursor.current = emptyObject;
      didPerformWorkStackCursor.current = false;
    }

    function findCurrentUnmaskedContext(fiber) {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var node = fiber;

      while (node.tag !== HostRoot) {
        if (isContextProvider(node)) {
          return node.stateNode.__reactInternalMemoizedMergedChildContext;
        }

        var parent = node['return'];
        !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        node = parent;
      }

      return node.stateNode.context;
    }

    var NoWork = 0; // TODO: Use an opaque type once ESLint et al support the syntax

    var Sync = 1;
    var Never = 2147483647; // Max int32: Math.pow(2, 31) - 1

    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = 2; // 1 unit of expiration time represents 10ms.

    function msToExpirationTime(ms) {
      // Always add an offset so that we don't clash with the magic number for NoWork.
      return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
    }

    function expirationTimeToMs(expirationTime) {
      return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
    }

    function ceiling(num, precision) {
      return ((num / precision | 0) + 1) * precision;
    }

    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
      return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }

    var NoContext = 0;
    var AsyncUpdates = 1;
    {
      var hasBadMapPolyfill = false;

      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */

        /* eslint-enable no-new */
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    } // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.

    {
      var debugCounter = 1;
    }

    function FiberNode(tag, key, internalContextTag) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.type = null;
      this.stateNode = null; // Fiber

      this['return'] = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = null;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.internalContextTag = internalContextTag; // Effects

      this.effectTag = NoEffect;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.expirationTime = NoWork;
      this.alternate = null;
      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;

        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.


    var createFiber = function createFiber(tag, key, internalContextTag) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, key, internalContextTag);
    };

    function shouldConstruct(Component) {
      return !!(Component.prototype && Component.prototype.isReactComponent);
    } // This is used to create an alternate fiber to do work on.


    function createWorkInProgress(current, pendingProps, expirationTime) {
      var workInProgress = current.alternate;

      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        // We already have an alternate.
        // Reset the effect tag.
        workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
      }

      workInProgress.expirationTime = expirationTime;
      workInProgress.pendingProps = pendingProps;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue; // These will be overridden during the parent's reconciliation

      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;
      return workInProgress;
    }

    function createHostRootFiber() {
      var fiber = createFiber(HostRoot, null, NoContext);
      return fiber;
    }

    function createFiberFromElement(element, internalContextTag, expirationTime) {
      var owner = null;
      {
        owner = element._owner;
      }
      var fiber = void 0;
      var type = element.type,
          key = element.key;

      if (typeof type === 'function') {
        fiber = shouldConstruct(type) ? createFiber(ClassComponent, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag);
        fiber.type = type;
        fiber.pendingProps = element.props;
      } else if (typeof type === 'string') {
        fiber = createFiber(HostComponent, key, internalContextTag);
        fiber.type = type;
        fiber.pendingProps = element.props;
      } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
        // Currently assumed to be a continuation and therefore is a fiber already.
        // TODO: The yield system is currently broken for updates in some cases.
        // The reified yield stores a fiber, but we don't know which fiber that is;
        // the current or a workInProgress? When the continuation gets rendered here
        // we don't know if we can reuse that fiber or if we need to clone it.
        // There is probably a clever way to restructure this.
        fiber = type;
        fiber.pendingProps = element.props;
      } else {
        var info = '';
        {
          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var ownerName = owner ? getComponentName(owner) : null;

          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }
        }
        invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
      }

      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
      var fiber = createFiber(Fragment, key, internalContextTag);
      fiber.pendingProps = elements;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromText(content, internalContextTag, expirationTime) {
      var fiber = createFiber(HostText, null, internalContextTag);
      fiber.pendingProps = content;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, NoContext);
      fiber.type = 'DELETED';
      return fiber;
    }

    function createFiberFromCall(call, internalContextTag, expirationTime) {
      var fiber = createFiber(CallComponent, call.key, internalContextTag);
      fiber.type = call.handler;
      fiber.pendingProps = call;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
      var fiber = createFiber(ReturnComponent, null, internalContextTag);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromPortal(portal, internalContextTag, expirationTime) {
      var fiber = createFiber(HostPortal, portal.key, internalContextTag);
      fiber.pendingProps = portal.children || [];
      fiber.expirationTime = expirationTime;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    }

    function createFiberRoot(containerInfo, hydrate) {
      // Cyclic construction. This cheats the type system right now because
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber();
      var root = {
        current: uninitializedFiber,
        containerInfo: containerInfo,
        pendingChildren: null,
        remainingExpirationTime: NoWork,
        isReadyForCommit: false,
        finishedWork: null,
        context: null,
        pendingContext: null,
        hydrate: hydrate,
        nextScheduledRoot: null
      };
      uninitializedFiber.stateNode = root;
      return root;
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;

    function catchErrors(fn) {
      return function (arg) {
        try {
          return fn(arg);
        } catch (err) {
          if (true && !hasLoggedError) {
            hasLoggedError = true;
            warning(false, 'React DevTools encountered an error: %s', err);
          }
        }
      };
    }

    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }

      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }

      if (!hook.supportsFiber) {
        {
          warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
        } // DevTools exists, even though it doesn't support Fiber.

        return true;
      }

      try {
        var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

        onCommitFiberRoot = catchErrors(function (root) {
          return hook.onCommitFiberRoot(rendererID, root);
        });
        onCommitFiberUnmount = catchErrors(function (fiber) {
          return hook.onCommitFiberUnmount(rendererID, fiber);
        });
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          warning(false, 'React DevTools encountered an error: %s.', err);
        }
      } // DevTools exists


      return true;
    }

    function onCommitRoot(root) {
      if (typeof onCommitFiberRoot === 'function') {
        onCommitFiberRoot(root);
      }
    }

    function onCommitUnmount(fiber) {
      if (typeof onCommitFiberUnmount === 'function') {
        onCommitFiberUnmount(fiber);
      }
    }

    var ReactErrorUtils = {
      // Used by Fiber to simulate a try-catch.
      _caughtError: null,
      _hasCaughtError: false,
      // Used by event system to capture/rethrow the first error.
      _rethrowError: null,
      _hasRethrowError: false,
      injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
          !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
          invokeGuardedCallback$1 = injectedErrorUtils.invokeGuardedCallback;
        }
      },

      /**
       * Call a function while guarding against errors that happens within it.
       * Returns an error if it throws, otherwise null.
       *
       * In production, this is implemented using a try-catch. The reason we don't
       * use a try-catch directly is so that we can swap out a different
       * implementation in DEV mode.
       *
       * @param {String} name of the guard to use for logging or debugging
       * @param {Function} func The function to invoke
       * @param {*} context The context to use when calling the function
       * @param {...*} args Arguments for function
       */
      invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback$1.apply(ReactErrorUtils, arguments);
      },

      /**
       * Same as invokeGuardedCallback, but instead of returning an error, it stores
       * it in a global so it can be rethrown by `rethrowCaughtError` later.
       * TODO: See if _caughtError and _rethrowError can be unified.
       *
       * @param {String} name of the guard to use for logging or debugging
       * @param {Function} func The function to invoke
       * @param {*} context The context to use when calling the function
       * @param {...*} args Arguments for function
       */
      invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

        if (ReactErrorUtils.hasCaughtError()) {
          var error = ReactErrorUtils.clearCaughtError();

          if (!ReactErrorUtils._hasRethrowError) {
            ReactErrorUtils._hasRethrowError = true;
            ReactErrorUtils._rethrowError = error;
          }
        }
      },

      /**
       * During execution of guarded functions we will capture the first error which
       * we will rethrow to be handled by the top level error handler.
       */
      rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
      },
      hasCaughtError: function hasCaughtError() {
        return ReactErrorUtils._hasCaughtError;
      },
      clearCaughtError: function clearCaughtError() {
        if (ReactErrorUtils._hasCaughtError) {
          var error = ReactErrorUtils._caughtError;
          ReactErrorUtils._caughtError = null;
          ReactErrorUtils._hasCaughtError = false;
          return error;
        } else {
          invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
        }
      }
    };

    var invokeGuardedCallback$1 = function invokeGuardedCallback$1(name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils._hasCaughtError = false;
      ReactErrorUtils._caughtError = null;
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        ReactErrorUtils._caughtError = error;
        ReactErrorUtils._hasCaughtError = true;
      }
    };

    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // untintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      //
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!
      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');

        var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
          // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.
          var didError = true; // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.

          var funcArgs = Array.prototype.slice.call(arguments, 3);

          function callCallback() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false);
            func.apply(context, funcArgs);
            didError = false;
          } // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.


          var error = void 0; // Use this to track whether the error event is ever called.

          var didSetError = false;
          var isCrossOriginError = false;

          function onError(event) {
            error = event.error;
            didSetError = true;

            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
          } // Create a fake event type.


          var evtType = 'react-' + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

          window.addEventListener('error', onError);
          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.

          var evt = document.createEvent('Event');
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
            }

            ReactErrorUtils._hasCaughtError = true;
            ReactErrorUtils._caughtError = error;
          } else {
            ReactErrorUtils._hasCaughtError = false;
            ReactErrorUtils._caughtError = null;
          } // Remove our event listeners


          window.removeEventListener('error', onError);
        };

        invokeGuardedCallback$1 = invokeGuardedCallbackDev;
      }
    }

    var _rethrowCaughtError = function _rethrowCaughtError() {
      if (ReactErrorUtils._hasRethrowError) {
        var error = ReactErrorUtils._rethrowError;
        ReactErrorUtils._rethrowError = null;
        ReactErrorUtils._hasRethrowError = false;
        throw error;
      }
    };

    {
      var didWarnUpdateInsideUpdate = false;
    } // Callbacks are not validated until invocation
    // Singly linked-list of updates. When an update is scheduled, it is added to
    // the queue of the current fiber and the work-in-progress fiber. The two queues
    // are separate but they share a persistent structure.
    //
    // During reconciliation, updates are removed from the work-in-progress fiber,
    // but they remain on the current fiber. That ensures that if a work-in-progress
    // is aborted, the aborted updates are recovered by cloning from current.
    //
    // The work-in-progress queue is always a subset of the current queue.
    //
    // When the tree is committed, the work-in-progress becomes the current.

    function createUpdateQueue(baseState) {
      var queue = {
        baseState: baseState,
        expirationTime: NoWork,
        first: null,
        last: null,
        callbackList: null,
        hasForceUpdate: false,
        isInitialized: false
      };
      {
        queue.isProcessing = false;
      }
      return queue;
    }

    function insertUpdateIntoQueue(queue, update) {
      // Append the update to the end of the list.
      if (queue.last === null) {
        // Queue is empty
        queue.first = queue.last = update;
      } else {
        queue.last.next = update;
        queue.last = update;
      }

      if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
        queue.expirationTime = update.expirationTime;
      }
    }

    function insertUpdateIntoFiber(fiber, update) {
      // We'll have at least one and at most two distinct update queues.
      var alternateFiber = fiber.alternate;
      var queue1 = fiber.updateQueue;

      if (queue1 === null) {
        // TODO: We don't know what the base state will be until we begin work.
        // It depends on which fiber is the next current. Initialize with an empty
        // base state, then set to the memoizedState when rendering. Not super
        // happy with this approach.
        queue1 = fiber.updateQueue = createUpdateQueue(null);
      }

      var queue2 = void 0;

      if (alternateFiber !== null) {
        queue2 = alternateFiber.updateQueue;

        if (queue2 === null) {
          queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
        }
      } else {
        queue2 = null;
      }

      queue2 = queue2 !== queue1 ? queue2 : null; // Warn if an update is scheduled from inside an updater function.

      {
        if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
          warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      } // If there's only one queue, add the update to that queue and exit.

      if (queue2 === null) {
        insertUpdateIntoQueue(queue1, update);
        return;
      } // If either queue is empty, we need to add to both queues.


      if (queue1.last === null || queue2.last === null) {
        insertUpdateIntoQueue(queue1, update);
        insertUpdateIntoQueue(queue2, update);
        return;
      } // If both lists are not empty, the last update is the same for both lists
      // because of structural sharing. So, we should only append to one of
      // the lists.


      insertUpdateIntoQueue(queue1, update); // But we still need to update the `last` pointer of queue2.

      queue2.last = update;
    }

    function getUpdateExpirationTime(fiber) {
      if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
        return NoWork;
      }

      var updateQueue = fiber.updateQueue;

      if (updateQueue === null) {
        return NoWork;
      }

      return updateQueue.expirationTime;
    }

    function getStateFromUpdate(update, instance, prevState, props) {
      var partialState = update.partialState;

      if (typeof partialState === 'function') {
        var updateFn = partialState; // Invoke setState callback an extra time to help detect side-effects.

        if (debugRenderPhaseSideEffects) {
          updateFn.call(instance, prevState, props);
        }

        return updateFn.call(instance, prevState, props);
      } else {
        return partialState;
      }
    }

    function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
      if (current !== null && current.updateQueue === queue) {
        // We need to create a work-in-progress queue, by cloning the current queue.
        var currentQueue = queue;
        queue = workInProgress.updateQueue = {
          baseState: currentQueue.baseState,
          expirationTime: currentQueue.expirationTime,
          first: currentQueue.first,
          last: currentQueue.last,
          isInitialized: currentQueue.isInitialized,
          // These fields are no longer valid because they were already committed.
          // Reset them.
          callbackList: null,
          hasForceUpdate: false
        };
      }

      {
        // Set this flag so we can warn if setState is called inside the update
        // function of another setState.
        queue.isProcessing = true;
      } // Reset the remaining expiration time. If we skip over any updates, we'll
      // increase this accordingly.

      queue.expirationTime = NoWork; // TODO: We don't know what the base state will be until we begin work.
      // It depends on which fiber is the next current. Initialize with an empty
      // base state, then set to the memoizedState when rendering. Not super
      // happy with this approach.

      var state = void 0;

      if (queue.isInitialized) {
        state = queue.baseState;
      } else {
        state = queue.baseState = workInProgress.memoizedState;
        queue.isInitialized = true;
      }

      var dontMutatePrevState = true;
      var update = queue.first;
      var didSkip = false;

      while (update !== null) {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime > renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          var remainingExpirationTime = queue.expirationTime;

          if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
            // Update the remaining expiration time.
            queue.expirationTime = updateExpirationTime;
          }

          if (!didSkip) {
            didSkip = true;
            queue.baseState = state;
          } // Continue to the next update.


          update = update.next;
          continue;
        } // This update does have sufficient priority.
        // If no previous updates were skipped, drop this update from the queue by
        // advancing the head of the list.


        if (!didSkip) {
          queue.first = update.next;

          if (queue.first === null) {
            queue.last = null;
          }
        } // Process the update


        var _partialState = void 0;

        if (update.isReplace) {
          state = getStateFromUpdate(update, instance, state, props);
          dontMutatePrevState = true;
        } else {
          _partialState = getStateFromUpdate(update, instance, state, props);

          if (_partialState) {
            if (dontMutatePrevState) {
              // $FlowFixMe: Idk how to type this properly.
              state = _assign({}, state, _partialState);
            } else {
              state = _assign(state, _partialState);
            }

            dontMutatePrevState = false;
          }
        }

        if (update.isForced) {
          queue.hasForceUpdate = true;
        }

        if (update.callback !== null) {
          // Append to list of callbacks.
          var _callbackList = queue.callbackList;

          if (_callbackList === null) {
            _callbackList = queue.callbackList = [];
          }

          _callbackList.push(update);
        }

        update = update.next;
      }

      if (queue.callbackList !== null) {
        workInProgress.effectTag |= Callback;
      } else if (queue.first === null && !queue.hasForceUpdate) {
        // The queue is empty. We can reset it.
        workInProgress.updateQueue = null;
      }

      if (!didSkip) {
        didSkip = true;
        queue.baseState = state;
      }

      {
        // No longer processing.
        queue.isProcessing = false;
      }
      return state;
    }

    function commitCallbacks(queue, context) {
      var callbackList = queue.callbackList;

      if (callbackList === null) {
        return;
      } // Set the list to null to make sure they don't get called more than once.


      queue.callbackList = null;

      for (var i = 0; i < callbackList.length; i++) {
        var update = callbackList[i];
        var _callback = update.callback; // This update might be processed again. Clear the callback so it's only
        // called once.

        update.callback = null;
        !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;

        _callback.call(context);
      }
    }

    var fakeInternalInstance = {};
    var isArray = Array.isArray;
    {
      var didWarnAboutStateAssignmentForComponent = {};

      var warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
        warning(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
      }; // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.


      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function value() {
          invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    var ReactFiberClassComponent = function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
      // Class component state updater
      var updater = {
        isMounted: isMounted,
        enqueueSetState: function enqueueSetState(instance, partialState, callback) {
          var fiber = get(instance);
          callback = callback === undefined ? null : callback;
          {
            warnOnInvalidCallback(callback, 'setState');
          }
          var expirationTime = computeExpirationForFiber(fiber);
          var update = {
            expirationTime: expirationTime,
            partialState: partialState,
            callback: callback,
            isReplace: false,
            isForced: false,
            nextCallback: null,
            next: null
          };
          insertUpdateIntoFiber(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
          var fiber = get(instance);
          callback = callback === undefined ? null : callback;
          {
            warnOnInvalidCallback(callback, 'replaceState');
          }
          var expirationTime = computeExpirationForFiber(fiber);
          var update = {
            expirationTime: expirationTime,
            partialState: state,
            callback: callback,
            isReplace: true,
            isForced: false,
            nextCallback: null,
            next: null
          };
          insertUpdateIntoFiber(fiber, update);
          scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
          var fiber = get(instance);
          callback = callback === undefined ? null : callback;
          {
            warnOnInvalidCallback(callback, 'forceUpdate');
          }
          var expirationTime = computeExpirationForFiber(fiber);
          var update = {
            expirationTime: expirationTime,
            partialState: null,
            callback: callback,
            isReplace: false,
            isForced: true,
            nextCallback: null,
            next: null
          };
          insertUpdateIntoFiber(fiber, update);
          scheduleWork(fiber, expirationTime);
        }
      };

      function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
        if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
          // If the workInProgress already has an Update effect, return true
          return true;
        }

        var instance = workInProgress.stateNode;
        var type = workInProgress.type;

        if (typeof instance.shouldComponentUpdate === 'function') {
          startPhaseTimer(workInProgress, 'shouldComponentUpdate');
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
          stopPhaseTimer(); // Simulate an async bailout/interruption by invoking lifecycle twice.

          if (debugRenderPhaseSideEffects) {
            instance.shouldComponentUpdate(newProps, newState, newContext);
          }

          {
            warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Unknown');
          }
          return shouldUpdate;
        }

        if (type.prototype && type.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }

        return true;
      }

      function checkClassInstance(workInProgress) {
        var instance = workInProgress.stateNode;
        var type = workInProgress.type;
        {
          var name = getComponentName(workInProgress);
          var renderPresent = instance.render;

          if (!renderPresent) {
            if (type.prototype && typeof type.prototype.render === 'function') {
              warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
            } else {
              warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
            }
          }

          var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
          warning(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
          var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
          warning(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
          var noInstancePropTypes = !instance.propTypes;
          warning(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
          var noInstanceContextTypes = !instance.contextTypes;
          warning(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
          var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
          warning(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);

          if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
            warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
          }

          var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
          warning(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
          var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
          warning(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
          var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
          warning(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
          var hasMutatedProps = instance.props !== workInProgress.pendingProps;
          warning(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
          var noInstanceDefaultProps = !instance.defaultProps;
          warning(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
        }
        var state = instance.state;

        if (state && (typeof state !== 'object' || isArray(state))) {
          warning(false, '%s.state: must be set to an object or null', getComponentName(workInProgress));
        }

        if (typeof instance.getChildContext === 'function') {
          warning(typeof workInProgress.type.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', getComponentName(workInProgress));
        }
      }

      function resetInputPointers(workInProgress, instance) {
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
      }

      function adoptClassInstance(workInProgress, instance) {
        instance.updater = updater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

        set(instance, workInProgress);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }

      function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type;
        var unmaskedContext = getUnmaskedContext(workInProgress);
        var needsContext = isContextConsumer(workInProgress);
        var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
        var instance = new ctor(props, context);
        adoptClassInstance(workInProgress, instance); // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // ReactFiberContext usually updates this cache but can't for newly-created instances.

        if (needsContext) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return instance;
      }

      function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer(workInProgress, 'componentWillMount');
        var oldState = instance.state;
        instance.componentWillMount();
        stopPhaseTimer(); // Simulate an async bailout/interruption by invoking lifecycle twice.

        if (debugRenderPhaseSideEffects) {
          instance.componentWillMount();
        }

        if (oldState !== instance.state) {
          {
            warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress));
          }
          updater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
        startPhaseTimer(workInProgress, 'componentWillReceiveProps');
        var oldState = instance.state;
        instance.componentWillReceiveProps(newProps, newContext);
        stopPhaseTimer(); // Simulate an async bailout/interruption by invoking lifecycle twice.

        if (debugRenderPhaseSideEffects) {
          instance.componentWillReceiveProps(newProps, newContext);
        }

        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress) || 'Component';

            if (!didWarnAboutStateAssignmentForComponent[componentName]) {
              warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
              didWarnAboutStateAssignmentForComponent[componentName] = true;
            }
          }
          updater.enqueueReplaceState(instance, instance.state, null);
        }
      } // Invokes the mount life-cycles on a previously never rendered instance.


      function mountClassInstance(workInProgress, renderExpirationTime) {
        var current = workInProgress.alternate;
        {
          checkClassInstance(workInProgress);
        }
        var instance = workInProgress.stateNode;
        var state = instance.state || null;
        var props = workInProgress.pendingProps;
        !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var unmaskedContext = getUnmaskedContext(workInProgress);
        instance.props = props;
        instance.state = workInProgress.memoizedState = state;
        instance.refs = emptyObject;
        instance.context = getMaskedContext(workInProgress, unmaskedContext);

        if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
          workInProgress.internalContextTag |= AsyncUpdates;
        }

        if (typeof instance.componentWillMount === 'function') {
          callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
          // process them now.

          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null) {
            instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
          }
        }

        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
      } // Called on a preexisting class instance. Returns false if a resumed render
      // could be reused.
      // function resumeMountClassInstance(
      //   workInProgress: Fiber,
      //   priorityLevel: PriorityLevel,
      // ): boolean {
      //   const instance = workInProgress.stateNode;
      //   resetInputPointers(workInProgress, instance);
      //   let newState = workInProgress.memoizedState;
      //   let newProps = workInProgress.pendingProps;
      //   if (!newProps) {
      //     // If there isn't any new props, then we'll reuse the memoized props.
      //     // This could be from already completed work.
      //     newProps = workInProgress.memoizedProps;
      //     invariant(
      //       newProps != null,
      //       'There should always be pending or memoized props. This error is ' +
      //         'likely caused by a bug in React. Please file an issue.',
      //     );
      //   }
      //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
      //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);
      //   const oldContext = instance.context;
      //   const oldProps = workInProgress.memoizedProps;
      //   if (
      //     typeof instance.componentWillReceiveProps === 'function' &&
      //     (oldProps !== newProps || oldContext !== newContext)
      //   ) {
      //     callComponentWillReceiveProps(
      //       workInProgress,
      //       instance,
      //       newProps,
      //       newContext,
      //     );
      //   }
      //   // Process the update queue before calling shouldComponentUpdate
      //   const updateQueue = workInProgress.updateQueue;
      //   if (updateQueue !== null) {
      //     newState = processUpdateQueue(
      //       workInProgress,
      //       updateQueue,
      //       instance,
      //       newState,
      //       newProps,
      //       priorityLevel,
      //     );
      //   }
      //   // TODO: Should we deal with a setState that happened after the last
      //   // componentWillMount and before this componentWillMount? Probably
      //   // unsupported anyway.
      //   if (
      //     !checkShouldComponentUpdate(
      //       workInProgress,
      //       workInProgress.memoizedProps,
      //       newProps,
      //       workInProgress.memoizedState,
      //       newState,
      //       newContext,
      //     )
      //   ) {
      //     // Update the existing instance's state, props, and context pointers even
      //     // though we're bailing out.
      //     instance.props = newProps;
      //     instance.state = newState;
      //     instance.context = newContext;
      //     return false;
      //   }
      //   // Update the input pointers now so that they are correct when we call
      //   // componentWillMount
      //   instance.props = newProps;
      //   instance.state = newState;
      //   instance.context = newContext;
      //   if (typeof instance.componentWillMount === 'function') {
      //     callComponentWillMount(workInProgress, instance);
      //     // componentWillMount may have called setState. Process the update queue.
      //     const newUpdateQueue = workInProgress.updateQueue;
      //     if (newUpdateQueue !== null) {
      //       newState = processUpdateQueue(
      //         workInProgress,
      //         newUpdateQueue,
      //         instance,
      //         newState,
      //         newProps,
      //         priorityLevel,
      //       );
      //     }
      //   }
      //   if (typeof instance.componentDidMount === 'function') {
      //     workInProgress.effectTag |= Update;
      //   }
      //   instance.state = newState;
      //   return true;
      // }
      // Invokes the update life-cycles and returns false if it shouldn't rerender.


      function updateClassInstance(current, workInProgress, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        resetInputPointers(workInProgress, instance);
        var oldProps = workInProgress.memoizedProps;
        var newProps = workInProgress.pendingProps;

        if (!newProps) {
          // If there aren't any new props, then we'll reuse the memoized props.
          // This could be from already completed work.
          newProps = oldProps;
          !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        }

        var oldContext = instance.context;
        var newUnmaskedContext = getUnmaskedContext(workInProgress);
        var newContext = getMaskedContext(workInProgress, newUnmaskedContext); // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.

        if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
        } // Compute the next state using the memoized state and the update queue.


        var oldState = workInProgress.memoizedState; // TODO: Previous state can be null.

        var newState = void 0;

        if (workInProgress.updateQueue !== null) {
          newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
        } else {
          newState = oldState;
        }

        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          }

          return false;
        }

        var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

        if (shouldUpdate) {
          if (typeof instance.componentWillUpdate === 'function') {
            startPhaseTimer(workInProgress, 'componentWillUpdate');
            instance.componentWillUpdate(newProps, newState, newContext);
            stopPhaseTimer(); // Simulate an async bailout/interruption by invoking lifecycle twice.

            if (debugRenderPhaseSideEffects) {
              instance.componentWillUpdate(newProps, newState, newContext);
            }
          }

          if (typeof instance.componentDidUpdate === 'function') {
            workInProgress.effectTag |= Update;
          }
        } else {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update;
            }
          } // If shouldComponentUpdate returned false, we should still update the
          // memoized props/state to indicate that this work can be reused.


          memoizeProps(workInProgress, newProps);
          memoizeState(workInProgress, newState);
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.


        instance.props = newProps;
        instance.state = newState;
        instance.context = newContext;
        return shouldUpdate;
      }

      return {
        adoptClassInstance: adoptClassInstance,
        constructClassInstance: constructClassInstance,
        mountClassInstance: mountClassInstance,
        // resumeMountClassInstance,
        updateClassInstance: updateClassInstance
      };
    }; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.


    var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
    var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
    var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable === 'undefined') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
    {
      var didWarnAboutMaps = false;
      /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */

      var ownerHasKeyUseWarning = {};
      var ownerHasFunctionTypeWarning = {};

      var warnForMissingKey = function warnForMissingKey(child) {
        if (child === null || typeof child !== 'object') {
          return;
        }

        if (!child._store || child._store.validated || child.key != null) {
          return;
        }

        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        child._store.validated = true;
        var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$1() || '');

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        warning(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$1());
      };
    }
    var isArray$1 = Array.isArray;

    function coerceRef(current, element) {
      var mixedRef = element.ref;

      if (mixedRef !== null && typeof mixedRef !== 'function') {
        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;

          if (owner) {
            var ownerFiber = owner;
            !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
            inst = ownerFiber.stateNode;
          }

          !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

          if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
            return current.ref;
          }

          var ref = function ref(value) {
            var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;

            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };

          ref._stringRef = stringRef;
          return ref;
        } else {
          !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
          !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
        }
      }

      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$1() || '');
        }
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
      }
    }

    function warnOnFunctionType() {
      var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$1() || '');

      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
      warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$1() || '');
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.


    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        } // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.


        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }

        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        } // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.


        var childToDelete = currentFirstChild;

        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        var existingChildren = new Map();
        var existingChild = currentFirstChild;

        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }

          existingChild = existingChild.sibling;
        }

        return existingChildren;
      }

      function useFiber(fiber, pendingProps, expirationTime) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;

        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }

        var current = newFiber.alternate;

        if (current !== null) {
          var oldIndex = current.index;

          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement;
        }

        return newFiber;
      }

      function updateTextNode(returnFiber, current, textContent, expirationTime) {
        if (current === null || current.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
          created['return'] = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, textContent, expirationTime);
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current, element, expirationTime) {
        if (current !== null && current.type === element.type) {
          // Move based on index
          var existing = useFiber(current, element.props, expirationTime);
          existing.ref = coerceRef(current, element);
          existing['return'] = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          // Insert
          var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
          created.ref = coerceRef(current, element);
          created['return'] = returnFiber;
          return created;
        }
      }

      function updateCall(returnFiber, current, call, expirationTime) {
        // TODO: Should this also compare handler to determine whether to reuse?
        if (current === null || current.tag !== CallComponent) {
          // Insert
          var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
          created['return'] = returnFiber;
          return created;
        } else {
          // Move based on index
          var existing = useFiber(current, call, expirationTime);
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updateReturn(returnFiber, current, returnNode, expirationTime) {
        if (current === null || current.tag !== ReturnComponent) {
          // Insert
          var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
          created.type = returnNode.value;
          created['return'] = returnFiber;
          return created;
        } else {
          // Move based on index
          var existing = useFiber(current, null, expirationTime);
          existing.type = returnNode.value;
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updatePortal(returnFiber, current, portal, expirationTime) {
        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
          created['return'] = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, portal.children || [], expirationTime);
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current, fragment, expirationTime, key) {
        if (current === null || current.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
          created['return'] = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, fragment, expirationTime);
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.internalContextTag, expirationTime);
          created['return'] = returnFiber;
          return created;
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);

                  _created['return'] = returnFiber;
                  return _created;
                } else {
                  var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);

                  _created2.ref = coerceRef(null, newChild);
                  _created2['return'] = returnFiber;
                  return _created2;
                }
              }

            case REACT_CALL_TYPE:
              {
                var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);

                _created3['return'] = returnFiber;
                return _created3;
              }

            case REACT_RETURN_TYPE:
              {
                var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);

                _created4.type = newChild.value;
                _created4['return'] = returnFiber;
                return _created4;
              }

            case REACT_PORTAL_TYPE:
              {
                var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);

                _created5['return'] = returnFiber;
                return _created5;
              }
          }

          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);

            _created6['return'] = returnFiber;
            return _created6;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
        // Update the fiber if the keys match, otherwise return null.
        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }

          return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }

                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_CALL_TYPE:
              {
                if (newChild.key === key) {
                  return updateCall(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_RETURN_TYPE:
              {
                // Returns don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a
                // yield.
                if (key === null) {
                  return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
          }

          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }

            return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }

                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }

            case REACT_CALL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
              }

            case REACT_RETURN_TYPE:
              {
                // Returns don't have keys, so we neither have to check the old nor
                // new node for the key. If both are returns, they match.
                var _matchedFiber3 = existingChildren.get(newIdx) || null;

                return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
              }

            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
              }
          }

          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber5 = existingChildren.get(newIdx) || null;

            return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }
      /**
       * Warns if there is a duplicate or missing key
       */


      function warnOnInvalidKey(child, knownKeys) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }

          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_CALL_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;

              if (typeof key !== 'string') {
                break;
              }

              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }

              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }

              warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$1());
              break;

            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
        // This algorithm can't optimize by searching from boths ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.
        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.
        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.
        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.
        {
          // First, validate keys.
          var knownKeys = null;

          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

            if (!_newFiber) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }

            previousNewFiber = _newFiber;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

          if (_newFiber2) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }

            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.
        var iteratorFn = getIteratorFn(newChildrenIterable);
        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        {
          // Warn about using Maps as children
          if (typeof newChildrenIterable.entries === 'function') {
            var possibleMap = newChildrenIterable;

            if (possibleMap.entries === iteratorFn) {
              warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$1());
              didWarnAboutMaps = true;
            }
          } // First, validate keys.
          // We'll get a different iterator later for the main pass.


          var _newChildren = iteratorFn.call(newChildrenIterable);

          if (_newChildren) {
            var knownKeys = null;

            var _step = _newChildren.next();

            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();

        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (!oldFiber) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

            if (_newFiber3 === null) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }

            previousNewFiber = _newFiber3;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }

            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent, expirationTime);
          existing['return'] = returnFiber;
          return existing;
        } // The existing first child is not a text node so we need to create one
        // and delete the existing ones.


        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
        created['return'] = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
        var key = element.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
              existing.ref = coerceRef(child, element);
              existing['return'] = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
          created['return'] = returnFiber;
          return created;
        } else {
          var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);

          _created7.ref = coerceRef(currentFirstChild, element);
          _created7['return'] = returnFiber;
          return _created7;
        }
      }

      function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
        var key = call.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === CallComponent) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, call, expirationTime);
              existing['return'] = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
        created['return'] = returnFiber;
        return created;
      }

      function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
        // There's no need to check for keys on yields since they're stateless.
        var child = currentFirstChild;

        if (child !== null) {
          if (child.tag === ReturnComponent) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, null, expirationTime);
            existing.type = returnNode.value;
            existing['return'] = returnFiber;
            return existing;
          } else {
            deleteRemainingChildren(returnFiber, child);
          }
        }

        var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
        created.type = returnNode.value;
        created['return'] = returnFiber;
        return created;
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
        var key = portal.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || [], expirationTime);
              existing['return'] = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
        created['return'] = returnFiber;
        return created;
      } // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.


      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.
        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        if (typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
          newChild = newChild.props.children;
        } // Handle object types


        var isObject = typeof newChild === 'object' && newChild !== null;

        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_CALL_TYPE:
              return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_RETURN_TYPE:
              return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
          }
        }

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
        }

        if (isArray$1(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        if (typeof newChild === 'undefined') {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;

                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            // Intentionally fall through to the next case, which handles both
            // functions and classes
            // eslint-disable-next-lined no-fallthrough

            case FunctionalComponent:
              {
                var Component = returnFiber.type;
                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
              }
          }
        } // Remaining cases are all treated as empty.


        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);

    function cloneChildFibers(current, workInProgress) {
      !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      workInProgress.child = newChild;
      newChild['return'] = workInProgress;

      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        newChild['return'] = workInProgress;
      }

      newChild.sibling = null;
    }

    {
      var warnedAboutStatelessRefs = {};
    }

    var ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
      var shouldSetTextContent = config.shouldSetTextContent,
          useSyncScheduling = config.useSyncScheduling,
          shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
      var pushHostContext = hostContext.pushHostContext,
          pushHostContainer = hostContext.pushHostContainer;
      var enterHydrationState = hydrationContext.enterHydrationState,
          resetHydrationState = hydrationContext.resetHydrationState,
          tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

      var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
          adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
          constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
          mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
          updateClassInstance = _ReactFiberClassCompo.updateClassInstance; // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.


      function reconcileChildren(current, workInProgress, nextChildren) {
        reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
      }

      function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
        if (current === null) {
          // If this is a fresh new component that hasn't been rendered yet, we
          // won't update its child set by applying minimal side-effects. Instead,
          // we will add them all to the child before it gets rendered. That means
          // we can optimize this reconciliation pass by not tracking side-effects.
          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        } else {
          // If the current child is the same as the work in progress, it means that
          // we haven't yet started any work on these children. Therefore, we use
          // the clone algorithm to create a copy of all the current children.
          // If we had any progressed work already, that is invalid at this point so
          // let's throw it out.
          workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
        }
      }

      function updateFragment(current, workInProgress) {
        var nextChildren = workInProgress.pendingProps;

        if (hasContextChanged()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextChildren === null) {
            nextChildren = workInProgress.memoizedProps;
          }
        } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        reconcileChildren(current, workInProgress, nextChildren);
        memoizeProps(workInProgress, nextChildren);
        return workInProgress.child;
      }

      function markRef(current, workInProgress) {
        var ref = workInProgress.ref;

        if (ref !== null && (!current || current.ref !== ref)) {
          // Schedule a Ref effect
          workInProgress.effectTag |= Ref;
        }
      }

      function updateFunctionalComponent(current, workInProgress) {
        var fn = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var memoizedProps = workInProgress.memoizedProps;

        if (hasContextChanged()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextProps === null) {
            nextProps = memoizedProps;
          }
        } else {
          if (nextProps === null || memoizedProps === nextProps) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          } // TODO: consider bringing fn.shouldComponentUpdate() back.
          // It used to be here.

        }

        var unmaskedContext = getUnmaskedContext(workInProgress);
        var context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        {
          ReactCurrentOwner.current = workInProgress;
          ReactDebugCurrentFiber.setCurrentPhase('render');
          nextChildren = fn(nextProps, context);
          ReactDebugCurrentFiber.setCurrentPhase(null);
        } // React DevTools reads this flag.

        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren);
        memoizeProps(workInProgress, nextProps);
        return workInProgress.child;
      }

      function updateClassComponent(current, workInProgress, renderExpirationTime) {
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = pushContextProvider(workInProgress);
        var shouldUpdate = void 0;

        if (current === null) {
          if (!workInProgress.stateNode) {
            // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, workInProgress.pendingProps);
            mountClassInstance(workInProgress, renderExpirationTime);
            shouldUpdate = true;
          } else {
            invariant(false, 'Resuming work not yet implemented.'); // In a resume, we'll already have an instance we can reuse.
            // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
          }
        } else {
          shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
        }

        return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
      }

      function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);

        if (!shouldUpdate) {
          // Context providers should defer to sCU for rendering
          if (hasContext) {
            invalidateContextProvider(workInProgress, false);
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        var instance = workInProgress.stateNode; // Rerender

        ReactCurrentOwner.current = workInProgress;
        var nextChildren = void 0;
        {
          ReactDebugCurrentFiber.setCurrentPhase('render');
          nextChildren = instance.render();

          if (debugRenderPhaseSideEffects) {
            instance.render();
          }

          ReactDebugCurrentFiber.setCurrentPhase(null);
        } // React DevTools reads this flag.

        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren); // Memoize props and state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.

        memoizeState(workInProgress, instance.state);
        memoizeProps(workInProgress, instance.props); // The context might have changed so we need to recalculate it.

        if (hasContext) {
          invalidateContextProvider(workInProgress, true);
        }

        return workInProgress.child;
      }

      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;

        if (root.pendingContext) {
          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          // Should always be set
          pushTopLevelContextObject(workInProgress, root.context, false);
        }

        pushHostContainer(workInProgress, root.containerInfo);
      }

      function updateHostRoot(current, workInProgress, renderExpirationTime) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;

        if (updateQueue !== null) {
          var prevState = workInProgress.memoizedState;
          var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);

          if (prevState === state) {
            // If the state is the same as before, that's a bailout because we had
            // no work that expires at this time.
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var element = state.element;
          var root = workInProgress.stateNode;

          if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
            // If we don't have any current children this might be the first pass.
            // We always try to hydrate. If this isn't a hydration pass there won't
            // be any children to hydrate which is effectively the same thing as
            // not hydrating.
            // This is a bit of a hack. We track the host root as a placement to
            // know that we're currently in a mounting state. That way isMounted
            // works as expected. We must reset this before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag |= Placement; // Ensure that children mount into this root without tracking
            // side-effects. This ensures that we don't store Placement effects on
            // nodes that will be hydrated.

            workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
          } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            resetHydrationState();
            reconcileChildren(current, workInProgress, element);
          }

          memoizeState(workInProgress, state);
          return workInProgress.child;
        }

        resetHydrationState(); // If there is no update queue, that's a bailout because the root has no props.

        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }

      function updateHostComponent(current, workInProgress, renderExpirationTime) {
        pushHostContext(workInProgress);

        if (current === null) {
          tryToClaimNextHydratableInstance(workInProgress);
        }

        var type = workInProgress.type;
        var memoizedProps = workInProgress.memoizedProps;
        var nextProps = workInProgress.pendingProps;

        if (nextProps === null) {
          nextProps = memoizedProps;
          !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        }

        var prevProps = current !== null ? current.memoizedProps : null;

        if (hasContextChanged()) {// Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
        } else if (nextProps === null || memoizedProps === nextProps) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);

        if (isDirectTextChild) {
          // We special case a direct text child of a host node. This is a common
          // case. We won't handle it as a reified child. We will instead handle
          // this in the host environment that also have access to this prop. That
          // avoids allocating another HostText fiber and traversing it.
          nextChildren = null;
        } else if (prevProps && shouldSetTextContent(type, prevProps)) {
          // If we're switching from a direct text child to a normal child, or to
          // empty, we need to schedule the text content to be reset.
          workInProgress.effectTag |= ContentReset;
        }

        markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

        if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
          // Down-prioritize the children.
          workInProgress.expirationTime = Never; // Bailout and come back to this fiber later.

          return null;
        }

        reconcileChildren(current, workInProgress, nextChildren);
        memoizeProps(workInProgress, nextProps);
        return workInProgress.child;
      }

      function updateHostText(current, workInProgress) {
        if (current === null) {
          tryToClaimNextHydratableInstance(workInProgress);
        }

        var nextProps = workInProgress.pendingProps;

        if (nextProps === null) {
          nextProps = workInProgress.memoizedProps;
        }

        memoizeProps(workInProgress, nextProps); // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.

        return null;
      }

      function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
        !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var fn = workInProgress.type;
        var props = workInProgress.pendingProps;
        var unmaskedContext = getUnmaskedContext(workInProgress);
        var context = getMaskedContext(workInProgress, unmaskedContext);
        var value;
        {
          if (fn.prototype && typeof fn.prototype.render === 'function') {
            var componentName = getComponentName(workInProgress);
            warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
          }

          ReactCurrentOwner.current = workInProgress;
          value = fn(props, context);
        } // React DevTools reads this flag.

        workInProgress.effectTag |= PerformedWork;

        if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
          // Proceed under the assumption that this is a class instance
          workInProgress.tag = ClassComponent; // Push context providers early to prevent context stack mismatches.
          // During mounting we don't know the child context yet as the instance doesn't exist.
          // We will invalidate the child context in finishClassComponent() right after rendering.

          var hasContext = pushContextProvider(workInProgress);
          adoptClassInstance(workInProgress, value);
          mountClassInstance(workInProgress, renderExpirationTime);
          return finishClassComponent(current, workInProgress, true, hasContext);
        } else {
          // Proceed under the assumption that this is a functional component
          workInProgress.tag = FunctionalComponent;
          {
            var Component = workInProgress.type;

            if (Component) {
              warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
            }

            if (workInProgress.ref !== null) {
              var info = '';
              var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();

              if (ownerName) {
                info += '\n\nCheck the render method of `' + ownerName + '`.';
              }

              var warningKey = ownerName || workInProgress._debugID || '';
              var debugSource = workInProgress._debugSource;

              if (debugSource) {
                warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
              }

              if (!warnedAboutStatelessRefs[warningKey]) {
                warnedAboutStatelessRefs[warningKey] = true;
                warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
              }
            }
          }
          reconcileChildren(current, workInProgress, value);
          memoizeProps(workInProgress, props);
          return workInProgress.child;
        }
      }

      function updateCallComponent(current, workInProgress, renderExpirationTime) {
        var nextCall = workInProgress.pendingProps;

        if (hasContextChanged()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextCall === null) {
            nextCall = current && current.memoizedProps;
            !(nextCall !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          }
        } else if (nextCall === null || workInProgress.memoizedProps === nextCall) {
          nextCall = workInProgress.memoizedProps; // TODO: When bailing out, we might need to return the stateNode instead
          // of the child. To check it for work.
          // return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        var nextChildren = nextCall.children; // The following is a fork of reconcileChildrenAtExpirationTime but using
        // stateNode to store the child.

        if (current === null) {
          workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
        } else {
          workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
        }

        memoizeProps(workInProgress, nextCall); // This doesn't take arbitrary time so we could synchronously just begin
        // eagerly do the work of workInProgress.child as an optimization.

        return workInProgress.stateNode;
      }

      function updatePortalComponent(current, workInProgress, renderExpirationTime) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;

        if (hasContextChanged()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextChildren === null) {
            nextChildren = current && current.memoizedProps;
            !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          }
        } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        if (current === null) {
          // Portals are special because we don't append the children during mount
          // but at commit. Therefore we need to track insertions which the normal
          // flow doesn't do during mount. This doesn't happen at the root because
          // the root always starts with a "current" with a null child.
          // TODO: Consider unifying this with how the root works.
          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          memoizeProps(workInProgress, nextChildren);
        } else {
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
        }

        return workInProgress.child;
      }
      /*
      function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
        let child = firstChild;
        do {
          // Ensure that the first and last effect of the parent corresponds
          // to the children's first and last effect.
          if (!returnFiber.firstEffect) {
            returnFiber.firstEffect = child.firstEffect;
          }
          if (child.lastEffect) {
            if (returnFiber.lastEffect) {
              returnFiber.lastEffect.nextEffect = child.firstEffect;
            }
            returnFiber.lastEffect = child.lastEffect;
          }
        } while (child = child.sibling);
      }
      */


      function bailoutOnAlreadyFinishedWork(current, workInProgress) {
        cancelWorkTimer(workInProgress); // TODO: We should ideally be able to bail out early if the children have no
        // more work to do. However, since we don't have a separation of this
        // Fiber's priority and its children yet - we don't know without doing lots
        // of the same work we do anyway. Once we have that separation we can just
        // bail out here if the children has no more work at this priority level.
        // if (workInProgress.priorityOfChildren <= priorityLevel) {
        //   // If there are side-effects in these children that have not yet been
        //   // committed we need to ensure that they get properly transferred up.
        //   if (current && current.child !== workInProgress.child) {
        //     reuseChildrenEffects(workInProgress, child);
        //   }
        //   return null;
        // }

        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
      }

      function bailoutOnLowPriority(current, workInProgress) {
        cancelWorkTimer(workInProgress); // TODO: Handle HostComponent tags here as well and call pushHostContext()?
        // See PR 8590 discussion for context

        switch (workInProgress.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress);
            break;

          case ClassComponent:
            pushContextProvider(workInProgress);
            break;

          case HostPortal:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;
        } // TODO: What if this is currently in progress?
        // How can that happen? How is this not being cloned?


        return null;
      } // TODO: Delete memoizeProps/State and move to reconcile/bailout instead


      function memoizeProps(workInProgress, nextProps) {
        workInProgress.memoizedProps = nextProps;
      }

      function memoizeState(workInProgress, nextState) {
        workInProgress.memoizedState = nextState; // Don't reset the updateQueue, in case there are pending updates. Resetting
        // is handled by processUpdateQueue.
      }

      function beginWork(current, workInProgress, renderExpirationTime) {
        if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
          return bailoutOnLowPriority(current, workInProgress);
        }

        switch (workInProgress.tag) {
          case IndeterminateComponent:
            return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);

          case FunctionalComponent:
            return updateFunctionalComponent(current, workInProgress);

          case ClassComponent:
            return updateClassComponent(current, workInProgress, renderExpirationTime);

          case HostRoot:
            return updateHostRoot(current, workInProgress, renderExpirationTime);

          case HostComponent:
            return updateHostComponent(current, workInProgress, renderExpirationTime);

          case HostText:
            return updateHostText(current, workInProgress);

          case CallHandlerPhase:
            // This is a restart. Reset the tag to the initial phase.
            workInProgress.tag = CallComponent;
          // Intentionally fall through since this is now the same.

          case CallComponent:
            return updateCallComponent(current, workInProgress, renderExpirationTime);

          case ReturnComponent:
            // A return component is just a placeholder, we can just run through the
            // next one immediately.
            return null;

          case HostPortal:
            return updatePortalComponent(current, workInProgress, renderExpirationTime);

          case Fragment:
            return updateFragment(current, workInProgress);

          default:
            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
        }
      }

      function beginFailedWork(current, workInProgress, renderExpirationTime) {
        // Push context providers here to avoid a push/pop context mismatch.
        switch (workInProgress.tag) {
          case ClassComponent:
            pushContextProvider(workInProgress);
            break;

          case HostRoot:
            pushHostRootContext(workInProgress);
            break;

          default:
            invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
        } // Add an error effect so we can handle the error during the commit phase


        workInProgress.effectTag |= Err; // This is a weird case where we do "resume" work — work that failed on
        // our first attempt. Because we no longer have a notion of "progressed
        // deletions," reset the child to the current child to make sure we delete
        // it again. TODO: Find a better way to handle this, perhaps during a more
        // general overhaul of error handling.

        if (current === null) {
          workInProgress.child = null;
        } else if (workInProgress.child !== current.child) {
          workInProgress.child = current.child;
        }

        if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
          return bailoutOnLowPriority(current, workInProgress);
        } // If we don't bail out, we're going be recomputing our children so we need
        // to drop our effect list.


        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null; // Unmount the current children as if the component rendered null

        var nextChildren = null;
        reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);

        if (workInProgress.tag === ClassComponent) {
          var instance = workInProgress.stateNode;
          workInProgress.memoizedProps = instance.props;
          workInProgress.memoizedState = instance.state;
        }

        return workInProgress.child;
      }

      return {
        beginWork: beginWork,
        beginFailedWork: beginFailedWork
      };
    };

    var ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
      var createInstance = config.createInstance,
          createTextInstance = config.createTextInstance,
          appendInitialChild = config.appendInitialChild,
          finalizeInitialChildren = config.finalizeInitialChildren,
          prepareUpdate = config.prepareUpdate,
          mutation = config.mutation,
          persistence = config.persistence;
      var getRootHostContainer = hostContext.getRootHostContainer,
          popHostContext = hostContext.popHostContext,
          getHostContext = hostContext.getHostContext,
          popHostContainer = hostContext.popHostContainer;
      var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
          prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
          popHydrationState = hydrationContext.popHydrationState;

      function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // an UpdateAndPlacement.
        workInProgress.effectTag |= Update;
      }

      function markRef(workInProgress) {
        workInProgress.effectTag |= Ref;
      }

      function appendAllReturns(returns, workInProgress) {
        var node = workInProgress.stateNode;

        if (node) {
          node['return'] = workInProgress;
        }

        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
            invariant(false, 'A call cannot have host component children.');
          } else if (node.tag === ReturnComponent) {
            returns.push(node.type);
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }

          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === workInProgress) {
              return;
            }

            node = node['return'];
          }

          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
        var call = workInProgress.memoizedProps;
        !call ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0; // First step of the call has completed. Now we need to do the second.
        // TODO: It would be nice to have a multi stage call represented by a
        // single component, or at least tail call optimize nested ones. Currently
        // that requires additional fields that we don't want to add to the fiber.
        // So this requires nested handlers.
        // Note: This doesn't mutate the alternate node. I don't think it needs to
        // since this stage is reset for every pass.

        workInProgress.tag = CallHandlerPhase; // Build up the returns.
        // TODO: Compare this to a generator or opaque helpers like Children.

        var returns = [];
        appendAllReturns(returns, workInProgress);
        var fn = call.handler;
        var props = call.props;
        var nextChildren = fn(props, returns);
        var currentFirstChild = current !== null ? current.child : null;
        workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }

      function appendAllChildren(parent, workInProgress) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === workInProgress) {
              return;
            }

            node = node['return'];
          }

          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      var updateHostContainer = void 0;
      var updateHostComponent = void 0;
      var updateHostText = void 0;

      if (mutation) {
        if (enableMutatingReconciler) {
          // Mutation mode
          updateHostContainer = function updateHostContainer(workInProgress) {// Noop
          };

          updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
            // TODO: Type this specific to this type of component.
            workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
            // is a new ref we mark this as an update. All the work is done in commitWork.

            if (updatePayload) {
              markUpdate(workInProgress);
            }
          };

          updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
            // If the text differs, mark it as an update. All the work in done in commitWork.
            if (oldText !== newText) {
              markUpdate(workInProgress);
            }
          };
        } else {
          invariant(false, 'Mutating reconciler is disabled.');
        }
      } else if (persistence) {
        if (enablePersistentReconciler) {
          // Persistent host tree mode
          var cloneInstance = persistence.cloneInstance,
              createContainerChildSet = persistence.createContainerChildSet,
              appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
              finalizeContainerChildren = persistence.finalizeContainerChildren; // An unfortunate fork of appendAllChildren because we have two different parent types.

          var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;

            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendChildToContainerChildSet(containerChildSet, node.stateNode);
              } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
                // down its children. Instead, we'll get insertions from each child in
                // the portal directly.
              } else if (node.child !== null) {
                node.child['return'] = node;
                node = node.child;
                continue;
              }

              if (node === workInProgress) {
                return;
              }

              while (node.sibling === null) {
                if (node['return'] === null || node['return'] === workInProgress) {
                  return;
                }

                node = node['return'];
              }

              node.sibling['return'] = node['return'];
              node = node.sibling;
            }
          };

          updateHostContainer = function updateHostContainer(workInProgress) {
            var portalOrRoot = workInProgress.stateNode;
            var childrenUnchanged = workInProgress.firstEffect === null;

            if (childrenUnchanged) {// No changes, just reuse the existing instance.
            } else {
              var container = portalOrRoot.containerInfo;
              var newChildSet = createContainerChildSet(container);

              if (finalizeContainerChildren(container, newChildSet)) {
                markUpdate(workInProgress);
              }

              portalOrRoot.pendingChildren = newChildSet; // If children might have changed, we have to add them all to the set.

              appendAllChildrenToContainer(newChildSet, workInProgress); // Schedule an update on the container to swap out the container.

              markUpdate(workInProgress);
            }
          };

          updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
            // If there are no effects associated with this node, then none of our children had any updates.
            // This guarantees that we can reuse all of them.
            var childrenUnchanged = workInProgress.firstEffect === null;
            var currentInstance = current.stateNode;

            if (childrenUnchanged && updatePayload === null) {
              // No changes, just reuse the existing instance.
              // Note that this might release a previous clone.
              workInProgress.stateNode = currentInstance;
            } else {
              var recyclableInstance = workInProgress.stateNode;
              var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

              if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress);
              }

              workInProgress.stateNode = newInstance;

              if (childrenUnchanged) {
                // If there are no other effects in this tree, we need to flag this node as having one.
                // Even though we're not going to use it for anything.
                // Otherwise parents won't know that there are new children to propagate upwards.
                markUpdate(workInProgress);
              } else {
                // If children might have changed, we have to add them all to the set.
                appendAllChildren(newInstance, workInProgress);
              }
            }
          };

          updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
            if (oldText !== newText) {
              // If the text content differs, we'll create a new text instance for it.
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();
              workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
              // This lets the parents know that at least one of their children has changed.

              markUpdate(workInProgress);
            }
          };
        } else {
          invariant(false, 'Persistent reconciler is disabled.');
        }
      } else {
        if (enableNoopReconciler) {
          // No host operations
          updateHostContainer = function updateHostContainer(workInProgress) {// Noop
          };

          updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {// Noop
          };

          updateHostText = function updateHostText(current, workInProgress, oldText, newText) {// Noop
          };
        } else {
          invariant(false, 'Noop reconciler is disabled.');
        }
      }

      function completeWork(current, workInProgress, renderExpirationTime) {
        // Get the latest props.
        var newProps = workInProgress.pendingProps;

        if (newProps === null) {
          newProps = workInProgress.memoizedProps;
        } else if (workInProgress.expirationTime !== Never || renderExpirationTime === Never) {
          // Reset the pending props, unless this was a down-prioritization.
          workInProgress.pendingProps = null;
        }

        switch (workInProgress.tag) {
          case FunctionalComponent:
            return null;

          case ClassComponent:
            {
              // We are leaving this subtree, so pop context if any.
              popContextProvider(workInProgress);
              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              var fiberRoot = workInProgress.stateNode;

              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }

              if (current === null || current.child === null) {
                // If we hydrated, pop so that we can delete any remaining children
                // that weren't hydrated.
                popHydrationState(workInProgress); // This resets the hacky state to fix isMounted before committing.
                // TODO: Delete this when we delete isMounted and findDOMNode.

                workInProgress.effectTag &= ~Placement;
              }

              updateHostContainer(workInProgress);
              return null;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress.type;

              if (current !== null && workInProgress.stateNode != null) {
                // If we have an alternate, that means this is an update and we need to
                // schedule a side-effect to do the updates.
                var oldProps = current.memoizedProps; // If we get updated because one of our children updated, we don't
                // have newProps so we'll have to reuse them.
                // TODO: Split the update API as separate for the props vs. children.
                // Even better would be if children weren't special cased at all tho.

                var instance = workInProgress.stateNode;
                var currentHostContext = getHostContext();
                var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);

                if (current.ref !== workInProgress.ref) {
                  markRef(workInProgress);
                }
              } else {
                if (!newProps) {
                  !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.

                  return null;
                }

                var _currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                // "stack" as the parent. Then append children as we go in beginWork
                // or completeWork depending on we want to add then top->down or
                // bottom->up. Top->down is faster in IE11.


                var wasHydrated = popHydrationState(workInProgress);

                if (wasHydrated) {
                  // TODO: Move this and createInstance step into the beginPhase
                  // to consolidate.
                  if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                    // If changes to the hydrated node needs to be applied at the
                    // commit-phase we mark this as such.
                    markUpdate(workInProgress);
                  }
                } else {
                  var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

                  appendAllChildren(_instance, workInProgress); // Certain renderers require commit-time effects for initial mount.
                  // (eg DOM renderer supports auto-focus for certain elements).
                  // Make sure such renderers get scheduled for later work.

                  if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress);
                  }

                  workInProgress.stateNode = _instance;
                }

                if (workInProgress.ref !== null) {
                  // If there is a ref on a host node we need to schedule a callback
                  markRef(workInProgress);
                }
              }

              return null;
            }

          case HostText:
            {
              var newText = newProps;

              if (current && workInProgress.stateNode != null) {
                var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                // to schedule a side-effect to do the updates.

                updateHostText(current, workInProgress, oldText, newText);
              } else {
                if (typeof newText !== 'string') {
                  !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.

                  return null;
                }

                var _rootContainerInstance = getRootHostContainer();

                var _currentHostContext2 = getHostContext();

                var _wasHydrated = popHydrationState(workInProgress);

                if (_wasHydrated) {
                  if (prepareToHydrateHostTextInstance(workInProgress)) {
                    markUpdate(workInProgress);
                  }
                } else {
                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                }
              }

              return null;
            }

          case CallComponent:
            return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);

          case CallHandlerPhase:
            // Reset the tag to now be a first phase call.
            workInProgress.tag = CallComponent;
            return null;

          case ReturnComponent:
            // Does nothing.
            return null;

          case Fragment:
            return null;

          case HostPortal:
            popHostContainer(workInProgress);
            updateHostContainer(workInProgress);
            return null;
          // Error cases

          case IndeterminateComponent:
            invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
          // eslint-disable-next-line no-fallthrough

          default:
            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
        }
      }

      return {
        completeWork: completeWork
      };
    };

    var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
    var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
    var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;

    var ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError) {
      var getPublicInstance = config.getPublicInstance,
          mutation = config.mutation,
          persistence = config.persistence;

      var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
        startPhaseTimer(current, 'componentWillUnmount');
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        instance.componentWillUnmount();
        stopPhaseTimer();
      }; // Capture errors so they don't interrupt unmounting.


      function safelyCallComponentWillUnmount(current, instance) {
        {
          invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);

          if (hasCaughtError$1()) {
            var unmountError = clearCaughtError$1();
            captureError(current, unmountError);
          }
        }
      }

      function safelyDetachRef(current) {
        var ref = current.ref;

        if (ref !== null) {
          {
            invokeGuardedCallback$2(null, ref, null, null);

            if (hasCaughtError$1()) {
              var refError = clearCaughtError$1();
              captureError(current, refError);
            }
          }
        }
      }

      function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent:
            {
              var instance = finishedWork.stateNode;

              if (finishedWork.effectTag & Update) {
                if (current === null) {
                  startPhaseTimer(finishedWork, 'componentDidMount');
                  instance.props = finishedWork.memoizedProps;
                  instance.state = finishedWork.memoizedState;
                  instance.componentDidMount();
                  stopPhaseTimer();
                } else {
                  var prevProps = current.memoizedProps;
                  var prevState = current.memoizedState;
                  startPhaseTimer(finishedWork, 'componentDidUpdate');
                  instance.props = finishedWork.memoizedProps;
                  instance.state = finishedWork.memoizedState;
                  instance.componentDidUpdate(prevProps, prevState);
                  stopPhaseTimer();
                }
              }

              var updateQueue = finishedWork.updateQueue;

              if (updateQueue !== null) {
                commitCallbacks(updateQueue, instance);
              }

              return;
            }

          case HostRoot:
            {
              var _updateQueue = finishedWork.updateQueue;

              if (_updateQueue !== null) {
                var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;

                commitCallbacks(_updateQueue, _instance);
              }

              return;
            }

          case HostComponent:
            {
              var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
              // (eg DOM renderer may schedule auto-focus for inputs and form controls).
              // These effects should only be committed when components are first mounted,
              // aka when there is no current/alternate.

              if (current === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props, finishedWork);
              }

              return;
            }

          case HostText:
            {
              // We have no life-cycles associated with text.
              return;
            }

          case HostPortal:
            {
              // We have no life-cycles associated with portals.
              return;
            }

          default:
            {
              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
        }
      }

      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (ref !== null) {
          var instance = finishedWork.stateNode;

          switch (finishedWork.tag) {
            case HostComponent:
              ref(getPublicInstance(instance));
              break;

            default:
              ref(instance);
          }
        }
      }

      function commitDetachRef(current) {
        var currentRef = current.ref;

        if (currentRef !== null) {
          currentRef(null);
        }
      } // User-originating errors (lifecycles and refs) should not interrupt
      // deletion, so don't let them throw. Host-originating errors should
      // interrupt deletion, so it's okay


      function commitUnmount(current) {
        if (typeof onCommitUnmount === 'function') {
          onCommitUnmount(current);
        }

        switch (current.tag) {
          case ClassComponent:
            {
              safelyDetachRef(current);
              var instance = current.stateNode;

              if (typeof instance.componentWillUnmount === 'function') {
                safelyCallComponentWillUnmount(current, instance);
              }

              return;
            }

          case HostComponent:
            {
              safelyDetachRef(current);
              return;
            }

          case CallComponent:
            {
              commitNestedUnmounts(current.stateNode);
              return;
            }

          case HostPortal:
            {
              // TODO: this is recursive.
              // We are also not using this parent because
              // the portal will get pushed immediately.
              if (enableMutatingReconciler && mutation) {
                unmountHostComponents(current);
              } else if (enablePersistentReconciler && persistence) {
                emptyPortalContainer(current);
              }

              return;
            }
        }
      }

      function commitNestedUnmounts(root) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        var node = root;

        while (true) {
          commitUnmount(node); // Visit children because they may contain more composite or host nodes.
          // Skip portals because commitUnmount() currently visits them recursively.

          if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
          // If we don't use mutation we drill down into portals here instead.
          !mutation || node.tag !== HostPortal)) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }

          if (node === root) {
            return;
          }

          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === root) {
              return;
            }

            node = node['return'];
          }

          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function detachFiber(current) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        current['return'] = null;
        current.child = null;

        if (current.alternate) {
          current.alternate.child = null;
          current.alternate['return'] = null;
        }
      }

      if (!mutation) {
        var commitContainer = void 0;

        if (persistence) {
          var replaceContainerChildren = persistence.replaceContainerChildren,
              createContainerChildSet = persistence.createContainerChildSet;

          var emptyPortalContainer = function emptyPortalContainer(current) {
            var portal = current.stateNode;
            var containerInfo = portal.containerInfo;
            var emptyChildSet = createContainerChildSet(containerInfo);
            replaceContainerChildren(containerInfo, emptyChildSet);
          };

          commitContainer = function commitContainer(finishedWork) {
            switch (finishedWork.tag) {
              case ClassComponent:
                {
                  return;
                }

              case HostComponent:
                {
                  return;
                }

              case HostText:
                {
                  return;
                }

              case HostRoot:
              case HostPortal:
                {
                  var portalOrRoot = finishedWork.stateNode;
                  var containerInfo = portalOrRoot.containerInfo,
                      _pendingChildren = portalOrRoot.pendingChildren;
                  replaceContainerChildren(containerInfo, _pendingChildren);
                  return;
                }

              default:
                {
                  invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                }
            }
          };
        } else {
          commitContainer = function commitContainer(finishedWork) {// Noop
          };
        }

        if (enablePersistentReconciler || enableNoopReconciler) {
          return {
            commitResetTextContent: function commitResetTextContent(finishedWork) {},
            commitPlacement: function commitPlacement(finishedWork) {},
            commitDeletion: function commitDeletion(current) {
              // Detach refs and call componentWillUnmount() on the whole subtree.
              commitNestedUnmounts(current);
              detachFiber(current);
            },
            commitWork: function commitWork(current, finishedWork) {
              commitContainer(finishedWork);
            },
            commitLifeCycles: commitLifeCycles,
            commitAttachRef: commitAttachRef,
            commitDetachRef: commitDetachRef
          };
        } else if (persistence) {
          invariant(false, 'Persistent reconciler is disabled.');
        } else {
          invariant(false, 'Noop reconciler is disabled.');
        }
      }

      var commitMount = mutation.commitMount,
          commitUpdate = mutation.commitUpdate,
          resetTextContent = mutation.resetTextContent,
          commitTextUpdate = mutation.commitTextUpdate,
          appendChild = mutation.appendChild,
          appendChildToContainer = mutation.appendChildToContainer,
          insertBefore = mutation.insertBefore,
          insertInContainerBefore = mutation.insertInContainerBefore,
          removeChild = mutation.removeChild,
          removeChildFromContainer = mutation.removeChildFromContainer;

      function getHostParentFiber(fiber) {
        var parent = fiber['return'];

        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }

          parent = parent['return'];
        }

        invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
      }

      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }

      function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        var node = fiber;

        siblings: while (true) {
          // If we didn't find anything, let's try the next sibling.
          while (node.sibling === null) {
            if (node['return'] === null || isHostParent(node['return'])) {
              // If we pop out of the root or hit the parent the fiber we are the
              // last sibling.
              return null;
            }

            node = node['return'];
          }

          node.sibling['return'] = node['return'];
          node = node.sibling;

          while (node.tag !== HostComponent && node.tag !== HostText) {
            // If it is not host node and, we might have a host node inside it.
            // Try to search down until we find one.
            if (node.effectTag & Placement) {
              // If we don't have a child, try the siblings instead.
              continue siblings;
            } // If we don't have a child, try the siblings instead.
            // We also skip portals because they are not part of this host tree.


            if (node.child === null || node.tag === HostPortal) {
              continue siblings;
            } else {
              node.child['return'] = node;
              node = node.child;
            }
          } // Check if this host node is stable or about to be placed.


          if (!(node.effectTag & Placement)) {
            // Found it!
            return node.stateNode;
          }
        }
      }

      function commitPlacement(finishedWork) {
        // Recursively insert all host nodes into the parent.
        var parentFiber = getHostParentFiber(finishedWork);
        var parent = void 0;
        var isContainer = void 0;

        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentFiber.stateNode;
            isContainer = false;
            break;

          case HostRoot:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = true;
            break;

          case HostPortal:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = true;
            break;

          default:
            invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
        }

        if (parentFiber.effectTag & ContentReset) {
          // Reset the text content of the parent before doing any insertions
          resetTextContent(parent); // Clear ContentReset from the effect tag

          parentFiber.effectTag &= ~ContentReset;
        }

        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need recurse down its
        // children to find all the terminal nodes.

        var node = finishedWork;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            if (before) {
              if (isContainer) {
                insertInContainerBefore(parent, node.stateNode, before);
              } else {
                insertBefore(parent, node.stateNode, before);
              }
            } else {
              if (isContainer) {
                appendChildToContainer(parent, node.stateNode);
              } else {
                appendChild(parent, node.stateNode);
              }
            }
          } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }

          if (node === finishedWork) {
            return;
          }

          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === finishedWork) {
              return;
            }

            node = node['return'];
          }

          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function unmountHostComponents(current) {
        // We only have the top Fiber that was inserted but we need recurse down its
        var node = current; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.

        var currentParentIsValid = false;
        var currentParent = void 0;
        var currentParentIsContainer = void 0;

        while (true) {
          if (!currentParentIsValid) {
            var parent = node['return'];

            findParent: while (true) {
              !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;

              switch (parent.tag) {
                case HostComponent:
                  currentParent = parent.stateNode;
                  currentParentIsContainer = false;
                  break findParent;

                case HostRoot:
                  currentParent = parent.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;

                case HostPortal:
                  currentParent = parent.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;
              }

              parent = parent['return'];
            }

            currentParentIsValid = true;
          }

          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(node); // After all the children have unmounted, it is now safe to remove the
            // node from the tree.

            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            } // Don't visit children because we already visited them.

          } else if (node.tag === HostPortal) {
            // When we go into a portal, it becomes the parent to remove from.
            // We will reassign it back when we pop the portal on the way up.
            currentParent = node.stateNode.containerInfo; // Visit children because portals might contain host components.

            if (node.child !== null) {
              node.child['return'] = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(node); // Visit children because we may find more host components below.

            if (node.child !== null) {
              node.child['return'] = node;
              node = node.child;
              continue;
            }
          }

          if (node === current) {
            return;
          }

          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === current) {
              return;
            }

            node = node['return'];

            if (node.tag === HostPortal) {
              // When we go out of the portal, we need to restore the parent.
              // Since we don't keep a stack of them, we will search for it.
              currentParentIsValid = false;
            }
          }

          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function commitDeletion(current) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current);
        detachFiber(current);
      }

      function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent:
            {
              return;
            }

          case HostComponent:
            {
              var instance = finishedWork.stateNode;

              if (instance != null) {
                // Commit the work prepared earlier.
                var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.

                var oldProps = current !== null ? current.memoizedProps : newProps;
                var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;

                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
              }

              return;
            }

          case HostText:
            {
              !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldText = current !== null ? current.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }

          case HostRoot:
            {
              return;
            }

          default:
            {
              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
        }
      }

      function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      }

      if (enableMutatingReconciler) {
        return {
          commitResetTextContent: commitResetTextContent,
          commitPlacement: commitPlacement,
          commitDeletion: commitDeletion,
          commitWork: commitWork,
          commitLifeCycles: commitLifeCycles,
          commitAttachRef: commitAttachRef,
          commitDetachRef: commitDetachRef
        };
      } else {
        invariant(false, 'Mutating reconciler is disabled.');
      }
    };

    var NO_CONTEXT = {};

    var ReactFiberHostContext = function ReactFiberHostContext(config) {
      var getChildHostContext = config.getChildHostContext,
          getRootHostContext = config.getRootHostContext;
      var contextStackCursor = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);

      function requiredContext(c) {
        !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        return c;
      }

      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }

      function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.

        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, nextRootContext, fiber);
      }

      function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }

      function getHostContext() {
        var context = requiredContext(contextStackCursor.current);
        return context;
      }

      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor.current);
        var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

        if (context === nextContext) {
          return;
        } // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.


        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, nextContext, fiber);
      }

      function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }

        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
      }

      function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT;
        rootInstanceStackCursor.current = NO_CONTEXT;
      }

      return {
        getHostContext: getHostContext,
        getRootHostContainer: getRootHostContainer,
        popHostContainer: popHostContainer,
        popHostContext: popHostContext,
        pushHostContainer: pushHostContainer,
        pushHostContext: pushHostContext,
        resetHostContainer: resetHostContainer
      };
    };

    var ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
      var shouldSetTextContent = config.shouldSetTextContent,
          hydration = config.hydration; // If this doesn't have hydration mode.

      if (!hydration) {
        return {
          enterHydrationState: function enterHydrationState() {
            return false;
          },
          resetHydrationState: function resetHydrationState() {},
          tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
          prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
            invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
          },
          prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
            invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
          },
          popHydrationState: function popHydrationState(fiber) {
            return false;
          }
        };
      }

      var canHydrateInstance = hydration.canHydrateInstance,
          canHydrateTextInstance = hydration.canHydrateTextInstance,
          getNextHydratableSibling = hydration.getNextHydratableSibling,
          getFirstHydratableChild = hydration.getFirstHydratableChild,
          hydrateInstance = hydration.hydrateInstance,
          hydrateTextInstance = hydration.hydrateTextInstance,
          didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
          didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
          didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
          didNotHydrateInstance = hydration.didNotHydrateInstance,
          didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
          didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
          didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
          didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance; // The deepest Fiber on the stack involved in a hydration context.
      // This may have been an insertion or a hydration.

      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;

      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
      }

      function deleteHydratableInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot:
              didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
              break;

            case HostComponent:
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
              break;
          }
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete['return'] = returnFiber;
        childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.

        if (returnFiber.lastEffect !== null) {
          returnFiber.lastEffect.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
      }

      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement;
        {
          switch (returnFiber.tag) {
            case HostRoot:
              {
                var parentContainer = returnFiber.stateNode.containerInfo;

                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type, props);
                    break;

                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }

                break;
              }

            case HostComponent:
              {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;

                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                    break;

                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                }

                break;
              }

            default:
              return;
          }
        }
      }

      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent:
            {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type, props);

              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }

              return false;
            }

          case HostText:
            {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);

              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }

              return false;
            }

          default:
            return false;
        }
      }

      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }

        var nextInstance = nextHydratableInstance;

        if (!nextInstance) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }

        if (!tryHydrate(fiber, nextInstance)) {
          // If we can't hydrate this instance let's try the next one.
          // We use this as a heuristic. It's based on intuition and not data so it
          // might be flawed or unnecessary.
          nextInstance = getNextHydratableSibling(nextInstance);

          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          } // We matched the next one, we'll now assume that the first one was
          // superfluous and we'll delete it. Since we can't eagerly delete it
          // we'll have to schedule a deletion. To do that, this node needs a dummy
          // fiber associated with it.


          deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
        }

        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
      }

      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.

        if (updatePayload !== null) {
          return true;
        }

        return false;
      }

      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        {
          if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;

            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot:
                  {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }

                case HostComponent:
                  {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
              }
            }
          }
        }
        return shouldUpdate;
      }

      function popToNextHostParent(fiber) {
        var parent = fiber['return'];

        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
          parent = parent['return'];
        }

        hydrationParentFiber = parent;
      }

      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          // We're deeper than the current hydration context, inside an inserted
          // tree.
          return false;
        }

        if (!isHydrating) {
          // If we're not currently hydrating but we're in a hydration context, then
          // we were an insertion and now need to pop up reenter hydration of our
          // siblings.
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }

        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.

        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
          var nextInstance = nextHydratableInstance;

          while (nextInstance) {
            deleteHydratableInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }

        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
      }

      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
      }

      return {
        enterHydrationState: enterHydrationState,
        resetHydrationState: resetHydrationState,
        tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
        prepareToHydrateHostInstance: prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
        popHydrationState: popHydrationState
      };
    }; // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.


    var ReactFiberInstrumentation = {
      debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

    var defaultShowDialog = function defaultShowDialog(capturedError) {
      return true;
    };

    var showDialog = defaultShowDialog;

    function logCapturedError(capturedError) {
      var logError = showDialog(capturedError); // Allow injected showDialog() to prevent default console.error logging.
      // This enables renderers like ReactNative to better manage redbox behavior.

      if (logError === false) {
        return;
      }

      var error = capturedError.error;
      var suppressLogging = error && error.suppressReactErrorLogging;

      if (suppressLogging) {
        return;
      }

      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry;
        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage = void 0; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
          } else {
            errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
          }
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
        }

        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

        console.error(combinedMessage);
      }
    }

    var invokeGuardedCallback = ReactErrorUtils.invokeGuardedCallback;
    var hasCaughtError = ReactErrorUtils.hasCaughtError;
    var clearCaughtError = ReactErrorUtils.clearCaughtError;
    {
      var didWarnAboutStateTransition = false;
      var didWarnSetStateChildContext = false;
      var didWarnStateUpdateForUnmountedComponent = {};

      var warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(fiber) {
        var componentName = getComponentName(fiber) || 'ReactClass';

        if (didWarnStateUpdateForUnmountedComponent[componentName]) {
          return;
        }

        warning(false, 'Can only update a mounted or mounting ' + 'component. This usually means you called setState, replaceState, ' + 'or forceUpdate on an unmounted component. This is a no-op.\n\nPlease ' + 'check the code for the %s component.', componentName);
        didWarnStateUpdateForUnmountedComponent[componentName] = true;
      };

      var warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
        switch (ReactDebugCurrentFiber.phase) {
          case 'getChildContext':
            if (didWarnSetStateChildContext) {
              return;
            }

            warning(false, 'setState(...): Cannot call setState() inside getChildContext()');
            didWarnSetStateChildContext = true;
            break;

          case 'render':
            if (didWarnAboutStateTransition) {
              return;
            }

            warning(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
            didWarnAboutStateTransition = true;
            break;
        }
      };
    }

    var ReactFiberScheduler = function ReactFiberScheduler(config) {
      var hostContext = ReactFiberHostContext(config);
      var hydrationContext = ReactFiberHydrationContext(config);
      var popHostContainer = hostContext.popHostContainer,
          popHostContext = hostContext.popHostContext,
          resetHostContainer = hostContext.resetHostContainer;

      var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
          beginWork = _ReactFiberBeginWork.beginWork,
          beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

      var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
          completeWork = _ReactFiberCompleteWo.completeWork;

      var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
          commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
          commitPlacement = _ReactFiberCommitWork.commitPlacement,
          commitDeletion = _ReactFiberCommitWork.commitDeletion,
          commitWork = _ReactFiberCommitWork.commitWork,
          commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
          commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
          commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

      var now = config.now,
          scheduleDeferredCallback = config.scheduleDeferredCallback,
          cancelDeferredCallback = config.cancelDeferredCallback,
          useSyncScheduling = config.useSyncScheduling,
          prepareForCommit = config.prepareForCommit,
          resetAfterCommit = config.resetAfterCommit; // Represents the current time in ms.

      var startTime = now();
      var mostRecentCurrentTime = msToExpirationTime(0); // Represents the expiration time that incoming updates should use. (If this
      // is NoWork, use the default strategy: async updates in async mode, sync
      // updates in sync mode.)

      var expirationContext = NoWork;
      var isWorking = false; // The next work in progress fiber that we're currently working on.

      var nextUnitOfWork = null;
      var nextRoot = null; // The time at which we're currently rendering work.

      var nextRenderExpirationTime = NoWork; // The next fiber with an effect that we're currently committing.

      var nextEffect = null; // Keep track of which fibers have captured an error that need to be handled.
      // Work is removed from this collection after componentDidCatch is called.

      var capturedErrors = null; // Keep track of which fibers have failed during the current batch of work.
      // This is a different set than capturedErrors, because it is not reset until
      // the end of the batch. This is needed to propagate errors correctly if a
      // subtree fails more than once.

      var failedBoundaries = null; // Error boundaries that captured an error during the current commit.

      var commitPhaseBoundaries = null;
      var firstUncaughtError = null;
      var didFatal = false;
      var isCommitting = false;
      var isUnmounting = false; // Used for performance tracking.

      var interruptedBy = null;

      function resetContextStack() {
        // Reset the stack
        reset(); // Reset the cursors

        resetContext();
        resetHostContainer();
      }

      function commitAllHostEffects() {
        while (nextEffect !== null) {
          {
            ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
          }
          recordEffect();
          var effectTag = nextEffect.effectTag;

          if (effectTag & ContentReset) {
            commitResetTextContent(nextEffect);
          }

          if (effectTag & Ref) {
            var current = nextEffect.alternate;

            if (current !== null) {
              commitDetachRef(current);
            }
          } // The following switch statement is only concerned about placement,
          // updates, and deletions. To avoid needing to add a case for every
          // possible bitmap value, we remove the secondary effects from the
          // effect tag and switch on that value.


          var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);

          switch (primaryEffectTag) {
            case Placement:
              {
                commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
                // any life-cycles like componentDidMount gets called.
                // TODO: findDOMNode doesn't rely on this any more but isMounted
                // does and isMounted is deprecated anyway so we should be able
                // to kill this.

                nextEffect.effectTag &= ~Placement;
                break;
              }

            case PlacementAndUpdate:
              {
                // Placement
                commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
                // any life-cycles like componentDidMount gets called.

                nextEffect.effectTag &= ~Placement; // Update

                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }

            case Update:
              {
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }

            case Deletion:
              {
                isUnmounting = true;
                commitDeletion(nextEffect);
                isUnmounting = false;
                break;
              }
          }

          nextEffect = nextEffect.nextEffect;
        }

        {
          ReactDebugCurrentFiber.resetCurrentFiber();
        }
      }

      function commitAllLifeCycles() {
        while (nextEffect !== null) {
          var effectTag = nextEffect.effectTag;

          if (effectTag & (Update | Callback)) {
            recordEffect();
            var current = nextEffect.alternate;
            commitLifeCycles(current, nextEffect);
          }

          if (effectTag & Ref) {
            recordEffect();
            commitAttachRef(nextEffect);
          }

          if (effectTag & Err) {
            recordEffect();
            commitErrorHandling(nextEffect);
          }

          var next = nextEffect.nextEffect; // Ensure that we clean these up so that we don't accidentally keep them.
          // I'm not actually sure this matters because we can't reset firstEffect
          // and lastEffect since they're on every node, not just the effectful
          // ones. So we have to clean everything as we reuse nodes anyway.

          nextEffect.nextEffect = null; // Ensure that we reset the effectTag here so that we can rely on effect
          // tags to reason about the current life-cycle.

          nextEffect = next;
        }
      }

      function commitRoot(finishedWork) {
        // We keep track of this so that captureError can collect any boundaries
        // that capture an error during the commit phase. The reason these aren't
        // local to this function is because errors that occur during cWU are
        // captured elsewhere, to prevent the unmount from being interrupted.
        isWorking = true;
        isCommitting = true;
        startCommitTimer();
        var root = finishedWork.stateNode;
        !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        root.isReadyForCommit = false; // Reset this to null before calling lifecycles

        ReactCurrentOwner.current = null;
        var firstEffect = void 0;

        if (finishedWork.effectTag > PerformedWork) {
          // A fiber's effect list consists only of its children, not itself. So if
          // the root has an effect, we need to add it to the end of the list. The
          // resulting list is the set that would belong to the root's parent, if
          // it had one; that is, all the effects in the tree including the root.
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          // There is no effect on the root.
          firstEffect = finishedWork.firstEffect;
        }

        prepareForCommit(); // Commit all the side-effects within a tree. We'll do this in two passes.
        // The first pass performs all the host insertions, updates, deletions and
        // ref unmounts.

        nextEffect = firstEffect;
        startCommitHostEffectsTimer();

        while (nextEffect !== null) {
          var didError = false;

          var _error = void 0;

          {
            invokeGuardedCallback(null, commitAllHostEffects, null);

            if (hasCaughtError()) {
              didError = true;
              _error = clearCaughtError();
            }
          }

          if (didError) {
            !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            captureError(nextEffect, _error); // Clean-up

            if (nextEffect !== null) {
              nextEffect = nextEffect.nextEffect;
            }
          }
        }

        stopCommitHostEffectsTimer();
        resetAfterCommit(); // The work-in-progress tree is now the current tree. This must come after
        // the first pass of the commit phase, so that the previous tree is still
        // current during componentWillUnmount, but before the second pass, so that
        // the finished work is current during componentDidMount/Update.

        root.current = finishedWork; // In the second pass we'll perform all life-cycles and ref callbacks.
        // Life-cycles happen as a separate pass so that all placements, updates,
        // and deletions in the entire tree have already been invoked.
        // This pass also triggers any renderer-specific initial effects.

        nextEffect = firstEffect;
        startCommitLifeCyclesTimer();

        while (nextEffect !== null) {
          var _didError = false;

          var _error2 = void 0;

          {
            invokeGuardedCallback(null, commitAllLifeCycles, null);

            if (hasCaughtError()) {
              _didError = true;
              _error2 = clearCaughtError();
            }
          }

          if (_didError) {
            !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            captureError(nextEffect, _error2);

            if (nextEffect !== null) {
              nextEffect = nextEffect.nextEffect;
            }
          }
        }

        isCommitting = false;
        isWorking = false;
        stopCommitLifeCyclesTimer();
        stopCommitTimer();

        if (typeof onCommitRoot === 'function') {
          onCommitRoot(finishedWork.stateNode);
        }

        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
        } // If we caught any errors during this commit, schedule their boundaries
        // to update.


        if (commitPhaseBoundaries) {
          commitPhaseBoundaries.forEach(scheduleErrorRecovery);
          commitPhaseBoundaries = null;
        }

        if (firstUncaughtError !== null) {
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          onUncaughtError(_error3);
        }

        var remainingTime = root.current.expirationTime;

        if (remainingTime === NoWork) {
          capturedErrors = null;
          failedBoundaries = null;
        }

        return remainingTime;
      }

      function resetExpirationTime(workInProgress, renderTime) {
        if (renderTime !== Never && workInProgress.expirationTime === Never) {
          // The children of this component are hidden. Don't bubble their
          // expiration times.
          return;
        } // Check for pending updates.


        var newExpirationTime = getUpdateExpirationTime(workInProgress); // TODO: Calls need to visit stateNode
        // Bubble up the earliest expiration time.

        var child = workInProgress.child;

        while (child !== null) {
          if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
            newExpirationTime = child.expirationTime;
          }

          child = child.sibling;
        }

        workInProgress.expirationTime = newExpirationTime;
      }

      function completeUnitOfWork(workInProgress) {
        while (true) {
          // The current, flushed, state of this fiber is the alternate.
          // Ideally nothing should rely on this, but relying on it here
          // means that we don't need an additional field on the work in
          // progress.
          var current = workInProgress.alternate;
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }
          var next = completeWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
          var returnFiber = workInProgress['return'];
          var siblingFiber = workInProgress.sibling;
          resetExpirationTime(workInProgress, nextRenderExpirationTime);

          if (next !== null) {
            stopWorkTimer(workInProgress);

            if (true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            } // If completing this work spawned new work, do that next. We'll come
            // back here again.


            return next;
          }

          if (returnFiber !== null) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }

            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }

              returnFiber.lastEffect = workInProgress.lastEffect;
            } // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if
            // needed, by doing multiple passes over the effect list. We don't want
            // to schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.


            var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect list.
            // PerformedWork effect is read by React DevTools but shouldn't be committed.

            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }

              returnFiber.lastEffect = workInProgress;
            }
          }

          stopWorkTimer(workInProgress);

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            // We've reached the root.
            var root = workInProgress.stateNode;
            root.isReadyForCommit = true;
            return null;
          }
        } // Without this explicit null return Flow complains of invalid return type
        // TODO Remove the above while(true) loop
        // eslint-disable-next-line no-unreachable


        return null;
      }

      function performUnitOfWork(workInProgress) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current = workInProgress.alternate; // See if beginning this work spawns more work.

        startWorkTimer(workInProgress);
        {
          ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
        }
        var next = beginWork(current, workInProgress, nextRenderExpirationTime);
        {
          ReactDebugCurrentFiber.resetCurrentFiber();
        }

        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
        }

        if (next === null) {
          // If this doesn't spawn new work, complete the current work.
          next = completeUnitOfWork(workInProgress);
        }

        ReactCurrentOwner.current = null;
        return next;
      }

      function performFailedUnitOfWork(workInProgress) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current = workInProgress.alternate; // See if beginning this work spawns more work.

        startWorkTimer(workInProgress);
        {
          ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
        }
        var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
        {
          ReactDebugCurrentFiber.resetCurrentFiber();
        }

        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
        }

        if (next === null) {
          // If this doesn't spawn new work, complete the current work.
          next = completeUnitOfWork(workInProgress);
        }

        ReactCurrentOwner.current = null;
        return next;
      }

      function workLoop(expirationTime) {
        if (capturedErrors !== null) {
          // If there are unhandled errors, switch to the slow work loop.
          // TODO: How to avoid this check in the fast path? Maybe the renderer
          // could keep track of which roots have unhandled errors and call a
          // forked version of renderRoot.
          slowWorkLoopThatChecksForFailedWork(expirationTime);
          return;
        }

        if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
          return;
        }

        if (nextRenderExpirationTime <= mostRecentCurrentTime) {
          // Flush all expired work.
          while (nextUnitOfWork !== null) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          }
        } else {
          // Flush asynchronous work until the deadline runs out of time.
          while (nextUnitOfWork !== null && !shouldYield()) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          }
        }
      }

      function slowWorkLoopThatChecksForFailedWork(expirationTime) {
        if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
          return;
        }

        if (nextRenderExpirationTime <= mostRecentCurrentTime) {
          // Flush all expired work.
          while (nextUnitOfWork !== null) {
            if (hasCapturedError(nextUnitOfWork)) {
              // Use a forked version of performUnitOfWork
              nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
            } else {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          }
        } else {
          // Flush asynchronous work until the deadline runs out of time.
          while (nextUnitOfWork !== null && !shouldYield()) {
            if (hasCapturedError(nextUnitOfWork)) {
              // Use a forked version of performUnitOfWork
              nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
            } else {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          }
        }
      }

      function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
        // We're going to restart the error boundary that captured the error.
        // Conceptually, we're unwinding the stack. We need to unwind the
        // context stack, too.
        unwindContexts(failedWork, boundary); // Restart the error boundary using a forked version of
        // performUnitOfWork that deletes the boundary's children. The entire
        // failed subree will be unmounted. During the commit phase, a special
        // lifecycle method is called on the error boundary, which triggers
        // a re-render.

        nextUnitOfWork = performFailedUnitOfWork(boundary); // Continue working.

        workLoop(expirationTime);
      }

      function renderRoot(root, expirationTime) {
        !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        isWorking = true; // We're about to mutate the work-in-progress tree. If the root was pending
        // commit, it no longer is: we'll need to complete it again.

        root.isReadyForCommit = false; // Check if we're starting from a fresh stack, or if we're resuming from
        // previously yielded work.

        if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
          // Reset the stack and start working from the root.
          resetContextStack();
          nextRoot = root;
          nextRenderExpirationTime = expirationTime;
          nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
        }

        startWorkLoopTimer(nextUnitOfWork);
        var didError = false;
        var error = null;
        {
          invokeGuardedCallback(null, workLoop, null, expirationTime);

          if (hasCaughtError()) {
            didError = true;
            error = clearCaughtError();
          }
        } // An error was thrown during the render phase.

        while (didError) {
          if (didFatal) {
            // This was a fatal error. Don't attempt to recover from it.
            firstUncaughtError = error;
            break;
          }

          var failedWork = nextUnitOfWork;

          if (failedWork === null) {
            // An error was thrown but there's no current unit of work. This can
            // happen during the commit phase if there's a bug in the renderer.
            didFatal = true;
            continue;
          } // "Capture" the error by finding the nearest boundary. If there is no
          // error boundary, we use the root.


          var boundary = captureError(failedWork, error);
          !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;

          if (didFatal) {
            // The error we just captured was a fatal error. This happens
            // when the error propagates to the root more than once.
            continue;
          }

          didError = false;
          error = null;
          {
            invokeGuardedCallback(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);

            if (hasCaughtError()) {
              didError = true;
              error = clearCaughtError();
              continue;
            }
          } // We're finished working. Exit the error loop.

          break;
        }

        var uncaughtError = firstUncaughtError; // We're done performing work. Time to clean up.

        stopWorkLoopTimer(interruptedBy);
        interruptedBy = null;
        isWorking = false;
        didFatal = false;
        firstUncaughtError = null;

        if (uncaughtError !== null) {
          onUncaughtError(uncaughtError);
        }

        return root.isReadyForCommit ? root.current.alternate : null;
      } // Returns the boundary that captured the error, or null if the error is ignored


      function captureError(failedWork, error) {
        // It is no longer valid because we exited the user code.
        ReactCurrentOwner.current = null;
        {
          ReactDebugCurrentFiber.resetCurrentFiber();
        } // Search for the nearest error boundary.

        var boundary = null; // Passed to logCapturedError()

        var errorBoundaryFound = false;
        var willRetry = false;
        var errorBoundaryName = null; // Host containers are a special case. If the failed work itself is a host
        // container, then it acts as its own boundary. In all other cases, we
        // ignore the work itself and only search through the parents.

        if (failedWork.tag === HostRoot) {
          boundary = failedWork;

          if (isFailedBoundary(failedWork)) {
            // If this root already failed, there must have been an error when
            // attempting to unmount it. This is a worst-case scenario and
            // should only be possible if there's a bug in the renderer.
            didFatal = true;
          }
        } else {
          var node = failedWork['return'];

          while (node !== null && boundary === null) {
            if (node.tag === ClassComponent) {
              var instance = node.stateNode;

              if (typeof instance.componentDidCatch === 'function') {
                errorBoundaryFound = true;
                errorBoundaryName = getComponentName(node); // Found an error boundary!

                boundary = node;
                willRetry = true;
              }
            } else if (node.tag === HostRoot) {
              // Treat the root like a no-op error boundary
              boundary = node;
            }

            if (isFailedBoundary(node)) {
              // This boundary is already in a failed state.
              // If we're currently unmounting, that means this error was
              // thrown while unmounting a failed subtree. We should ignore
              // the error.
              if (isUnmounting) {
                return null;
              } // If we're in the commit phase, we should check to see if
              // this boundary already captured an error during this commit.
              // This case exists because multiple errors can be thrown during
              // a single commit without interruption.


              if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
                // If so, we should ignore this error.
                return null;
              } // The error should propagate to the next boundary -— we keep looking.


              boundary = null;
              willRetry = false;
            }

            node = node['return'];
          }
        }

        if (boundary !== null) {
          // Add to the collection of failed boundaries. This lets us know that
          // subsequent errors in this subtree should propagate to the next boundary.
          if (failedBoundaries === null) {
            failedBoundaries = new Set();
          }

          failedBoundaries.add(boundary); // This method is unsafe outside of the begin and complete phases.
          // We might be in the commit phase when an error is captured.
          // The risk is that the return path from this Fiber may not be accurate.
          // That risk is acceptable given the benefit of providing users more context.

          var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);

          var _componentName = getComponentName(failedWork); // Add to the collection of captured errors. This is stored as a global
          // map of errors and their component stack location keyed by the boundaries
          // that capture them. We mostly use this Map as a Set; it's a Map only to
          // avoid adding a field to Fiber to store the error.


          if (capturedErrors === null) {
            capturedErrors = new Map();
          }

          var capturedError = {
            componentName: _componentName,
            componentStack: _componentStack,
            error: error,
            errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
            errorBoundaryFound: errorBoundaryFound,
            errorBoundaryName: errorBoundaryName,
            willRetry: willRetry
          };
          capturedErrors.set(boundary, capturedError);

          try {
            logCapturedError(capturedError);
          } catch (e) {
            // Prevent cycle if logCapturedError() throws.
            // A cycle may still occur if logCapturedError renders a component that throws.
            var suppressLogging = e && e.suppressReactErrorLogging;

            if (!suppressLogging) {
              console.error(e);
            }
          } // If we're in the commit phase, defer scheduling an update on the
          // boundary until after the commit is complete


          if (isCommitting) {
            if (commitPhaseBoundaries === null) {
              commitPhaseBoundaries = new Set();
            }

            commitPhaseBoundaries.add(boundary);
          } else {
            // Otherwise, schedule an update now.
            // TODO: Is this actually necessary during the render phase? Is it
            // possible to unwind and continue rendering at the same priority,
            // without corrupting internal state?
            scheduleErrorRecovery(boundary);
          }

          return boundary;
        } else if (firstUncaughtError === null) {
          // If no boundary is found, we'll need to throw the error
          firstUncaughtError = error;
        }

        return null;
      }

      function hasCapturedError(fiber) {
        // TODO: capturedErrors should store the boundary instance, to avoid needing
        // to check the alternate.
        return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
      }

      function isFailedBoundary(fiber) {
        // TODO: failedBoundaries should store the boundary instance, to avoid
        // needing to check the alternate.
        return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
      }

      function commitErrorHandling(effectfulFiber) {
        var capturedError = void 0;

        if (capturedErrors !== null) {
          capturedError = capturedErrors.get(effectfulFiber);
          capturedErrors['delete'](effectfulFiber);

          if (capturedError == null) {
            if (effectfulFiber.alternate !== null) {
              effectfulFiber = effectfulFiber.alternate;
              capturedError = capturedErrors.get(effectfulFiber);
              capturedErrors['delete'](effectfulFiber);
            }
          }
        }

        !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;

        switch (effectfulFiber.tag) {
          case ClassComponent:
            var instance = effectfulFiber.stateNode;
            var info = {
              componentStack: capturedError.componentStack
            }; // Allow the boundary to handle the error, usually by scheduling
            // an update to itself

            instance.componentDidCatch(capturedError.error, info);
            return;

          case HostRoot:
            if (firstUncaughtError === null) {
              firstUncaughtError = capturedError.error;
            }

            return;

          default:
            invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
        }
      }

      function unwindContexts(from, to) {
        var node = from;

        while (node !== null) {
          switch (node.tag) {
            case ClassComponent:
              popContextProvider(node);
              break;

            case HostComponent:
              popHostContext(node);
              break;

            case HostRoot:
              popHostContainer(node);
              break;

            case HostPortal:
              popHostContainer(node);
              break;
          }

          if (node === to || node.alternate === to) {
            stopFailedWorkTimer(node);
            break;
          } else {
            stopWorkTimer(node);
          }

          node = node['return'];
        }
      }

      function computeAsyncExpiration() {
        // Given the current clock time, returns an expiration time. We use rounding
        // to batch like updates together.
        // Should complete within ~1000ms. 1200ms max.
        var currentTime = recalculateCurrentTime();
        var expirationMs = 1000;
        var bucketSizeMs = 200;
        return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
      }

      function computeExpirationForFiber(fiber) {
        var expirationTime = void 0;

        if (expirationContext !== NoWork) {
          // An explicit expiration context was set;
          expirationTime = expirationContext;
        } else if (isWorking) {
          if (isCommitting) {
            // Updates that occur during the commit phase should have sync priority
            // by default.
            expirationTime = Sync;
          } else {
            // Updates during the render phase should expire at the same time as
            // the work that is being rendered.
            expirationTime = nextRenderExpirationTime;
          }
        } else {
          // No explicit expiration context was set, and we're not currently
          // performing work. Calculate a new expiration time.
          if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
            // This is a sync update
            expirationTime = Sync;
          } else {
            // This is an async update
            expirationTime = computeAsyncExpiration();
          }
        }

        return expirationTime;
      }

      function scheduleWork(fiber, expirationTime) {
        return scheduleWorkImpl(fiber, expirationTime, false);
      }

      function checkRootNeedsClearing(root, fiber, expirationTime) {
        if (!isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime) {
          // Restart the root from the top.
          if (nextUnitOfWork !== null) {
            // This is an interruption. (Used for performance tracking.)
            interruptedBy = fiber;
          }

          nextRoot = null;
          nextUnitOfWork = null;
          nextRenderExpirationTime = NoWork;
        }
      }

      function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
        recordScheduleUpdate();
        {
          if (!isErrorRecovery && fiber.tag === ClassComponent) {
            var instance = fiber.stateNode;
            warnAboutInvalidUpdates(instance);
          }
        }
        var node = fiber;

        while (node !== null) {
          // Walk the parent path to the root and update each node's
          // expiration time.
          if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
            node.expirationTime = expirationTime;
          }

          if (node.alternate !== null) {
            if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
              node.alternate.expirationTime = expirationTime;
            }
          }

          if (node['return'] === null) {
            if (node.tag === HostRoot) {
              var root = node.stateNode;
              checkRootNeedsClearing(root, fiber, expirationTime);
              requestWork(root, expirationTime);
              checkRootNeedsClearing(root, fiber, expirationTime);
            } else {
              {
                if (!isErrorRecovery && fiber.tag === ClassComponent) {
                  warnAboutUpdateOnUnmounted(fiber);
                }
              }
              return;
            }
          }

          node = node['return'];
        }
      }

      function scheduleErrorRecovery(fiber) {
        scheduleWorkImpl(fiber, Sync, true);
      }

      function recalculateCurrentTime() {
        // Subtract initial time so it fits inside 32bits
        var ms = now() - startTime;
        mostRecentCurrentTime = msToExpirationTime(ms);
        return mostRecentCurrentTime;
      }

      function deferredUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = computeAsyncExpiration();

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      }

      function syncUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = Sync;

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      } // TODO: Everything below this is written as if it has been lifted to the
      // renderers. I'll do this in a follow-up.
      // Linked-list of roots


      var firstScheduledRoot = null;
      var lastScheduledRoot = null;
      var callbackExpirationTime = NoWork;
      var callbackID = -1;
      var isRendering = false;
      var nextFlushedRoot = null;
      var nextFlushedExpirationTime = NoWork;
      var deadlineDidExpire = false;
      var hasUnhandledError = false;
      var unhandledError = null;
      var deadline = null;
      var isBatchingUpdates = false;
      var isUnbatchingUpdates = false; // Use these to prevent an infinite loop of nested updates

      var NESTED_UPDATE_LIMIT = 1000;
      var nestedUpdateCount = 0;
      var timeHeuristicForUnitOfWork = 1;

      function scheduleCallbackWithExpiration(expirationTime) {
        if (callbackExpirationTime !== NoWork) {
          // A callback is already scheduled. Check its expiration time (timeout).
          if (expirationTime > callbackExpirationTime) {
            // Existing callback has sufficient timeout. Exit.
            return;
          } else {
            // Existing callback has insufficient timeout. Cancel and schedule a
            // new one.
            cancelDeferredCallback(callbackID);
          } // The request callback timer is already running. Don't start a new one.

        } else {
          startRequestCallbackTimer();
        } // Compute a timeout for the given expiration time.


        var currentMs = now() - startTime;
        var expirationMs = expirationTimeToMs(expirationTime);
        var timeout = expirationMs - currentMs;
        callbackExpirationTime = expirationTime;
        callbackID = scheduleDeferredCallback(performAsyncWork, {
          timeout: timeout
        });
      } // requestWork is called by the scheduler whenever a root receives an update.
      // It's up to the renderer to call renderRoot at some point in the future.


      function requestWork(root, expirationTime) {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
        } // Add the root to the schedule.
        // Check if this root is already part of the schedule.


        if (root.nextScheduledRoot === null) {
          // This root is not already scheduled. Add it.
          root.remainingExpirationTime = expirationTime;

          if (lastScheduledRoot === null) {
            firstScheduledRoot = lastScheduledRoot = root;
            root.nextScheduledRoot = root;
          } else {
            lastScheduledRoot.nextScheduledRoot = root;
            lastScheduledRoot = root;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          }
        } else {
          // This root is already scheduled, but its priority may have increased.
          var remainingExpirationTime = root.remainingExpirationTime;

          if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
            // Update the priority.
            root.remainingExpirationTime = expirationTime;
          }
        }

        if (isRendering) {
          // Prevent reentrancy. Remaining work will be scheduled at the end of
          // the currently rendering batch.
          return;
        }

        if (isBatchingUpdates) {
          // Flush work at the end of the batch.
          if (isUnbatchingUpdates) {
            // ...unless we're inside unbatchedUpdates, in which case we should
            // flush it now.
            nextFlushedRoot = root;
            nextFlushedExpirationTime = Sync;
            performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
          }

          return;
        } // TODO: Get rid of Sync and use current time?


        if (expirationTime === Sync) {
          performWork(Sync, null);
        } else {
          scheduleCallbackWithExpiration(expirationTime);
        }
      }

      function findHighestPriorityRoot() {
        var highestPriorityWork = NoWork;
        var highestPriorityRoot = null;

        if (lastScheduledRoot !== null) {
          var previousScheduledRoot = lastScheduledRoot;
          var root = firstScheduledRoot;

          while (root !== null) {
            var remainingExpirationTime = root.remainingExpirationTime;

            if (remainingExpirationTime === NoWork) {
              // This root no longer has work. Remove it from the scheduler.
              // TODO: This check is redudant, but Flow is confused by the branch
              // below where we set lastScheduledRoot to null, even though we break
              // from the loop right after.
              !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;

              if (root === root.nextScheduledRoot) {
                // This is the only root in the list.
                root.nextScheduledRoot = null;
                firstScheduledRoot = lastScheduledRoot = null;
                break;
              } else if (root === firstScheduledRoot) {
                // This is the first root in the list.
                var next = root.nextScheduledRoot;
                firstScheduledRoot = next;
                lastScheduledRoot.nextScheduledRoot = next;
                root.nextScheduledRoot = null;
              } else if (root === lastScheduledRoot) {
                // This is the last root in the list.
                lastScheduledRoot = previousScheduledRoot;
                lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                root.nextScheduledRoot = null;
                break;
              } else {
                previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                root.nextScheduledRoot = null;
              }

              root = previousScheduledRoot.nextScheduledRoot;
            } else {
              if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
                // Update the priority, if it's higher
                highestPriorityWork = remainingExpirationTime;
                highestPriorityRoot = root;
              }

              if (root === lastScheduledRoot) {
                break;
              }

              previousScheduledRoot = root;
              root = root.nextScheduledRoot;
            }
          }
        } // If the next root is the same as the previous root, this is a nested
        // update. To prevent an infinite loop, increment the nested update count.


        var previousFlushedRoot = nextFlushedRoot;

        if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
          nestedUpdateCount++;
        } else {
          // Reset whenever we switch roots.
          nestedUpdateCount = 0;
        }

        nextFlushedRoot = highestPriorityRoot;
        nextFlushedExpirationTime = highestPriorityWork;
      }

      function performAsyncWork(dl) {
        performWork(NoWork, dl);
      }

      function performWork(minExpirationTime, dl) {
        deadline = dl; // Keep working on roots until there's no more work, or until the we reach
        // the deadline.

        findHighestPriorityRoot();

        if (enableUserTimingAPI && deadline !== null) {
          var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
          stopRequestCallbackTimer(didExpire);
        }

        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime); // Find the next highest priority work.

          findHighestPriorityRoot();
        } // We're done flushing work. Either we ran out of time in this callback,
        // or there's no more work left with sufficient priority.
        // If we're inside a callback, set this to false since we just completed it.


        if (deadline !== null) {
          callbackExpirationTime = NoWork;
          callbackID = -1;
        } // If there's work left over, schedule a new callback.


        if (nextFlushedExpirationTime !== NoWork) {
          scheduleCallbackWithExpiration(nextFlushedExpirationTime);
        } // Clean-up.


        deadline = null;
        deadlineDidExpire = false;
        nestedUpdateCount = 0;

        if (hasUnhandledError) {
          var _error4 = unhandledError;
          unhandledError = null;
          hasUnhandledError = false;
          throw _error4;
        }
      }

      function performWorkOnRoot(root, expirationTime) {
        !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        isRendering = true; // Check if this is async work or sync/expired work.
        // TODO: Pass current time as argument to renderRoot, commitRoot

        if (expirationTime <= recalculateCurrentTime()) {
          // Flush sync work.
          var finishedWork = root.finishedWork;

          if (finishedWork !== null) {
            // This root is already complete. We can commit it.
            root.finishedWork = null;
            root.remainingExpirationTime = commitRoot(finishedWork);
          } else {
            root.finishedWork = null;
            finishedWork = renderRoot(root, expirationTime);

            if (finishedWork !== null) {
              // We've completed the root. Commit it.
              root.remainingExpirationTime = commitRoot(finishedWork);
            }
          }
        } else {
          // Flush async work.
          var _finishedWork = root.finishedWork;

          if (_finishedWork !== null) {
            // This root is already complete. We can commit it.
            root.finishedWork = null;
            root.remainingExpirationTime = commitRoot(_finishedWork);
          } else {
            root.finishedWork = null;
            _finishedWork = renderRoot(root, expirationTime);

            if (_finishedWork !== null) {
              // We've completed the root. Check the deadline one more time
              // before committing.
              if (!shouldYield()) {
                // Still time left. Commit the root.
                root.remainingExpirationTime = commitRoot(_finishedWork);
              } else {
                // There's no time left. Mark this root as complete. We'll come
                // back and commit it later.
                root.finishedWork = _finishedWork;
              }
            }
          }
        }

        isRendering = false;
      } // When working on async work, the reconciler asks the renderer if it should
      // yield execution. For DOM, we implement this with requestIdleCallback.


      function shouldYield() {
        if (deadline === null) {
          return false;
        }

        if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
          // Disregard deadline.didTimeout. Only expired work should be flushed
          // during a timeout. This path is only hit for non-expired work.
          return false;
        }

        deadlineDidExpire = true;
        return true;
      } // TODO: Not happy about this hook. Conceptually, renderRoot should return a
      // tuple of (isReadyForCommit, didError, error)


      function onUncaughtError(error) {
        !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0; // Unschedule this root so we don't work on it again until there's
        // another update.

        nextFlushedRoot.remainingExpirationTime = NoWork;

        if (!hasUnhandledError) {
          hasUnhandledError = true;
          unhandledError = error;
        }
      } // TODO: Batching should be implemented at the renderer level, not inside
      // the reconciler.


      function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;

        try {
          return fn(a);
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates;

          if (!isBatchingUpdates && !isRendering) {
            performWork(Sync, null);
          }
        }
      } // TODO: Batching should be implemented at the renderer level, not inside
      // the reconciler.


      function unbatchedUpdates(fn) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
          isUnbatchingUpdates = true;

          try {
            return fn();
          } finally {
            isUnbatchingUpdates = false;
          }
        }

        return fn();
      } // TODO: Batching should be implemented at the renderer level, not within
      // the reconciler.


      function flushSync(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;

        try {
          return syncUpdates(fn);
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates;
          !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
          performWork(Sync, null);
        }
      }

      return {
        computeAsyncExpiration: computeAsyncExpiration,
        computeExpirationForFiber: computeExpirationForFiber,
        scheduleWork: scheduleWork,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        flushSync: flushSync,
        deferredUpdates: deferredUpdates
      };
    };

    {
      var didWarnAboutNestedUpdates = false;
    } // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyObject;
      }

      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);
      return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
    }

    var ReactFiberReconciler$1 = function ReactFiberReconciler$1(config) {
      var getPublicInstance = config.getPublicInstance;

      var _ReactFiberScheduler = ReactFiberScheduler(config),
          computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,
          computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
          scheduleWork = _ReactFiberScheduler.scheduleWork,
          batchedUpdates = _ReactFiberScheduler.batchedUpdates,
          unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
          flushSync = _ReactFiberScheduler.flushSync,
          deferredUpdates = _ReactFiberScheduler.deferredUpdates;

      function scheduleTopLevelUpdate(current, element, callback) {
        {
          if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
          }
        }
        callback = callback === undefined ? null : callback;
        {
          warning(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
        }
        var expirationTime = void 0; // Check if the top-level element is an async wrapper component. If so,
        // treat updates to the root as async. This is a bit weird but lets us
        // avoid a separate `renderAsync` API.

        if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
          expirationTime = computeAsyncExpiration();
        } else {
          expirationTime = computeExpirationForFiber(current);
        }

        var update = {
          expirationTime: expirationTime,
          partialState: {
            element: element
          },
          callback: callback,
          isReplace: false,
          isForced: false,
          nextCallback: null,
          next: null
        };
        insertUpdateIntoFiber(current, update);
        scheduleWork(current, expirationTime);
      }

      function findHostInstance(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);

        if (hostFiber === null) {
          return null;
        }

        return hostFiber.stateNode;
      }

      return {
        createContainer: function createContainer(containerInfo, hydrate) {
          return createFiberRoot(containerInfo, hydrate);
        },
        updateContainer: function updateContainer(element, container, parentComponent, callback) {
          // TODO: If this is a nested container, this won't be the root.
          var current = container.current;
          {
            if (ReactFiberInstrumentation_1.debugTool) {
              if (current.alternate === null) {
                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
              }
            }
          }
          var context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          scheduleTopLevelUpdate(current, element, callback);
        },
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        deferredUpdates: deferredUpdates,
        flushSync: flushSync,
        getPublicRootInstance: function getPublicRootInstance(container) {
          var containerFiber = container.current;

          if (!containerFiber.child) {
            return null;
          }

          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);

            default:
              return containerFiber.child.stateNode;
          }
        },
        findHostInstance: findHostInstance,
        findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        },
        injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
          var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          return injectInternals(_assign({}, devToolsConfig, {
            findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
              return findHostInstance(fiber);
            },
            findFiberByHostInstance: function findFiberByHostInstance(instance) {
              if (!_findFiberByHostInstance) {
                // Might not be implemented by the renderer.
                return null;
              }

              return _findFiberByHostInstance(instance);
            }
          }));
        }
      };
    };

    var ReactFiberReconciler$2 = Object.freeze({
      default: ReactFiberReconciler$1
    });
    var ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2; // TODO: bundle Flow types with the package.
    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var reactReconciler = ReactFiberReconciler$3['default'] ? ReactFiberReconciler$3['default'] : ReactFiberReconciler$3;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    {}
    /**
     * Standard/simple iteration through an event's collected dispatches.
     */

    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */

    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */

    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */
    // Use to restore controlled state after a change event has fired.

    var fiberHostComponent = null;
    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);

      if (!internalInstance) {
        // Unmounted
        return;
      }

      !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
      fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
    }

    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }

      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);

      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    } // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults


    var fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
      return fn(bookkeeping);
    };

    var isNestingBatched = false;

    function batchedUpdates(fn, bookkeeping) {
      if (isNestingBatched) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state. Therefore, we add the target to
        // a queue of work.
        return fiberBatchedUpdates(fn, bookkeeping);
      }

      isNestingBatched = true;

      try {
        return fiberBatchedUpdates(fn, bookkeeping);
      } finally {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        isNestingBatched = false;
        restoreStateIfNeeded();
      }
    }

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _objectWithoutProperties(obj, keys) {
      var target = {};

      for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
      }

      return target;
    }

    var UPDATE_SIGNAL = {};

    function getPublicInstance(inst) {
      switch (inst.tag) {
        case 'INSTANCE':
          var _createNodeMock = inst.rootContainerInstance.createNodeMock;
          return _createNodeMock({
            type: inst.type,
            props: inst.props
          });

        default:
          return inst;
      }
    }

    function appendChild(parentInstance, child) {
      var index = parentInstance.children.indexOf(child);

      if (index !== -1) {
        parentInstance.children.splice(index, 1);
      }

      parentInstance.children.push(child);
    }

    function insertBefore(parentInstance, child, beforeChild) {
      var index = parentInstance.children.indexOf(child);

      if (index !== -1) {
        parentInstance.children.splice(index, 1);
      }

      var beforeIndex = parentInstance.children.indexOf(beforeChild);
      parentInstance.children.splice(beforeIndex, 0, child);
    }

    function removeChild(parentInstance, child) {
      var index = parentInstance.children.indexOf(child);
      parentInstance.children.splice(index, 1);
    }

    var TestRenderer = reactReconciler({
      getRootHostContext: function getRootHostContext() {
        return emptyObject;
      },
      getChildHostContext: function getChildHostContext() {
        return emptyObject;
      },
      prepareForCommit: function prepareForCommit() {// noop
      },
      resetAfterCommit: function resetAfterCommit() {// noop
      },
      createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        return {
          type: type,
          props: props,
          children: [],
          rootContainerInstance: rootContainerInstance,
          tag: 'INSTANCE'
        };
      },
      appendInitialChild: function appendInitialChild(parentInstance, child) {
        var index = parentInstance.children.indexOf(child);

        if (index !== -1) {
          parentInstance.children.splice(index, 1);
        }

        parentInstance.children.push(child);
      },
      finalizeInitialChildren: function finalizeInitialChildren(testElement, type, props, rootContainerInstance) {
        return false;
      },
      prepareUpdate: function prepareUpdate(testElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        return UPDATE_SIGNAL;
      },
      shouldSetTextContent: function shouldSetTextContent(type, props) {
        return false;
      },
      shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
        return false;
      },
      createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        return {
          text: text,
          tag: 'TEXT'
        };
      },
      scheduleDeferredCallback: function scheduleDeferredCallback(fn) {
        return setTimeout(fn, 0, {
          timeRemaining: Infinity
        });
      },
      cancelDeferredCallback: function cancelDeferredCallback(timeoutID) {
        clearTimeout(timeoutID);
      },
      useSyncScheduling: true,
      getPublicInstance: getPublicInstance,
      now: function now() {
        // Test renderer does not use expiration
        return 0;
      },
      mutation: {
        commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          instance.type = type;
          instance.props = newProps;
        },
        commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {// noop
        },
        commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.text = newText;
        },
        resetTextContent: function resetTextContent(testElement) {// noop
        },
        appendChild: appendChild,
        appendChildToContainer: appendChild,
        insertBefore: insertBefore,
        insertInContainerBefore: insertBefore,
        removeChild: removeChild,
        removeChildFromContainer: removeChild
      }
    });
    var defaultTestOptions = {
      createNodeMock: function createNodeMock() {
        return null;
      }
    };

    function _toJSON(inst) {
      switch (inst.tag) {
        case 'TEXT':
          return inst.text;

        case 'INSTANCE':
          /* eslint-disable no-unused-vars */
          // We don't include the `children` prop in JSON.
          // Instead, we will include the actual rendered children.
          var _inst$props = inst.props,
              _children = _inst$props.children,
              _props = _objectWithoutProperties(_inst$props, ['children']);
          /* eslint-enable */


          var renderedChildren = null;

          if (inst.children && inst.children.length) {
            renderedChildren = inst.children.map(_toJSON);
          }

          var json = {
            type: inst.type,
            props: _props,
            children: renderedChildren
          };
          Object.defineProperty(json, '$$typeof', {
            value: Symbol['for']('react.test.json')
          });
          return json;

        default:
          throw new Error('Unexpected node type in toJSON: ' + inst.tag);
      }
    }

    function nodeAndSiblingsTrees(nodeWithSibling) {
      var array = [];
      var node = nodeWithSibling;

      while (node != null) {
        array.push(node);
        node = node.sibling;
      }

      var trees = array.map(_toTree);
      return trees.length ? trees : null;
    }

    function hasSiblings(node) {
      return node && node.sibling;
    }

    function _toTree(node) {
      if (node == null) {
        return null;
      }

      switch (node.tag) {
        case HostRoot:
          // 3
          return _toTree(node.child);

        case ClassComponent:
          return {
            nodeType: 'component',
            type: node.type,
            props: _assign({}, node.memoizedProps),
            instance: node.stateNode,
            rendered: hasSiblings(node.child) ? nodeAndSiblingsTrees(node.child) : _toTree(node.child)
          };

        case FunctionalComponent:
          // 1
          return {
            nodeType: 'component',
            type: node.type,
            props: _assign({}, node.memoizedProps),
            instance: null,
            rendered: hasSiblings(node.child) ? nodeAndSiblingsTrees(node.child) : _toTree(node.child)
          };

        case HostComponent:
          // 5
          return {
            nodeType: 'host',
            type: node.type,
            props: _assign({}, node.memoizedProps),
            instance: null,
            // TODO: use createNodeMock here somehow?
            rendered: nodeAndSiblingsTrees(node.child)
          };

        case HostText:
          // 6
          return node.stateNode.text;

        default:
          invariant(false, 'toTree() does not yet know how to handle nodes with tag=%s', node.tag);
      }
    }

    var fiberToWrapper = new WeakMap();

    function wrapFiber(fiber) {
      var wrapper = fiberToWrapper.get(fiber);

      if (wrapper === undefined && fiber.alternate !== null) {
        wrapper = fiberToWrapper.get(fiber.alternate);
      }

      if (wrapper === undefined) {
        wrapper = new ReactTestInstance(fiber);
        fiberToWrapper.set(fiber, wrapper);
      }

      return wrapper;
    }

    var validWrapperTypes = new Set([FunctionalComponent, ClassComponent, HostComponent]);

    var ReactTestInstance = function () {
      ReactTestInstance.prototype._currentFiber = function _currentFiber() {
        // Throws if this component has been unmounted.
        var fiber = findCurrentFiberUsingSlowPath(this._fiber);
        !(fiber !== null) ? invariant(false, 'Can\'t read from currently-mounting component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        return fiber;
      };

      function ReactTestInstance(fiber) {
        _classCallCheck(this, ReactTestInstance);

        !validWrapperTypes.has(fiber.tag) ? invariant(false, 'Unexpected object passed to ReactTestInstance constructor (tag: %s). This is probably a bug in React.', fiber.tag) : void 0;
        this._fiber = fiber;
      } // Custom search functions


      ReactTestInstance.prototype.find = function find(predicate) {
        return expectOne(this.findAll(predicate, {
          deep: false
        }), 'matching custom predicate: ' + predicate.toString());
      };

      ReactTestInstance.prototype.findByType = function findByType(type) {
        return expectOne(this.findAllByType(type, {
          deep: false
        }), 'with node type: "' + (type.displayName || type.name) + '"');
      };

      ReactTestInstance.prototype.findByProps = function findByProps(props) {
        return expectOne(this.findAllByProps(props, {
          deep: false
        }), 'with props: ' + JSON.stringify(props));
      };

      ReactTestInstance.prototype.findAll = function findAll(predicate) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return _findAll(this, predicate, options);
      };

      ReactTestInstance.prototype.findAllByType = function findAllByType(type) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return _findAll(this, function (node) {
          return node.type === type;
        }, options);
      };

      ReactTestInstance.prototype.findAllByProps = function findAllByProps(props) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return _findAll(this, function (node) {
          return node.props && propsMatch(node.props, props);
        }, options);
      };

      _createClass(ReactTestInstance, [{
        key: 'instance',
        get: function get() {
          if (this._fiber.tag === HostComponent) {
            return getPublicInstance(this._fiber.stateNode);
          } else {
            return this._fiber.stateNode;
          }
        }
      }, {
        key: 'type',
        get: function get() {
          return this._fiber.type;
        }
      }, {
        key: 'props',
        get: function get() {
          return this._currentFiber().memoizedProps;
        }
      }, {
        key: 'parent',
        get: function get() {
          var parent = this._fiber['return'];
          return parent === null || parent.tag === HostRoot ? null : wrapFiber(parent);
        }
      }, {
        key: 'children',
        get: function get() {
          var children = [];

          var startingNode = this._currentFiber();

          var node = startingNode;

          if (node.child === null) {
            return children;
          }

          node.child['return'] = node;
          node = node.child;

          outer: while (true) {
            var descend = false;

            switch (node.tag) {
              case FunctionalComponent:
              case ClassComponent:
              case HostComponent:
                children.push(wrapFiber(node));
                break;

              case HostText:
                children.push('' + node.memoizedProps);
                break;

              case Fragment:
                descend = true;
                break;

              default:
                invariant(false, 'Unsupported component type %s in test renderer. This is probably a bug in React.', node.tag);
            }

            if (descend && node.child !== null) {
              node.child['return'] = node;
              node = node.child;
              continue;
            }

            while (node.sibling === null) {
              if (node['return'] === startingNode) {
                break outer;
              }

              node = node['return'];
            }

            node.sibling['return'] = node['return'];
            node = node.sibling;
          }

          return children;
        }
      }]);

      return ReactTestInstance;
    }();

    function _findAll(root, predicate, options) {
      var deep = options ? options.deep : true;
      var results = [];

      if (predicate(root)) {
        results.push(root);

        if (!deep) {
          return results;
        }
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = root.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;

          if (typeof child === 'string') {
            continue;
          }

          results.push.apply(results, _findAll(child, predicate, options));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return results;
    }

    function expectOne(all, message) {
      if (all.length === 1) {
        return all[0];
      }

      var prefix = all.length === 0 ? 'No instances found ' : 'Expected 1 but found ' + all.length + ' instances ';
      throw new Error(prefix + message);
    }

    function propsMatch(props, filter) {
      for (var key in filter) {
        if (props[key] !== filter[key]) {
          return false;
        }
      }

      return true;
    }

    var ReactTestRendererFiber = {
      create: function create(element, options) {
        var createNodeMock = defaultTestOptions.createNodeMock;

        if (options && typeof options.createNodeMock === 'function') {
          createNodeMock = options.createNodeMock;
        }

        var container = {
          children: [],
          createNodeMock: createNodeMock,
          tag: 'CONTAINER'
        };
        var root = TestRenderer.createContainer(container, false);
        !(root != null) ? invariant(false, 'something went wrong') : void 0;
        TestRenderer.updateContainer(element, root, null, null);
        var entry = {
          root: undefined,
          // makes flow happy
          // we define a 'getter' for 'root' below using 'Object.defineProperty'
          toJSON: function toJSON() {
            if (root == null || root.current == null || container == null) {
              return null;
            }

            if (container.children.length === 0) {
              return null;
            }

            if (container.children.length === 1) {
              return _toJSON(container.children[0]);
            }

            return container.children.map(_toJSON);
          },
          toTree: function toTree() {
            if (root == null || root.current == null) {
              return null;
            }

            return _toTree(root.current);
          },
          update: function update(newElement) {
            if (root == null || root.current == null) {
              return;
            }

            TestRenderer.updateContainer(newElement, root, null, null);
          },
          unmount: function unmount() {
            if (root == null || root.current == null) {
              return;
            }

            TestRenderer.updateContainer(null, root, null);
            container = null;
            root = null;
          },
          getInstance: function getInstance() {
            if (root == null || root.current == null) {
              return null;
            }

            return TestRenderer.getPublicRootInstance(root);
          }
        };
        Object.defineProperty(entry, 'root', {
          configurable: true,
          enumerable: true,
          get: function get() {
            if (root === null || root.current.child === null) {
              throw new Error("Can't access .root on unmounted test renderer");
            }

            return wrapFiber(root.current.child);
          }
        });
        return entry;
      },

      /* eslint-disable camelcase */
      unstable_batchedUpdates: batchedUpdates
    };
    var ReactTestRenderer = Object.freeze({
      default: ReactTestRendererFiber
    });
    var ReactTestRenderer$1 = ReactTestRenderer && ReactTestRendererFiber || ReactTestRenderer; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var reactTestRenderer = ReactTestRenderer$1['default'] ? ReactTestRenderer$1['default'] : ReactTestRenderer$1;
    module.exports = reactTestRenderer;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/react-test-renderer/cjs/react-test-renderer.production.min.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.2.0
 * react-test-renderer.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var n = __webpack_require__("./node_modules/object-assign/index.js"),
    da = __webpack_require__("./node_modules/react/index.js"),
    F = __webpack_require__("./node_modules/fbjs/lib/emptyObject.js"),
    ha = __webpack_require__("./node_modules/fbjs/lib/shallowEqual.js");

function K(a) {
  for (var b = arguments.length - 1, d = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
    d += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
  }

  b = Error(d + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
  b.name = "Invariant Violation";
  b.framesToPop = 1;
  throw b;
}

var ia = da.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;

function ja(a) {
  a = a.type;
  return "string" === typeof a ? a : "function" === typeof a ? a.displayName || a.name : null;
}

function ka(a) {
  var b = a;
  if (a.alternate) for (; b["return"];) {
    b = b["return"];
  } else {
    if (0 !== (b.effectTag & 2)) return 1;

    for (; b["return"];) {
      if (b = b["return"], 0 !== (b.effectTag & 2)) return 1;
    }
  }
  return 3 === b.tag ? 2 : 3;
}

function la(a) {
  return (a = a._reactInternalFiber) ? 2 === ka(a) : !1;
}

function ma(a) {
  2 !== ka(a) ? K("188") : void 0;
}

function na(a) {
  var b = a.alternate;
  if (!b) return b = ka(a), 3 === b ? K("188") : void 0, 1 === b ? null : a;

  for (var d = a, c = b;;) {
    var e = d["return"],
        p = e ? e.alternate : null;
    if (!e || !p) break;

    if (e.child === p.child) {
      for (var k = e.child; k;) {
        if (k === d) return ma(e), a;
        if (k === c) return ma(e), b;
        k = k.sibling;
      }

      K("188");
    }

    if (d["return"] !== c["return"]) d = e, c = p;else {
      k = !1;

      for (var g = e.child; g;) {
        if (g === d) {
          k = !0;
          d = e;
          c = p;
          break;
        }

        if (g === c) {
          k = !0;
          c = e;
          d = p;
          break;
        }

        g = g.sibling;
      }

      if (!k) {
        for (g = p.child; g;) {
          if (g === d) {
            k = !0;
            d = p;
            c = e;
            break;
          }

          if (g === c) {
            k = !0;
            c = p;
            d = e;
            break;
          }

          g = g.sibling;
        }

        k ? void 0 : K("189");
      }
    }
    d.alternate !== c ? K("190") : void 0;
  }

  3 !== d.tag ? K("188") : void 0;
  return d.stateNode.current === d ? a : b;
}

function oa(a) {
  a = na(a);
  if (!a) return null;

  for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;
    if (b.child) b.child["return"] = b, b = b.child;else {
      if (b === a) break;

      for (; !b.sibling;) {
        if (!b["return"] || b["return"] === a) return null;
        b = b["return"];
      }

      b.sibling["return"] = b["return"];
      b = b.sibling;
    }
  }

  return null;
}

function pa(a) {
  a = na(a);
  if (!a) return null;

  for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;
    if (b.child && 4 !== b.tag) b.child["return"] = b, b = b.child;else {
      if (b === a) break;

      for (; !b.sibling;) {
        if (!b["return"] || b["return"] === a) return null;
        b = b["return"];
      }

      b.sibling["return"] = b["return"];
      b = b.sibling;
    }
  }

  return null;
}

var sa = [],
    L = -1;

function M(a) {
  0 > L || (a.current = sa[L], sa[L] = null, L--);
}

function N(a, b) {
  L++;
  sa[L] = a.current;
  a.current = b;
}

new Set();
var O = {
  current: F
},
    Q = {
  current: !1
},
    ta = F;

function ua(a) {
  return va(a) ? ta : O.current;
}

function wa(a, b) {
  var d = a.type.contextTypes;
  if (!d) return F;
  var c = a.stateNode;
  if (c && c.__reactInternalMemoizedUnmaskedChildContext === b) return c.__reactInternalMemoizedMaskedChildContext;
  var e = {},
      p;

  for (p in d) {
    e[p] = b[p];
  }

  c && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}

function va(a) {
  return 2 === a.tag && null != a.type.childContextTypes;
}

function xa(a) {
  va(a) && (M(Q, a), M(O, a));
}

function ya(a, b, d) {
  null != O.cursor ? K("168") : void 0;
  N(O, b, a);
  N(Q, d, a);
}

function za(a, b) {
  var d = a.stateNode,
      c = a.type.childContextTypes;
  if ("function" !== typeof d.getChildContext) return b;
  d = d.getChildContext();

  for (var e in d) {
    e in c ? void 0 : K("108", ja(a) || "Unknown", e);
  }

  return n({}, b, d);
}

function Aa(a) {
  if (!va(a)) return !1;
  var b = a.stateNode;
  b = b && b.__reactInternalMemoizedMergedChildContext || F;
  ta = O.current;
  N(O, b, a);
  N(Q, Q.current, a);
  return !0;
}

function Ba(a, b) {
  var d = a.stateNode;
  d ? void 0 : K("169");

  if (b) {
    var c = za(a, ta);
    d.__reactInternalMemoizedMergedChildContext = c;
    M(Q, a);
    M(O, a);
    N(O, c, a);
  } else M(Q, a);

  N(Q, b, a);
}

function X(a, b, d) {
  this.tag = a;
  this.key = b;
  this.stateNode = this.type = null;
  this.sibling = this.child = this["return"] = null;
  this.index = 0;
  this.memoizedState = this.updateQueue = this.memoizedProps = this.pendingProps = this.ref = null;
  this.internalContextTag = d;
  this.effectTag = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.expirationTime = 0;
  this.alternate = null;
}

function Ca(a, b, d) {
  var c = a.alternate;
  null === c ? (c = new X(a.tag, a.key, a.internalContextTag), c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
  c.expirationTime = d;
  c.pendingProps = b;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}

function Da(a, b, d) {
  var c = void 0,
      e = a.type,
      p = a.key;
  "function" === typeof e ? (c = e.prototype && e.prototype.isReactComponent ? new X(2, p, b) : new X(0, p, b), c.type = e, c.pendingProps = a.props) : "string" === typeof e ? (c = new X(5, p, b), c.type = e, c.pendingProps = a.props) : "object" === typeof e && null !== e && "number" === typeof e.tag ? (c = e, c.pendingProps = a.props) : K("130", null == e ? e : typeof e, "");
  c.expirationTime = d;
  return c;
}

function Ea(a, b, d, c) {
  b = new X(10, c, b);
  b.pendingProps = a;
  b.expirationTime = d;
  return b;
}

function Fa(a, b, d) {
  b = new X(6, null, b);
  b.pendingProps = a;
  b.expirationTime = d;
  return b;
}

function Ga(a, b, d) {
  b = new X(7, a.key, b);
  b.type = a.handler;
  b.pendingProps = a;
  b.expirationTime = d;
  return b;
}

function Ha(a, b, d) {
  a = new X(9, null, b);
  a.expirationTime = d;
  return a;
}

function Ia(a, b, d) {
  b = new X(4, a.key, b);
  b.pendingProps = a.children || [];
  b.expirationTime = d;
  b.stateNode = {
    containerInfo: a.containerInfo,
    pendingChildren: null,
    implementation: a.implementation
  };
  return b;
}

var Oa = null,
    Pa = null;

function Qa(a) {
  return function (b) {
    try {
      return a(b);
    } catch (d) {}
  };
}

function Ra(a) {
  if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
  var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (b.isDisabled || !b.supportsFiber) return !0;

  try {
    var d = b.inject(a);
    Oa = Qa(function (a) {
      return b.onCommitFiberRoot(d, a);
    });
    Pa = Qa(function (a) {
      return b.onCommitFiberUnmount(d, a);
    });
  } catch (c) {}

  return !0;
}

function Sa(a) {
  "function" === typeof Oa && Oa(a);
}

function Ta(a) {
  "function" === typeof Pa && Pa(a);
}

function Ua(a) {
  return {
    baseState: a,
    expirationTime: 0,
    first: null,
    last: null,
    callbackList: null,
    hasForceUpdate: !1,
    isInitialized: !1
  };
}

function Va(a, b) {
  null === a.last ? a.first = a.last = b : (a.last.next = b, a.last = b);
  if (0 === a.expirationTime || a.expirationTime > b.expirationTime) a.expirationTime = b.expirationTime;
}

function Wa(a, b) {
  var d = a.alternate,
      c = a.updateQueue;
  null === c && (c = a.updateQueue = Ua(null));
  null !== d ? (a = d.updateQueue, null === a && (a = d.updateQueue = Ua(null))) : a = null;
  a = a !== c ? a : null;
  null === a ? Va(c, b) : null === c.last || null === a.last ? (Va(c, b), Va(a, b)) : (Va(c, b), a.last = b);
}

function Xa(a, b, d, c) {
  a = a.partialState;
  return "function" === typeof a ? a.call(b, d, c) : a;
}

function gb(a, b, d, c, e, p) {
  null !== a && a.updateQueue === d && (d = b.updateQueue = {
    baseState: d.baseState,
    expirationTime: d.expirationTime,
    first: d.first,
    last: d.last,
    isInitialized: d.isInitialized,
    callbackList: null,
    hasForceUpdate: !1
  });
  d.expirationTime = 0;
  d.isInitialized ? a = d.baseState : (a = d.baseState = b.memoizedState, d.isInitialized = !0);

  for (var k = !0, g = d.first, l = !1; null !== g;) {
    var u = g.expirationTime;

    if (u > p) {
      var A = d.expirationTime;
      if (0 === A || A > u) d.expirationTime = u;
      l || (l = !0, d.baseState = a);
    } else {
      l || (d.first = g.next, null === d.first && (d.last = null));
      if (g.isReplace) a = Xa(g, c, a, e), k = !0;else if (u = Xa(g, c, a, e)) a = k ? n({}, a, u) : n(a, u), k = !1;
      g.isForced && (d.hasForceUpdate = !0);
      null !== g.callback && (u = d.callbackList, null === u && (u = d.callbackList = []), u.push(g));
    }

    g = g.next;
  }

  null !== d.callbackList ? b.effectTag |= 32 : null !== d.first || d.hasForceUpdate || (b.updateQueue = null);
  l || (d.baseState = a);
  return a;
}

function hb(a, b) {
  var d = a.callbackList;
  if (null !== d) for (a.callbackList = null, a = 0; a < d.length; a++) {
    var c = d[a],
        e = c.callback;
    c.callback = null;
    "function" !== typeof e ? K("191", e) : void 0;
    e.call(b);
  }
}

function ib(a, b, d, c) {
  function e(a, b) {
    b.updater = p;
    a.stateNode = b;
    b._reactInternalFiber = a;
  }

  var p = {
    isMounted: la,
    enqueueSetState: function enqueueSetState(d, c, e) {
      d = d._reactInternalFiber;
      e = void 0 === e ? null : e;
      var k = b(d);
      Wa(d, {
        expirationTime: k,
        partialState: c,
        callback: e,
        isReplace: !1,
        isForced: !1,
        nextCallback: null,
        next: null
      });
      a(d, k);
    },
    enqueueReplaceState: function enqueueReplaceState(d, c, e) {
      d = d._reactInternalFiber;
      e = void 0 === e ? null : e;
      var g = b(d);
      Wa(d, {
        expirationTime: g,
        partialState: c,
        callback: e,
        isReplace: !0,
        isForced: !1,
        nextCallback: null,
        next: null
      });
      a(d, g);
    },
    enqueueForceUpdate: function enqueueForceUpdate(d, c) {
      d = d._reactInternalFiber;
      c = void 0 === c ? null : c;
      var e = b(d);
      Wa(d, {
        expirationTime: e,
        partialState: null,
        callback: c,
        isReplace: !1,
        isForced: !0,
        nextCallback: null,
        next: null
      });
      a(d, e);
    }
  };
  return {
    adoptClassInstance: e,
    constructClassInstance: function constructClassInstance(a, b) {
      var d = a.type,
          c = ua(a),
          g = 2 === a.tag && null != a.type.contextTypes,
          k = g ? wa(a, c) : F;
      b = new d(b, k);
      e(a, b);
      g && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = c, a.__reactInternalMemoizedMaskedChildContext = k);
      return b;
    },
    mountClassInstance: function mountClassInstance(a, b) {
      var d = a.alternate,
          c = a.stateNode,
          e = c.state || null,
          g = a.pendingProps;
      g ? void 0 : K("158");
      var k = ua(a);
      c.props = g;
      c.state = a.memoizedState = e;
      c.refs = F;
      c.context = wa(a, k);
      null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent && (a.internalContextTag |= 1);
      "function" === typeof c.componentWillMount && (e = c.state, c.componentWillMount(), e !== c.state && p.enqueueReplaceState(c, c.state, null), e = a.updateQueue, null !== e && (c.state = gb(d, a, e, c, g, b)));
      "function" === typeof c.componentDidMount && (a.effectTag |= 4);
    },
    updateClassInstance: function updateClassInstance(a, b, e) {
      var g = b.stateNode;
      g.props = b.memoizedProps;
      g.state = b.memoizedState;
      var k = b.memoizedProps,
          l = b.pendingProps;
      l || (l = k, null == l ? K("159") : void 0);
      var w = g.context,
          x = ua(b);
      x = wa(b, x);
      "function" !== typeof g.componentWillReceiveProps || k === l && w === x || (w = g.state, g.componentWillReceiveProps(l, x), g.state !== w && p.enqueueReplaceState(g, g.state, null));
      w = b.memoizedState;
      e = null !== b.updateQueue ? gb(a, b, b.updateQueue, g, l, e) : w;
      if (!(k !== l || w !== e || Q.current || null !== b.updateQueue && b.updateQueue.hasForceUpdate)) return "function" !== typeof g.componentDidUpdate || k === a.memoizedProps && w === a.memoizedState || (b.effectTag |= 4), !1;
      var B = l;
      if (null === k || null !== b.updateQueue && b.updateQueue.hasForceUpdate) B = !0;else {
        var D = b.stateNode,
            G = b.type;
        B = "function" === typeof D.shouldComponentUpdate ? D.shouldComponentUpdate(B, e, x) : G.prototype && G.prototype.isPureReactComponent ? !ha(k, B) || !ha(w, e) : !0;
      }
      B ? ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(l, e, x), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4)) : ("function" !== typeof g.componentDidUpdate || k === a.memoizedProps && w === a.memoizedState || (b.effectTag |= 4), d(b, l), c(b, e));
      g.props = l;
      g.state = e;
      g.context = x;
      return B;
    }
  };
}

var jb = "function" === typeof Symbol && Symbol["for"],
    kb = jb ? Symbol["for"]("react.element") : 60103,
    lb = jb ? Symbol["for"]("react.call") : 60104,
    mb = jb ? Symbol["for"]("react.return") : 60105,
    nb = jb ? Symbol["for"]("react.portal") : 60106,
    Y = jb ? Symbol["for"]("react.fragment") : 60107,
    ob = "function" === typeof Symbol && Symbol.iterator;

function pb(a) {
  if (null === a || "undefined" === typeof a) return null;
  a = ob && a[ob] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}

var qb = Array.isArray;

function rb(a, b) {
  var d = b.ref;

  if (null !== d && "function" !== typeof d) {
    if (b._owner) {
      b = b._owner;
      var c = void 0;
      b && (2 !== b.tag ? K("110") : void 0, c = b.stateNode);
      c ? void 0 : K("147", d);
      var e = "" + d;
      if (null !== a && null !== a.ref && a.ref._stringRef === e) return a.ref;

      a = function a(_a) {
        var b = c.refs === F ? c.refs = {} : c.refs;
        null === _a ? delete b[e] : b[e] = _a;
      };

      a._stringRef = e;
      return a;
    }

    "string" !== typeof d ? K("148") : void 0;
    b._owner ? void 0 : K("149", d);
  }

  return d;
}

function sb(a, b) {
  "textarea" !== a.type && K("31", "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, "");
}

function tb(a) {
  function b(b, t) {
    if (a) {
      var f = b.lastEffect;
      null !== f ? (f.nextEffect = t, b.lastEffect = t) : b.firstEffect = b.lastEffect = t;
      t.nextEffect = null;
      t.effectTag = 8;
    }
  }

  function d(d, t) {
    if (!a) return null;

    for (; null !== t;) {
      b(d, t), t = t.sibling;
    }

    return null;
  }

  function c(a, b) {
    for (a = new Map(); null !== b;) {
      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
    }

    return a;
  }

  function e(a, b, f) {
    a = Ca(a, b, f);
    a.index = 0;
    a.sibling = null;
    return a;
  }

  function p(b, t, f) {
    b.index = f;
    if (!a) return t;
    f = b.alternate;
    if (null !== f) return f = f.index, f < t ? (b.effectTag = 2, t) : f;
    b.effectTag = 2;
    return t;
  }

  function k(b) {
    a && null === b.alternate && (b.effectTag = 2);
    return b;
  }

  function g(a, b, f, h) {
    if (null === b || 6 !== b.tag) return b = Fa(f, a.internalContextTag, h), b["return"] = a, b;
    b = e(b, f, h);
    b["return"] = a;
    return b;
  }

  function l(a, b, f, h) {
    if (null !== b && b.type === f.type) return h = e(b, f.props, h), h.ref = rb(b, f), h["return"] = a, h;
    h = Da(f, a.internalContextTag, h);
    h.ref = rb(b, f);
    h["return"] = a;
    return h;
  }

  function u(a, b, f, h) {
    if (null === b || 7 !== b.tag) return b = Ga(f, a.internalContextTag, h), b["return"] = a, b;
    b = e(b, f, h);
    b["return"] = a;
    return b;
  }

  function A(a, b, f, h) {
    if (null === b || 9 !== b.tag) return b = Ha(f, a.internalContextTag, h), b.type = f.value, b["return"] = a, b;
    b = e(b, null, h);
    b.type = f.value;
    b["return"] = a;
    return b;
  }

  function y(a, b, f, h) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== f.containerInfo || b.stateNode.implementation !== f.implementation) return b = Ia(f, a.internalContextTag, h), b["return"] = a, b;
    b = e(b, f.children || [], h);
    b["return"] = a;
    return b;
  }

  function w(a, b, f, h, d) {
    if (null === b || 10 !== b.tag) return b = Ea(f, a.internalContextTag, h, d), b["return"] = a, b;
    b = e(b, f, h);
    b["return"] = a;
    return b;
  }

  function x(a, b, f) {
    if ("string" === typeof b || "number" === typeof b) return b = Fa("" + b, a.internalContextTag, f), b["return"] = a, b;

    if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {
        case kb:
          if (b.type === Y) return b = Ea(b.props.children, a.internalContextTag, f, b.key), b["return"] = a, b;
          f = Da(b, a.internalContextTag, f);
          f.ref = rb(null, b);
          f["return"] = a;
          return f;

        case lb:
          return b = Ga(b, a.internalContextTag, f), b["return"] = a, b;

        case mb:
          return f = Ha(b, a.internalContextTag, f), f.type = b.value, f["return"] = a, f;

        case nb:
          return b = Ia(b, a.internalContextTag, f), b["return"] = a, b;
      }

      if (qb(b) || pb(b)) return b = Ea(b, a.internalContextTag, f, null), b["return"] = a, b;
      sb(a, b);
    }

    return null;
  }

  function B(a, b, f, h) {
    var d = null !== b ? b.key : null;
    if ("string" === typeof f || "number" === typeof f) return null !== d ? null : g(a, b, "" + f, h);

    if ("object" === typeof f && null !== f) {
      switch (f.$$typeof) {
        case kb:
          return f.key === d ? f.type === Y ? w(a, b, f.props.children, h, d) : l(a, b, f, h) : null;

        case lb:
          return f.key === d ? u(a, b, f, h) : null;

        case mb:
          return null === d ? A(a, b, f, h) : null;

        case nb:
          return f.key === d ? y(a, b, f, h) : null;
      }

      if (qb(f) || pb(f)) return null !== d ? null : w(a, b, f, h, null);
      sb(a, f);
    }

    return null;
  }

  function D(a, b, f, h, d) {
    if ("string" === typeof h || "number" === typeof h) return a = a.get(f) || null, g(b, a, "" + h, d);

    if ("object" === typeof h && null !== h) {
      switch (h.$$typeof) {
        case kb:
          return a = a.get(null === h.key ? f : h.key) || null, h.type === Y ? w(b, a, h.props.children, d, h.key) : l(b, a, h, d);

        case lb:
          return a = a.get(null === h.key ? f : h.key) || null, u(b, a, h, d);

        case mb:
          return a = a.get(f) || null, A(b, a, h, d);

        case nb:
          return a = a.get(null === h.key ? f : h.key) || null, y(b, a, h, d);
      }

      if (qb(h) || pb(h)) return a = a.get(f) || null, w(b, a, h, d, null);
      sb(b, h);
    }

    return null;
  }

  function G(e, t, f, h) {
    for (var g = null, r = null, q = t, m = t = 0, k = null; null !== q && m < f.length; m++) {
      q.index > m ? (k = q, q = null) : k = q.sibling;
      var l = B(e, q, f[m], h);

      if (null === l) {
        null === q && (q = k);
        break;
      }

      a && q && null === l.alternate && b(e, q);
      t = p(l, t, m);
      null === r ? g = l : r.sibling = l;
      r = l;
      q = k;
    }

    if (m === f.length) return d(e, q), g;

    if (null === q) {
      for (; m < f.length; m++) {
        if (q = x(e, f[m], h)) t = p(q, t, m), null === r ? g = q : r.sibling = q, r = q;
      }

      return g;
    }

    for (q = c(e, q); m < f.length; m++) {
      if (k = D(q, e, m, f[m], h)) {
        if (a && null !== k.alternate) q["delete"](null === k.key ? m : k.key);
        t = p(k, t, m);
        null === r ? g = k : r.sibling = k;
        r = k;
      }
    }

    a && q.forEach(function (a) {
      return b(e, a);
    });
    return g;
  }

  function H(e, t, f, h) {
    var g = pb(f);
    "function" !== typeof g ? K("150") : void 0;
    f = g.call(f);
    null == f ? K("151") : void 0;

    for (var r = g = null, q = t, m = t = 0, k = null, l = f.next(); null !== q && !l.done; m++, l = f.next()) {
      q.index > m ? (k = q, q = null) : k = q.sibling;
      var E = B(e, q, l.value, h);

      if (null === E) {
        q || (q = k);
        break;
      }

      a && q && null === E.alternate && b(e, q);
      t = p(E, t, m);
      null === r ? g = E : r.sibling = E;
      r = E;
      q = k;
    }

    if (l.done) return d(e, q), g;

    if (null === q) {
      for (; !l.done; m++, l = f.next()) {
        l = x(e, l.value, h), null !== l && (t = p(l, t, m), null === r ? g = l : r.sibling = l, r = l);
      }

      return g;
    }

    for (q = c(e, q); !l.done; m++, l = f.next()) {
      if (l = D(q, e, m, l.value, h), null !== l) {
        if (a && null !== l.alternate) q["delete"](null === l.key ? m : l.key);
        t = p(l, t, m);
        null === r ? g = l : r.sibling = l;
        r = l;
      }
    }

    a && q.forEach(function (a) {
      return b(e, a);
    });
    return g;
  }

  return function (a, c, f, h) {
    "object" === typeof f && null !== f && f.type === Y && null === f.key && (f = f.props.children);
    var g = "object" === typeof f && null !== f;
    if (g) switch (f.$$typeof) {
      case kb:
        a: {
          var r = f.key;

          for (g = c; null !== g;) {
            if (g.key === r) {
              if (10 === g.tag ? f.type === Y : g.type === f.type) {
                d(a, g.sibling);
                c = e(g, f.type === Y ? f.props.children : f.props, h);
                c.ref = rb(g, f);
                c["return"] = a;
                a = c;
                break a;
              } else {
                d(a, g);
                break;
              }
            } else b(a, g);
            g = g.sibling;
          }

          f.type === Y ? (c = Ea(f.props.children, a.internalContextTag, h, f.key), c["return"] = a, a = c) : (h = Da(f, a.internalContextTag, h), h.ref = rb(c, f), h["return"] = a, a = h);
        }

        return k(a);

      case lb:
        a: {
          for (g = f.key; null !== c;) {
            if (c.key === g) {
              if (7 === c.tag) {
                d(a, c.sibling);
                c = e(c, f, h);
                c["return"] = a;
                a = c;
                break a;
              } else {
                d(a, c);
                break;
              }
            } else b(a, c);
            c = c.sibling;
          }

          c = Ga(f, a.internalContextTag, h);
          c["return"] = a;
          a = c;
        }

        return k(a);

      case mb:
        a: {
          if (null !== c) if (9 === c.tag) {
            d(a, c.sibling);
            c = e(c, null, h);
            c.type = f.value;
            c["return"] = a;
            a = c;
            break a;
          } else d(a, c);
          c = Ha(f, a.internalContextTag, h);
          c.type = f.value;
          c["return"] = a;
          a = c;
        }

        return k(a);

      case nb:
        a: {
          for (g = f.key; null !== c;) {
            if (c.key === g) {
              if (4 === c.tag && c.stateNode.containerInfo === f.containerInfo && c.stateNode.implementation === f.implementation) {
                d(a, c.sibling);
                c = e(c, f.children || [], h);
                c["return"] = a;
                a = c;
                break a;
              } else {
                d(a, c);
                break;
              }
            } else b(a, c);
            c = c.sibling;
          }

          c = Ia(f, a.internalContextTag, h);
          c["return"] = a;
          a = c;
        }

        return k(a);
    }
    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== c && 6 === c.tag ? (d(a, c.sibling), c = e(c, f, h)) : (d(a, c), c = Fa(f, a.internalContextTag, h)), c["return"] = a, a = c, k(a);
    if (qb(f)) return G(a, c, f, h);
    if (pb(f)) return H(a, c, f, h);
    g && sb(a, f);
    if ("undefined" === typeof f) switch (a.tag) {
      case 2:
      case 1:
        h = a.type, K("152", h.displayName || h.name || "Component");
    }
    return d(a, c);
  };
}

var ub = tb(!0),
    vb = tb(!1);

function wb(a, b, d, c, e) {
  function p(a, b, f) {
    var c = b.expirationTime;
    b.child = null === a ? vb(b, null, f, c) : ub(b, a.child, f, c);
  }

  function k(a, b) {
    var f = b.ref;
    null === f || a && a.ref === f || (b.effectTag |= 128);
  }

  function g(a, b, f, c) {
    k(a, b);
    if (!f) return c && Ba(b, !1), u(a, b);
    f = b.stateNode;
    ia.current = b;
    var h = f.render();
    b.effectTag |= 1;
    p(a, b, h);
    b.memoizedState = f.state;
    b.memoizedProps = f.props;
    c && Ba(b, !0);
    return b.child;
  }

  function l(a) {
    var b = a.stateNode;
    b.pendingContext ? ya(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ya(a, b.context, !1);
    D(a, b.containerInfo);
  }

  function u(a, b) {
    null !== a && b.child !== a.child ? K("153") : void 0;

    if (null !== b.child) {
      a = b.child;
      var f = Ca(a, a.pendingProps, a.expirationTime);
      b.child = f;

      for (f["return"] = b; null !== a.sibling;) {
        a = a.sibling, f = f.sibling = Ca(a, a.pendingProps, a.expirationTime), f["return"] = b;
      }

      f.sibling = null;
    }

    return b.child;
  }

  function A(a, b) {
    switch (b.tag) {
      case 3:
        l(b);
        break;

      case 2:
        Aa(b);
        break;

      case 4:
        D(b, b.stateNode.containerInfo);
    }

    return null;
  }

  var y = a.shouldSetTextContent,
      w = a.useSyncScheduling,
      x = a.shouldDeprioritizeSubtree,
      B = b.pushHostContext,
      D = b.pushHostContainer,
      G = d.enterHydrationState,
      H = d.resetHydrationState,
      E = d.tryToClaimNextHydratableInstance;
  a = ib(c, e, function (a, b) {
    a.memoizedProps = b;
  }, function (a, b) {
    a.memoizedState = b;
  });
  var t = a.adoptClassInstance,
      f = a.constructClassInstance,
      h = a.mountClassInstance,
      ca = a.updateClassInstance;
  return {
    beginWork: function beginWork(a, b, c) {
      if (0 === b.expirationTime || b.expirationTime > c) return A(a, b);

      switch (b.tag) {
        case 0:
          null !== a ? K("155") : void 0;
          var d = b.type,
              e = b.pendingProps,
              r = ua(b);
          r = wa(b, r);
          d = d(e, r);
          b.effectTag |= 1;
          "object" === typeof d && null !== d && "function" === typeof d.render ? (b.tag = 2, e = Aa(b), t(b, d), h(b, c), b = g(a, b, !0, e)) : (b.tag = 1, p(a, b, d), b.memoizedProps = e, b = b.child);
          return b;

        case 1:
          a: {
            e = b.type;
            c = b.pendingProps;
            d = b.memoizedProps;
            if (Q.current) null === c && (c = d);else if (null === c || d === c) {
              b = u(a, b);
              break a;
            }
            d = ua(b);
            d = wa(b, d);
            e = e(c, d);
            b.effectTag |= 1;
            p(a, b, e);
            b.memoizedProps = c;
            b = b.child;
          }

          return b;

        case 2:
          return e = Aa(b), d = void 0, null === a ? b.stateNode ? K("153") : (f(b, b.pendingProps), h(b, c), d = !0) : d = ca(a, b, c), g(a, b, d, e);

        case 3:
          return l(b), e = b.updateQueue, null !== e ? (d = b.memoizedState, e = gb(a, b, e, null, null, c), d === e ? (H(), b = u(a, b)) : (d = e.element, r = b.stateNode, (null === a || null === a.child) && r.hydrate && G(b) ? (b.effectTag |= 2, b.child = vb(b, null, d, c)) : (H(), p(a, b, d)), b.memoizedState = e, b = b.child)) : (H(), b = u(a, b)), b;

        case 5:
          B(b);
          null === a && E(b);
          e = b.type;
          var m = b.memoizedProps;
          d = b.pendingProps;
          null === d && (d = m, null === d ? K("154") : void 0);
          r = null !== a ? a.memoizedProps : null;
          Q.current || null !== d && m !== d ? (m = d.children, y(e, d) ? m = null : r && y(e, r) && (b.effectTag |= 16), k(a, b), 2147483647 !== c && !w && x(e, d) ? (b.expirationTime = 2147483647, b = null) : (p(a, b, m), b.memoizedProps = d, b = b.child)) : b = u(a, b);
          return b;

        case 6:
          return null === a && E(b), a = b.pendingProps, null === a && (a = b.memoizedProps), b.memoizedProps = a, null;

        case 8:
          b.tag = 7;

        case 7:
          e = b.pendingProps;
          if (Q.current) null === e && (e = a && a.memoizedProps, null === e ? K("154") : void 0);else if (null === e || b.memoizedProps === e) e = b.memoizedProps;
          d = e.children;
          b.stateNode = null === a ? vb(b, b.stateNode, d, c) : ub(b, b.stateNode, d, c);
          b.memoizedProps = e;
          return b.stateNode;

        case 9:
          return null;

        case 4:
          a: {
            D(b, b.stateNode.containerInfo);
            e = b.pendingProps;
            if (Q.current) null === e && (e = a && a.memoizedProps, null == e ? K("154") : void 0);else if (null === e || b.memoizedProps === e) {
              b = u(a, b);
              break a;
            }
            null === a ? b.child = ub(b, null, e, c) : p(a, b, e);
            b.memoizedProps = e;
            b = b.child;
          }

          return b;

        case 10:
          a: {
            c = b.pendingProps;
            if (Q.current) null === c && (c = b.memoizedProps);else if (null === c || b.memoizedProps === c) {
              b = u(a, b);
              break a;
            }
            p(a, b, c);
            b.memoizedProps = c;
            b = b.child;
          }

          return b;

        default:
          K("156");
      }
    },
    beginFailedWork: function beginFailedWork(b, a, c) {
      switch (a.tag) {
        case 2:
          Aa(a);
          break;

        case 3:
          l(a);
          break;

        default:
          K("157");
      }

      a.effectTag |= 64;
      null === b ? a.child = null : a.child !== b.child && (a.child = b.child);
      if (0 === a.expirationTime || a.expirationTime > c) return A(b, a);
      a.firstEffect = null;
      a.lastEffect = null;
      a.child = null === b ? vb(a, null, null, c) : ub(a, b.child, null, c);
      2 === a.tag && (b = a.stateNode, a.memoizedProps = b.props, a.memoizedState = b.state);
      return a.child;
    }
  };
}

function xb(a, b, d) {
  function c(a) {
    a.effectTag |= 4;
  }

  var e = a.createInstance,
      p = a.createTextInstance,
      k = a.appendInitialChild,
      g = a.finalizeInitialChildren,
      l = a.prepareUpdate,
      u = a.persistence,
      A = b.getRootHostContainer,
      y = b.popHostContext,
      w = b.getHostContext,
      x = b.popHostContainer,
      B = d.prepareToHydrateHostInstance,
      D = d.prepareToHydrateHostTextInstance,
      G = d.popHydrationState,
      H = void 0,
      E = void 0,
      t = void 0;
  a.mutation ? (H = function H() {}, E = function E(a, b, d) {
    (b.updateQueue = d) && c(b);
  }, t = function t(a, b, d, e) {
    d !== e && c(b);
  }) : u ? K("235") : K("236");
  return {
    completeWork: function completeWork(a, b, d) {
      var f = b.pendingProps;
      if (null === f) f = b.memoizedProps;else if (2147483647 !== b.expirationTime || 2147483647 === d) b.pendingProps = null;

      switch (b.tag) {
        case 1:
          return null;

        case 2:
          return xa(b), null;

        case 3:
          x(b);
          M(Q, b);
          M(O, b);
          f = b.stateNode;
          f.pendingContext && (f.context = f.pendingContext, f.pendingContext = null);
          if (null === a || null === a.child) G(b), b.effectTag &= -3;
          H(b);
          return null;

        case 5:
          y(b);
          d = A();
          var h = b.type;

          if (null !== a && null != b.stateNode) {
            var m = a.memoizedProps,
                u = b.stateNode,
                ca = w();
            u = l(u, h, m, f, d, ca);
            E(a, b, u, h, m, f, d);
            a.ref !== b.ref && (b.effectTag |= 128);
          } else {
            if (!f) return null === b.stateNode ? K("166") : void 0, null;
            a = w();
            if (G(b)) B(b, d, a) && c(b);else {
              a = e(h, f, d, a, b);

              a: for (m = b.child; null !== m;) {
                if (5 === m.tag || 6 === m.tag) k(a, m.stateNode);else if (4 !== m.tag && null !== m.child) {
                  m.child["return"] = m;
                  m = m.child;
                  continue;
                }
                if (m === b) break;

                for (; null === m.sibling;) {
                  if (null === m["return"] || m["return"] === b) break a;
                  m = m["return"];
                }

                m.sibling["return"] = m["return"];
                m = m.sibling;
              }

              g(a, h, f, d) && c(b);
              b.stateNode = a;
            }
            null !== b.ref && (b.effectTag |= 128);
          }

          return null;

        case 6:
          if (a && null != b.stateNode) t(a, b, a.memoizedProps, f);else {
            if ("string" !== typeof f) return null === b.stateNode ? K("166") : void 0, null;
            a = A();
            d = w();
            G(b) ? D(b) && c(b) : b.stateNode = p(f, a, d, b);
          }
          return null;

        case 7:
          (f = b.memoizedProps) ? void 0 : K("165");
          b.tag = 8;
          h = [];

          a: for ((m = b.stateNode) && (m["return"] = b); null !== m;) {
            if (5 === m.tag || 6 === m.tag || 4 === m.tag) K("247");else if (9 === m.tag) h.push(m.type);else if (null !== m.child) {
              m.child["return"] = m;
              m = m.child;
              continue;
            }

            for (; null === m.sibling;) {
              if (null === m["return"] || m["return"] === b) break a;
              m = m["return"];
            }

            m.sibling["return"] = m["return"];
            m = m.sibling;
          }

          m = f.handler;
          f = m(f.props, h);
          b.child = ub(b, null !== a ? a.child : null, f, d);
          return b.child;

        case 8:
          return b.tag = 7, null;

        case 9:
          return null;

        case 10:
          return null;

        case 4:
          return x(b), H(b), null;

        case 0:
          K("167");

        default:
          K("156");
      }
    }
  };
}

function yb(a, b) {
  function d(a) {
    var c = a.ref;
    if (null !== c) try {
      c(null);
    } catch (h) {
      b(a, h);
    }
  }

  function c(a) {
    "function" === typeof Ta && Ta(a);

    switch (a.tag) {
      case 2:
        d(a);
        var c = a.stateNode;
        if ("function" === typeof c.componentWillUnmount) try {
          c.props = a.memoizedProps, c.state = a.memoizedState, c.componentWillUnmount();
        } catch (h) {
          b(a, h);
        }
        break;

      case 5:
        d(a);
        break;

      case 7:
        e(a.stateNode);
        break;

      case 4:
        l && k(a);
    }
  }

  function e(b) {
    for (var a = b;;) {
      if (c(a), null === a.child || l && 4 === a.tag) {
        if (a === b) break;

        for (; null === a.sibling;) {
          if (null === a["return"] || a["return"] === b) return;
          a = a["return"];
        }

        a.sibling["return"] = a["return"];
        a = a.sibling;
      } else a.child["return"] = a, a = a.child;
    }
  }

  function p(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
  }

  function k(a) {
    for (var b = a, d = !1, g = void 0, l = void 0;;) {
      if (!d) {
        d = b["return"];

        a: for (;;) {
          null === d ? K("160") : void 0;

          switch (d.tag) {
            case 5:
              g = d.stateNode;
              l = !1;
              break a;

            case 3:
              g = d.stateNode.containerInfo;
              l = !0;
              break a;

            case 4:
              g = d.stateNode.containerInfo;
              l = !0;
              break a;
          }

          d = d["return"];
        }

        d = !0;
      }

      if (5 === b.tag || 6 === b.tag) e(b), l ? E(g, b.stateNode) : H(g, b.stateNode);else if (4 === b.tag ? g = b.stateNode.containerInfo : c(b), null !== b.child) {
        b.child["return"] = b;
        b = b.child;
        continue;
      }
      if (b === a) break;

      for (; null === b.sibling;) {
        if (null === b["return"] || b["return"] === a) return;
        b = b["return"];
        4 === b.tag && (d = !1);
      }

      b.sibling["return"] = b["return"];
      b = b.sibling;
    }
  }

  var g = a.getPublicInstance,
      l = a.mutation;
  a = a.persistence;
  l || (a ? K("235") : K("236"));
  var u = l.commitMount,
      A = l.commitUpdate,
      y = l.resetTextContent,
      w = l.commitTextUpdate,
      x = l.appendChild,
      B = l.appendChildToContainer,
      D = l.insertBefore,
      G = l.insertInContainerBefore,
      H = l.removeChild,
      E = l.removeChildFromContainer;
  return {
    commitResetTextContent: function commitResetTextContent(b) {
      y(b.stateNode);
    },
    commitPlacement: function commitPlacement(b) {
      a: {
        for (var a = b["return"]; null !== a;) {
          if (p(a)) {
            var c = a;
            break a;
          }

          a = a["return"];
        }

        K("160");
        c = void 0;
      }

      var d = a = void 0;

      switch (c.tag) {
        case 5:
          a = c.stateNode;
          d = !1;
          break;

        case 3:
          a = c.stateNode.containerInfo;
          d = !0;
          break;

        case 4:
          a = c.stateNode.containerInfo;
          d = !0;
          break;

        default:
          K("161");
      }

      c.effectTag & 16 && (y(a), c.effectTag &= -17);

      a: b: for (c = b;;) {
        for (; null === c.sibling;) {
          if (null === c["return"] || p(c["return"])) {
            c = null;
            break a;
          }

          c = c["return"];
        }

        c.sibling["return"] = c["return"];

        for (c = c.sibling; 5 !== c.tag && 6 !== c.tag;) {
          if (c.effectTag & 2) continue b;
          if (null === c.child || 4 === c.tag) continue b;else c.child["return"] = c, c = c.child;
        }

        if (!(c.effectTag & 2)) {
          c = c.stateNode;
          break a;
        }
      }

      for (var e = b;;) {
        if (5 === e.tag || 6 === e.tag) c ? d ? G(a, e.stateNode, c) : D(a, e.stateNode, c) : d ? B(a, e.stateNode) : x(a, e.stateNode);else if (4 !== e.tag && null !== e.child) {
          e.child["return"] = e;
          e = e.child;
          continue;
        }
        if (e === b) break;

        for (; null === e.sibling;) {
          if (null === e["return"] || e["return"] === b) return;
          e = e["return"];
        }

        e.sibling["return"] = e["return"];
        e = e.sibling;
      }
    },
    commitDeletion: function commitDeletion(b) {
      k(b);
      b["return"] = null;
      b.child = null;
      b.alternate && (b.alternate.child = null, b.alternate["return"] = null);
    },
    commitWork: function commitWork(b, a) {
      switch (a.tag) {
        case 2:
          break;

        case 5:
          var c = a.stateNode;

          if (null != c) {
            var d = a.memoizedProps;
            b = null !== b ? b.memoizedProps : d;
            var e = a.type,
                f = a.updateQueue;
            a.updateQueue = null;
            null !== f && A(c, f, e, b, d, a);
          }

          break;

        case 6:
          null === a.stateNode ? K("162") : void 0;
          c = a.memoizedProps;
          w(a.stateNode, null !== b ? b.memoizedProps : c, c);
          break;

        case 3:
          break;

        default:
          K("163");
      }
    },
    commitLifeCycles: function commitLifeCycles(b, a) {
      switch (a.tag) {
        case 2:
          var c = a.stateNode;
          if (a.effectTag & 4) if (null === b) c.props = a.memoizedProps, c.state = a.memoizedState, c.componentDidMount();else {
            var d = b.memoizedProps;
            b = b.memoizedState;
            c.props = a.memoizedProps;
            c.state = a.memoizedState;
            c.componentDidUpdate(d, b);
          }
          a = a.updateQueue;
          null !== a && hb(a, c);
          break;

        case 3:
          c = a.updateQueue;
          null !== c && hb(c, null !== a.child ? a.child.stateNode : null);
          break;

        case 5:
          c = a.stateNode;
          null === b && a.effectTag & 4 && u(c, a.type, a.memoizedProps, a);
          break;

        case 6:
          break;

        case 4:
          break;

        default:
          K("163");
      }
    },
    commitAttachRef: function commitAttachRef(a) {
      var b = a.ref;

      if (null !== b) {
        var c = a.stateNode;

        switch (a.tag) {
          case 5:
            b(g(c));
            break;

          default:
            b(c);
        }
      }
    },
    commitDetachRef: function commitDetachRef(a) {
      a = a.ref;
      null !== a && a(null);
    }
  };
}

var zb = {};

function Ab(a) {
  function b(a) {
    a === zb ? K("174") : void 0;
    return a;
  }

  var d = a.getChildHostContext,
      c = a.getRootHostContext,
      e = {
    current: zb
  },
      p = {
    current: zb
  },
      k = {
    current: zb
  };
  return {
    getHostContext: function getHostContext() {
      return b(e.current);
    },
    getRootHostContainer: function getRootHostContainer() {
      return b(k.current);
    },
    popHostContainer: function popHostContainer(a) {
      M(e, a);
      M(p, a);
      M(k, a);
    },
    popHostContext: function popHostContext(a) {
      p.current === a && (M(e, a), M(p, a));
    },
    pushHostContainer: function pushHostContainer(a, b) {
      N(k, b, a);
      b = c(b);
      N(p, a, a);
      N(e, b, a);
    },
    pushHostContext: function pushHostContext(a) {
      var c = b(k.current),
          g = b(e.current);
      c = d(g, a.type, c);
      g !== c && (N(p, a, a), N(e, c, a));
    },
    resetHostContainer: function resetHostContainer() {
      e.current = zb;
      k.current = zb;
    }
  };
}

function Bb(a) {
  function b(a, b) {
    var c = new X(5, null, 0);
    c.type = "DELETED";
    c.stateNode = b;
    c["return"] = a;
    c.effectTag = 8;
    null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
  }

  function d(a, b) {
    switch (a.tag) {
      case 5:
        return b = p(b, a.type, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;

      case 6:
        return b = k(b, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;

      default:
        return !1;
    }
  }

  function c(a) {
    for (a = a["return"]; null !== a && 5 !== a.tag && 3 !== a.tag;) {
      a = a["return"];
    }

    y = a;
  }

  var e = a.shouldSetTextContent;
  a = a.hydration;
  if (!a) return {
    enterHydrationState: function enterHydrationState() {
      return !1;
    },
    resetHydrationState: function resetHydrationState() {},
    tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
    prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
      K("175");
    },
    prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
      K("176");
    },
    popHydrationState: function popHydrationState() {
      return !1;
    }
  };
  var p = a.canHydrateInstance,
      k = a.canHydrateTextInstance,
      g = a.getNextHydratableSibling,
      l = a.getFirstHydratableChild,
      u = a.hydrateInstance,
      A = a.hydrateTextInstance,
      y = null,
      w = null,
      x = !1;
  return {
    enterHydrationState: function enterHydrationState(a) {
      w = l(a.stateNode.containerInfo);
      y = a;
      return x = !0;
    },
    resetHydrationState: function resetHydrationState() {
      w = y = null;
      x = !1;
    },
    tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(a) {
      if (x) {
        var c = w;

        if (c) {
          if (!d(a, c)) {
            c = g(c);

            if (!c || !d(a, c)) {
              a.effectTag |= 2;
              x = !1;
              y = a;
              return;
            }

            b(y, w);
          }

          y = a;
          w = l(c);
        } else a.effectTag |= 2, x = !1, y = a;
      }
    },
    prepareToHydrateHostInstance: function prepareToHydrateHostInstance(a, b, c) {
      b = u(a.stateNode, a.type, a.memoizedProps, b, c, a);
      a.updateQueue = b;
      return null !== b ? !0 : !1;
    },
    prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(a) {
      return A(a.stateNode, a.memoizedProps, a);
    },
    popHydrationState: function popHydrationState(a) {
      if (a !== y) return !1;
      if (!x) return c(a), x = !0, !1;
      var d = a.type;
      if (5 !== a.tag || "head" !== d && "body" !== d && !e(d, a.memoizedProps)) for (d = w; d;) {
        b(a, d), d = g(d);
      }
      c(a);
      w = y ? g(a.stateNode) : null;
      return !0;
    }
  };
}

function Cb(a) {
  function b(a) {
    Ja = S = !0;
    var b = a.stateNode;
    b.current === a ? K("177") : void 0;
    b.isReadyForCommit = !1;
    ia.current = null;
    if (1 < a.effectTag) {
      if (null !== a.lastEffect) {
        a.lastEffect.nextEffect = a;
        var c = a.firstEffect;
      } else c = a;
    } else c = a.firstEffect;
    fc();

    for (v = c; null !== v;) {
      var d = !1,
          e = void 0;

      try {
        for (; null !== v;) {
          var f = v.effectTag;
          f & 16 && gc(v);

          if (f & 128) {
            var ea = v.alternate;
            null !== ea && hc(ea);
          }

          switch (f & -242) {
            case 2:
              Eb(v);
              v.effectTag &= -3;
              break;

            case 6:
              Eb(v);
              v.effectTag &= -3;
              Fb(v.alternate, v);
              break;

            case 4:
              Fb(v.alternate, v);
              break;

            case 8:
              Za = !0, ic(v), Za = !1;
          }

          v = v.nextEffect;
        }
      } catch ($a) {
        d = !0, e = $a;
      }

      d && (null === v ? K("178") : void 0, g(v, e), null !== v && (v = v.nextEffect));
    }

    jc();
    b.current = a;

    for (v = c; null !== v;) {
      c = !1;
      d = void 0;

      try {
        for (; null !== v;) {
          var k = v.effectTag;
          k & 36 && kc(v.alternate, v);
          k & 128 && lc(v);
          if (k & 64) switch (e = v, f = void 0, null !== J && (f = J.get(e), J["delete"](e), null == f && null !== e.alternate && (e = e.alternate, f = J.get(e), J["delete"](e))), null == f ? K("184") : void 0, e.tag) {
            case 2:
              e.stateNode.componentDidCatch(f.error, {
                componentStack: f.componentStack
              });
              break;

            case 3:
              null === P && (P = f.error);
              break;

            default:
              K("157");
          }
          var h = v.nextEffect;
          v.nextEffect = null;
          v = h;
        }
      } catch ($a) {
        c = !0, d = $a;
      }

      c && (null === v ? K("178") : void 0, g(v, d), null !== v && (v = v.nextEffect));
    }

    S = Ja = !1;
    "function" === typeof Sa && Sa(a.stateNode);
    R && (R.forEach(B), R = null);
    null !== P && (a = P, P = null, ca(a));
    b = b.current.expirationTime;
    0 === b && (Z = J = null);
    return b;
  }

  function d(a) {
    for (;;) {
      var b = mc(a.alternate, a, C),
          c = a["return"],
          d = a.sibling;
      var e = a;

      if (2147483647 === C || 2147483647 !== e.expirationTime) {
        if (2 !== e.tag && 3 !== e.tag) var f = 0;else f = e.updateQueue, f = null === f ? 0 : f.expirationTime;

        for (var g = e.child; null !== g;) {
          0 !== g.expirationTime && (0 === f || f > g.expirationTime) && (f = g.expirationTime), g = g.sibling;
        }

        e.expirationTime = f;
      }

      if (null !== b) return b;
      null !== c && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));
      if (null !== d) return d;
      if (null !== c) a = c;else {
        a.stateNode.isReadyForCommit = !0;
        break;
      }
    }

    return null;
  }

  function c(a) {
    var b = Zb(a.alternate, a, C);
    null === b && (b = d(a));
    ia.current = null;
    return b;
  }

  function e(a) {
    var b = nc(a.alternate, a, C);
    null === b && (b = d(a));
    ia.current = null;
    return b;
  }

  function p(a) {
    if (null !== J) {
      if (!(0 === C || C > a)) if (C <= ab) for (; null !== z;) {
        z = l(z) ? e(z) : c(z);
      } else for (; null !== z && !h();) {
        z = l(z) ? e(z) : c(z);
      }
    } else if (!(0 === C || C > a)) if (C <= ab) for (; null !== z;) {
      z = c(z);
    } else for (; null !== z && !h();) {
      z = c(z);
    }
  }

  function k(a, b) {
    S ? K("243") : void 0;
    S = !0;
    a.isReadyForCommit = !1;

    if (a !== aa || b !== C || null === z) {
      for (; -1 < L;) {
        sa[L] = null, L--;
      }

      ta = F;
      O.current = F;
      Q.current = !1;
      Yb();
      aa = a;
      C = b;
      z = Ca(aa.current, null, b);
    }

    var c = !1,
        d = null;

    try {
      p(b);
    } catch (Ya) {
      c = !0, d = Ya;
    }

    for (; c;) {
      if (qa) {
        P = d;
        break;
      }

      var f = z;
      if (null === f) qa = !0;else {
        var k = g(f, d);
        null === k ? K("183") : void 0;

        if (!qa) {
          try {
            c = k;
            d = b;

            for (k = c; null !== f;) {
              switch (f.tag) {
                case 2:
                  xa(f);
                  break;

                case 5:
                  Xb(f);
                  break;

                case 3:
                  m(f);
                  break;

                case 4:
                  m(f);
              }

              if (f === k || f.alternate === k) break;
              f = f["return"];
            }

            z = e(c);
            p(d);
          } catch (Ya) {
            c = !0;
            d = Ya;
            continue;
          }

          break;
        }
      }
    }

    b = P;
    qa = S = !1;
    P = null;
    null !== b && ca(b);
    return a.isReadyForCommit ? a.current.alternate : null;
  }

  function g(a, b) {
    var c = ia.current = null,
        d = !1,
        e = !1,
        f = null;
    if (3 === a.tag) c = a, u(a) && (qa = !0);else for (var g = a["return"]; null !== g && null === c;) {
      2 === g.tag ? "function" === typeof g.stateNode.componentDidCatch && (d = !0, f = ja(g), c = g, e = !0) : 3 === g.tag && (c = g);

      if (u(g)) {
        if (Za || null !== R && (R.has(g) || null !== g.alternate && R.has(g.alternate))) return null;
        c = null;
        e = !1;
      }

      g = g["return"];
    }

    if (null !== c) {
      null === Z && (Z = new Set());
      Z.add(c);
      var k = "";
      g = a;

      do {
        a: switch (g.tag) {
          case 0:
          case 1:
          case 2:
          case 5:
            var h = g._debugOwner,
                l = g._debugSource;
            var m = ja(g);
            var ea = null;
            h && (ea = ja(h));
            h = l;
            m = "\n    in " + (m || "Unknown") + (h ? " (at " + h.fileName.replace(/^.*[\\\/]/, "") + ":" + h.lineNumber + ")" : ea ? " (created by " + ea + ")" : "");
            break a;

          default:
            m = "";
        }

        k += m;
        g = g["return"];
      } while (g);

      g = k;
      a = ja(a);
      null === J && (J = new Map());
      b = {
        componentName: a,
        componentStack: g,
        error: b,
        errorBoundary: d ? c.stateNode : null,
        errorBoundaryFound: d,
        errorBoundaryName: f,
        willRetry: e
      };
      J.set(c, b);

      try {
        var p = b.error;
        p && p.suppressReactErrorLogging || console.error(p);
      } catch (bb) {
        bb && bb.suppressReactErrorLogging || console.error(bb);
      }

      Ja ? (null === R && (R = new Set()), R.add(c)) : B(c);
      return c;
    }

    null === P && (P = b);
    return null;
  }

  function l(a) {
    return null !== J && (J.has(a) || null !== a.alternate && J.has(a.alternate));
  }

  function u(a) {
    return null !== Z && (Z.has(a) || null !== a.alternate && Z.has(a.alternate));
  }

  function A() {
    return 20 * (((D() + 100) / 20 | 0) + 1);
  }

  function y(a) {
    return 0 !== T ? T : S ? Ja ? 1 : C : !oc || a.internalContextTag & 1 ? A() : 1;
  }

  function w(a, b) {
    return x(a, b, !1);
  }

  function x(a, b) {
    for (; null !== a;) {
      if (0 === a.expirationTime || a.expirationTime > b) a.expirationTime = b;
      null !== a.alternate && (0 === a.alternate.expirationTime || a.alternate.expirationTime > b) && (a.alternate.expirationTime = b);
      if (null === a["return"]) if (3 === a.tag) {
        var c = a.stateNode;
        !S && c === aa && b < C && (z = aa = null, C = 0);
        var d = c,
            e = b;
        Ka > pc && K("185");
        if (null === d.nextScheduledRoot) d.remainingExpirationTime = e, null === I ? (ba = I = d, d.nextScheduledRoot = d) : (I = I.nextScheduledRoot = d, I.nextScheduledRoot = ba);else {
          var g = d.remainingExpirationTime;
          if (0 === g || e < g) d.remainingExpirationTime = e;
        }
        fa || (U ? La && (V = d, W = 1, f(V, W)) : 1 === e ? t(1, null) : G(e));
        !S && c === aa && b < C && (z = aa = null, C = 0);
      } else break;
      a = a["return"];
    }
  }

  function B(a) {
    x(a, 1, !0);
  }

  function D() {
    return ab = ((cb() - Gb) / 10 | 0) + 2;
  }

  function G(a) {
    if (0 !== Ma) {
      if (a > Ma) return;
      qc(db);
    }

    var b = cb() - Gb;
    Ma = a;
    db = rc(E, {
      timeout: 10 * (a - 2) - b
    });
  }

  function H() {
    var a = 0,
        b = null;
    if (null !== I) for (var c = I, d = ba; null !== d;) {
      var e = d.remainingExpirationTime;

      if (0 === e) {
        null === c || null === I ? K("244") : void 0;

        if (d === d.nextScheduledRoot) {
          ba = I = d.nextScheduledRoot = null;
          break;
        } else if (d === ba) ba = e = d.nextScheduledRoot, I.nextScheduledRoot = e, d.nextScheduledRoot = null;else if (d === I) {
          I = c;
          I.nextScheduledRoot = ba;
          d.nextScheduledRoot = null;
          break;
        } else c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;

        d = c.nextScheduledRoot;
      } else {
        if (0 === a || e < a) a = e, b = d;
        if (d === I) break;
        c = d;
        d = d.nextScheduledRoot;
      }
    }
    c = V;
    null !== c && c === b ? Ka++ : Ka = 0;
    V = b;
    W = a;
  }

  function E(a) {
    t(0, a);
  }

  function t(a, b) {
    ra = b;

    for (H(); null !== V && 0 !== W && (0 === a || W <= a) && !eb;) {
      f(V, W), H();
    }

    null !== ra && (Ma = 0, db = -1);
    0 !== W && G(W);
    ra = null;
    eb = !1;
    Ka = 0;
    if (Na) throw a = fb, fb = null, Na = !1, a;
  }

  function f(a, c) {
    fa ? K("245") : void 0;
    fa = !0;

    if (c <= D()) {
      var d = a.finishedWork;
      null !== d ? (a.finishedWork = null, a.remainingExpirationTime = b(d)) : (a.finishedWork = null, d = k(a, c), null !== d && (a.remainingExpirationTime = b(d)));
    } else d = a.finishedWork, null !== d ? (a.finishedWork = null, a.remainingExpirationTime = b(d)) : (a.finishedWork = null, d = k(a, c), null !== d && (h() ? a.finishedWork = d : a.remainingExpirationTime = b(d)));

    fa = !1;
  }

  function h() {
    return null === ra || ra.timeRemaining() > sc ? !1 : eb = !0;
  }

  function ca(a) {
    null === V ? K("246") : void 0;
    V.remainingExpirationTime = 0;
    Na || (Na = !0, fb = a);
  }

  var r = Ab(a),
      q = Bb(a),
      m = r.popHostContainer,
      Xb = r.popHostContext,
      Yb = r.resetHostContainer,
      Db = wb(a, r, q, w, y),
      Zb = Db.beginWork,
      nc = Db.beginFailedWork,
      mc = xb(a, r, q).completeWork;
  r = yb(a, g);
  var gc = r.commitResetTextContent,
      Eb = r.commitPlacement,
      ic = r.commitDeletion,
      Fb = r.commitWork,
      kc = r.commitLifeCycles,
      lc = r.commitAttachRef,
      hc = r.commitDetachRef,
      cb = a.now,
      rc = a.scheduleDeferredCallback,
      qc = a.cancelDeferredCallback,
      oc = a.useSyncScheduling,
      fc = a.prepareForCommit,
      jc = a.resetAfterCommit,
      Gb = cb(),
      ab = 2,
      T = 0,
      S = !1,
      z = null,
      aa = null,
      C = 0,
      v = null,
      J = null,
      Z = null,
      R = null,
      P = null,
      qa = !1,
      Ja = !1,
      Za = !1,
      ba = null,
      I = null,
      Ma = 0,
      db = -1,
      fa = !1,
      V = null,
      W = 0,
      eb = !1,
      Na = !1,
      fb = null,
      ra = null,
      U = !1,
      La = !1,
      pc = 1E3,
      Ka = 0,
      sc = 1;
  return {
    computeAsyncExpiration: A,
    computeExpirationForFiber: y,
    scheduleWork: w,
    batchedUpdates: function batchedUpdates(a, b) {
      var c = U;
      U = !0;

      try {
        return a(b);
      } finally {
        (U = c) || fa || t(1, null);
      }
    },
    unbatchedUpdates: function unbatchedUpdates(a) {
      if (U && !La) {
        La = !0;

        try {
          return a();
        } finally {
          La = !1;
        }
      }

      return a();
    },
    flushSync: function flushSync(a) {
      var b = U;
      U = !0;

      try {
        a: {
          var c = T;
          T = 1;

          try {
            var d = a();
            break a;
          } finally {
            T = c;
          }

          d = void 0;
        }

        return d;
      } finally {
        U = b, fa ? K("187") : void 0, t(1, null);
      }
    },
    deferredUpdates: function deferredUpdates(a) {
      var b = T;
      T = A();

      try {
        return a();
      } finally {
        T = b;
      }
    }
  };
}

function Hb(a) {
  function b(a) {
    a = oa(a);
    return null === a ? null : a.stateNode;
  }

  var d = a.getPublicInstance;
  a = Cb(a);
  var c = a.computeAsyncExpiration,
      e = a.computeExpirationForFiber,
      p = a.scheduleWork;
  return {
    createContainer: function createContainer(a, b) {
      var c = new X(3, null, 0);
      a = {
        current: c,
        containerInfo: a,
        pendingChildren: null,
        remainingExpirationTime: 0,
        isReadyForCommit: !1,
        finishedWork: null,
        context: null,
        pendingContext: null,
        hydrate: b,
        nextScheduledRoot: null
      };
      return c.stateNode = a;
    },
    updateContainer: function updateContainer(a, b, d, u) {
      var g = b.current;

      if (d) {
        d = d._reactInternalFiber;
        var k;

        b: {
          2 === ka(d) && 2 === d.tag ? void 0 : K("170");

          for (k = d; 3 !== k.tag;) {
            if (va(k)) {
              k = k.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

            (k = k["return"]) ? void 0 : K("171");
          }

          k = k.stateNode.context;
        }

        d = va(d) ? za(d, k) : k;
      } else d = F;

      null === b.context ? b.context = d : b.pendingContext = d;
      b = u;
      b = void 0 === b ? null : b;
      u = null != a && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent ? c() : e(g);
      Wa(g, {
        expirationTime: u,
        partialState: {
          element: a
        },
        callback: b,
        isReplace: !1,
        isForced: !1,
        nextCallback: null,
        next: null
      });
      p(g, u);
    },
    batchedUpdates: a.batchedUpdates,
    unbatchedUpdates: a.unbatchedUpdates,
    deferredUpdates: a.deferredUpdates,
    flushSync: a.flushSync,
    getPublicRootInstance: function getPublicRootInstance(a) {
      a = a.current;
      if (!a.child) return null;

      switch (a.child.tag) {
        case 5:
          return d(a.child.stateNode);

        default:
          return a.child.stateNode;
      }
    },
    findHostInstance: b,
    findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(a) {
      a = pa(a);
      return null === a ? null : a.stateNode;
    },
    injectIntoDevTools: function injectIntoDevTools(a) {
      var c = a.findFiberByHostInstance;
      return Ra(n({}, a, {
        findHostInstanceByFiber: function findHostInstanceByFiber(a) {
          return b(a);
        },
        findFiberByHostInstance: function findFiberByHostInstance(a) {
          return c ? c(a) : null;
        }
      }));
    }
  };
}

var Ib = Object.freeze({
  default: Hb
}),
    Jb = Ib && Hb || Ib,
    Kb = Jb["default"] ? Jb["default"] : Jb,
    Lb = null,
    Mb = null;

function Nb(a) {
  if (a = null(a)) {
    K("194");
    var b = null(a.stateNode);
    null.restoreControlledState(a.stateNode, a.type, b);
  }
}

var Ob = !1,
    Pb = function () {
  function a(a, d) {
    for (var b = 0; b < d.length; b++) {
      var e = d[b];
      e.enumerable = e.enumerable || !1;
      e.configurable = !0;
      "value" in e && (e.writable = !0);
      Object.defineProperty(a, e.key, e);
    }
  }

  return function (b, d, c) {
    d && a(b.prototype, d);
    c && a(b, c);
    return b;
  };
}(),
    Qb = {};

function Rb(a) {
  switch (a.tag) {
    case "INSTANCE":
      var b = a.rootContainerInstance.createNodeMock;
      return b({
        type: a.type,
        props: a.props
      });

    default:
      return a;
  }
}

function Sb(a, b) {
  var d = a.children.indexOf(b);
  -1 !== d && a.children.splice(d, 1);
  a.children.push(b);
}

function Tb(a, b, d) {
  var c = a.children.indexOf(b);
  -1 !== c && a.children.splice(c, 1);
  d = a.children.indexOf(d);
  a.children.splice(d, 0, b);
}

function Ub(a, b) {
  b = a.children.indexOf(b);
  a.children.splice(b, 1);
}

var Vb = Kb({
  getRootHostContext: function getRootHostContext() {
    return F;
  },
  getChildHostContext: function getChildHostContext() {
    return F;
  },
  prepareForCommit: function prepareForCommit() {},
  resetAfterCommit: function resetAfterCommit() {},
  createInstance: function createInstance(a, b, d) {
    return {
      type: a,
      props: b,
      children: [],
      rootContainerInstance: d,
      tag: "INSTANCE"
    };
  },
  appendInitialChild: function appendInitialChild(a, b) {
    var d = a.children.indexOf(b);
    -1 !== d && a.children.splice(d, 1);
    a.children.push(b);
  },
  finalizeInitialChildren: function finalizeInitialChildren() {
    return !1;
  },
  prepareUpdate: function prepareUpdate() {
    return Qb;
  },
  shouldSetTextContent: function shouldSetTextContent() {
    return !1;
  },
  shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
    return !1;
  },
  createTextInstance: function createTextInstance(a) {
    return {
      text: a,
      tag: "TEXT"
    };
  },
  scheduleDeferredCallback: function scheduleDeferredCallback(a) {
    return setTimeout(a, 0, {
      timeRemaining: Infinity
    });
  },
  cancelDeferredCallback: function cancelDeferredCallback(a) {
    clearTimeout(a);
  },
  useSyncScheduling: !0,
  getPublicInstance: Rb,
  now: function now() {
    return 0;
  },
  mutation: {
    commitUpdate: function commitUpdate(a, b, d, c, e) {
      a.type = d;
      a.props = e;
    },
    commitMount: function commitMount() {},
    commitTextUpdate: function commitTextUpdate(a, b, d) {
      a.text = d;
    },
    resetTextContent: function resetTextContent() {},
    appendChild: Sb,
    appendChildToContainer: Sb,
    insertBefore: Tb,
    insertInContainerBefore: Tb,
    removeChild: Ub,
    removeChildFromContainer: Ub
  }
}),
    Wb = {
  createNodeMock: function createNodeMock() {
    return null;
  }
};

function $b(a) {
  switch (a.tag) {
    case "TEXT":
      return a.text;

    case "INSTANCE":
      var b = a.props,
          d = ["children"],
          c = {},
          e;

      for (e in b) {
        0 <= d.indexOf(e) || Object.prototype.hasOwnProperty.call(b, e) && (c[e] = b[e]);
      }

      b = null;
      a.children && a.children.length && (b = a.children.map($b));
      a = {
        type: a.type,
        props: c,
        children: b
      };
      Object.defineProperty(a, "$$typeof", {
        value: Symbol["for"]("react.test.json")
      });
      return a;

    default:
      throw Error("Unexpected node type in toJSON: " + a.tag);
  }
}

function ac(a) {
  for (var b = []; null != a;) {
    b.push(a), a = a.sibling;
  }

  b = b.map(bc);
  return b.length ? b : null;
}

function bc(a) {
  if (null == a) return null;

  switch (a.tag) {
    case 3:
      return bc(a.child);

    case 2:
      var b = a.type,
          d = n({}, a.memoizedProps),
          c = a.child;
      return {
        nodeType: "component",
        type: b,
        props: d,
        instance: a.stateNode,
        rendered: c && c.sibling ? ac(a.child) : bc(a.child)
      };

    case 1:
      return b = a.type, d = n({}, a.memoizedProps), c = a.child, {
        nodeType: "component",
        type: b,
        props: d,
        instance: null,
        rendered: c && c.sibling ? ac(a.child) : bc(a.child)
      };

    case 5:
      return {
        nodeType: "host",
        type: a.type,
        props: n({}, a.memoizedProps),
        instance: null,
        rendered: ac(a.child)
      };

    case 6:
      return a.stateNode.text;

    default:
      K("214", a.tag);
  }
}

var cc = new WeakMap();

function dc(a) {
  var b = cc.get(a);
  void 0 === b && null !== a.alternate && (b = cc.get(a.alternate));
  void 0 === b && (b = new ec(a), cc.set(a, b));
  return b;
}

var tc = new Set([1, 2, 5]),
    ec = function () {
  function a(b) {
    if (!(this instanceof a)) throw new TypeError("Cannot call a class as a function");
    tc.has(b.tag) ? void 0 : K("225", b.tag);
    this._fiber = b;
  }

  a.prototype._currentFiber = function () {
    var a = na(this._fiber);
    null === a ? K("224") : void 0;
    return a;
  };

  a.prototype.find = function (a) {
    return uc(this.findAll(a, {
      deep: !1
    }), "matching custom predicate: " + a.toString());
  };

  a.prototype.findByType = function (a) {
    return uc(this.findAllByType(a, {
      deep: !1
    }), 'with node type: "' + (a.displayName || a.name) + '"');
  };

  a.prototype.findByProps = function (a) {
    return uc(this.findAllByProps(a, {
      deep: !1
    }), "with props: " + JSON.stringify(a));
  };

  a.prototype.findAll = function (a) {
    return vc(this, a, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null);
  };

  a.prototype.findAllByType = function (a) {
    return vc(this, function (b) {
      return b.type === a;
    }, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null);
  };

  a.prototype.findAllByProps = function (a) {
    return vc(this, function (b) {
      var c;
      if (c = b.props) a: {
        for (var d in a) {
          if (b.props[d] !== a[d]) {
            c = !1;
            break a;
          }
        }

        c = !0;
      }
      return c;
    }, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null);
  };

  Pb(a, [{
    key: "instance",
    get: function get() {
      return 5 === this._fiber.tag ? Rb(this._fiber.stateNode) : this._fiber.stateNode;
    }
  }, {
    key: "type",
    get: function get() {
      return this._fiber.type;
    }
  }, {
    key: "props",
    get: function get() {
      return this._currentFiber().memoizedProps;
    }
  }, {
    key: "parent",
    get: function get() {
      var a = this._fiber["return"];
      return null === a || 3 === a.tag ? null : dc(a);
    }
  }, {
    key: "children",
    get: function get() {
      var a = [],
          d = this._currentFiber(),
          c = d;

      if (null === c.child) return a;
      c.child["return"] = c;
      c = c.child;

      a: for (;;) {
        var e = !1;

        switch (c.tag) {
          case 1:
          case 2:
          case 5:
            a.push(dc(c));
            break;

          case 6:
            a.push("" + c.memoizedProps);
            break;

          case 10:
            e = !0;
            break;

          default:
            K("226", c.tag);
        }

        if (e && null !== c.child) c.child["return"] = c, c = c.child;else {
          for (; null === c.sibling;) {
            if (c["return"] === d) break a;
            c = c["return"];
          }

          c.sibling["return"] = c["return"];
          c = c.sibling;
        }
      }

      return a;
    }
  }]);
  return a;
}();

function vc(a, b, d) {
  var c = d ? d.deep : !0,
      e = [];
  if (b(a) && (e.push(a), !c)) return e;
  c = !0;
  var p = !1,
      k = void 0;

  try {
    for (var g = a.children[Symbol.iterator](), l; !(c = (l = g.next()).done); c = !0) {
      var u = l.value;
      "string" !== typeof u && e.push.apply(e, vc(u, b, d));
    }
  } catch (A) {
    p = !0, k = A;
  } finally {
    try {
      if (!c && g["return"]) g["return"]();
    } finally {
      if (p) throw k;
    }
  }

  return e;
}

function uc(a, b) {
  if (1 === a.length) return a[0];
  throw Error((0 === a.length ? "No instances found " : "Expected 1 but found " + a.length + " instances ") + b);
}

var wc = {
  create: function create(a, b) {
    var d = Wb.createNodeMock;
    b && "function" === typeof b.createNodeMock && (d = b.createNodeMock);
    var c = {
      children: [],
      createNodeMock: d,
      tag: "CONTAINER"
    },
        e = Vb.createContainer(c, !1);
    null == e ? K("215") : void 0;
    Vb.updateContainer(a, e, null, null);
    a = {
      root: void 0,
      toJSON: function toJSON() {
        return null == e || null == e.current || null == c || 0 === c.children.length ? null : 1 === c.children.length ? $b(c.children[0]) : c.children.map($b);
      },
      toTree: function toTree() {
        return null == e || null == e.current ? null : bc(e.current);
      },
      update: function update(a) {
        null != e && null != e.current && Vb.updateContainer(a, e, null, null);
      },
      unmount: function unmount() {
        null != e && null != e.current && (Vb.updateContainer(null, e, null), e = c = null);
      },
      getInstance: function getInstance() {
        return null == e || null == e.current ? null : Vb.getPublicRootInstance(e);
      }
    };
    Object.defineProperty(a, "root", {
      configurable: !0,
      enumerable: !0,
      get: function get() {
        if (null === e || null === e.current.child) throw Error("Can't access .root on unmounted test renderer");
        return dc(e.current.child);
      }
    });
    return a;
  },
  unstable_batchedUpdates: function unstable_batchedUpdates(a, b) {
    if (Ob) return a(b);
    Ob = !0;

    try {
      return a(b);
    } finally {
      if (Ob = !1, Lb && (b = Lb, a = Mb, Mb = Lb = null, Nb(b), a)) for (b = 0; b < a.length; b++) {
        Nb(a[b]);
      }
    }
  }
},
    xc = Object.freeze({
  default: wc
}),
    yc = xc && wc || xc;
module.exports = yc["default"] ? yc["default"] : yc;

/***/ }),

/***/ "./node_modules/react-test-renderer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__("./node_modules/react-test-renderer/cjs/react-test-renderer.production.min.js");
} else {
  module.exports = __webpack_require__("./node_modules/react-test-renderer/cjs/react-test-renderer.development.js");
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.2.0
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    var _assign = __webpack_require__("./node_modules/object-assign/index.js");

    var emptyObject = __webpack_require__("./node_modules/fbjs/lib/emptyObject.js");

    var invariant = __webpack_require__("./node_modules/fbjs/lib/invariant.js");

    var warning = __webpack_require__("./node_modules/fbjs/lib/warning.js");

    var emptyFunction = __webpack_require__("./node_modules/fbjs/lib/emptyFunction.js");

    var checkPropTypes = __webpack_require__("./node_modules/prop-types/checkPropTypes.js"); // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.2.0'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
    var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
    var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable === 'undefined') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }
    /**
     * WARNING: DO NOT manually require this module.
     * This is a replacement for `invariant(...)` used by the error code system
     * and will _only_ be required by the corresponding babel pass.
     * It always throws.
     */

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function lowPriorityWarning() {};

    {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function lowPriorityWarning(condition, format) {
        if (format === undefined) {
          throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var constructor = publicInstance.constructor;
        var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;

        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }

        warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */


    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function isMounted(publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */


    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */


    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };

      var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function get() {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };

      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function PureComponent(props, context, updater) {
      // Duplicated from Component.
      this.props = props;
      this.context = context;
      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    function ComponentDummy() {}

    ComponentDummy.prototype = Component.prototype;
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    _assign(pureComponentPrototype, Component.prototype);

    pureComponentPrototype.isPureReactComponent = true;

    function AsyncComponent(props, context, updater) {
      // Duplicated from Component.
      this.props = props;
      this.context = context;
      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();
    asyncComponentPrototype.constructor = AsyncComponent; // Avoid an extra prototype jump for these methods.

    _assign(asyncComponentPrototype, Component.prototype);

    asyncComponentPrototype.unstable_isAsyncReactComponent = true;

    asyncComponentPrototype.render = function () {
      return this.props.children;
    };
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */


    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function warnAboutAccessingKey() {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function warnAboutAccessingRef() {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */


    var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allow us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */


    function createElement(type, config, children) {
      var propName; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      {
        if (key || ref) {
          if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }

            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */


    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */


    function cloneElement(element, config, children) {
      var propName; // Original props are copied

      var props = _assign({}, element.props); // Reserved names are extracted


      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        } // Remaining properties override existing props


        var defaultProps;

        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a valid component.
     * @final
     */


    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var ReactDebugCurrentFrame = {};
    {
      // Component that is being worked on
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var impl = ReactDebugCurrentFrame.getCurrentStack;

        if (impl) {
          return impl();
        }

        return null;
      };
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */


    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;

    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];

    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;

      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;

          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_CALL_TYPE:
              case REACT_RETURN_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }

        }
      }

      if (invokeCallback) {
        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child;
      var nextName;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(children);
          var step;
          var ii = 0;

          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */


    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      } // Implicit key determined by the index in the set


      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#react.children.foreach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */


    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);

      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }

        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';

      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }

      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#react.children.map
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */


    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#react.children.count
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */


    function countChildren(children, context) {
      return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#react.children.toarray
     */


    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
      return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#react.children.only
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */


    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
      return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
    };

    function getComponentName(fiber) {
      var type = fiber.type;

      if (typeof type === 'string') {
        return type;
      }

      if (typeof type === 'function') {
        return type.displayName || type.name;
      }

      return null;
    }
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */


    {
      var currentlyValidatingElement = null;
      var propTypesMisspellWarningShown = false;

      var getDisplayName = function getDisplayName(element) {
        if (element == null) {
          return '#empty';
        } else if (typeof element === 'string' || typeof element === 'number') {
          return '#text';
        } else if (typeof element.type === 'string') {
          return element.type;
        } else if (element.type === REACT_FRAGMENT_TYPE) {
          return 'React.Fragment';
        } else {
          return element.type.displayName || element.type.name || 'Unknown';
        }
      };

      var getStackAddendum = function getStackAddendum() {
        var stack = '';

        if (currentlyValidatingElement) {
          var name = getDisplayName(currentlyValidatingElement);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
        }

        stack += ReactDebugCurrentFrame.getStackAddendum() || '';
        return stack;
      };

      var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }

      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
      }

      currentlyValidatingElement = element;
      {
        warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
      }
      currentlyValidatingElement = null;
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      var componentClass = element.type;

      if (typeof componentClass !== 'function') {
        return;
      }

      var name = componentClass.displayName || componentClass.name;
      var propTypes = componentClass.propTypes;

      if (propTypes) {
        currentlyValidatingElement = element;
        checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
        currentlyValidatingElement = null;
      } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }

      if (typeof componentClass.getDefaultProps === 'function') {
        warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      currentlyValidatingElement = fragment;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          if (!VALID_FRAGMENT_PROPS.has(key)) {
            warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (fragment.ref !== null) {
        warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
      }

      currentlyValidatingElement = null;
    }

    function createElementWithValidation(type, props, children) {
      var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number'; // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += getStackAddendum() || '';
        warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
      }

      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type); // Legacy hook TODO: Warn if this is accessed

      validatedFactory.type = type;
      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }

      validatePropTypes(newElement);
      return newElement;
    }

    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },
      Component: Component,
      PureComponent: PureComponent,
      unstable_AsyncComponent: AsyncComponent,
      Fragment: REACT_FRAGMENT_TYPE,
      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,
      version: ReactVersion,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        ReactCurrentOwner: ReactCurrentOwner,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
      }
    };
    {
      _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }
    var React$2 = Object.freeze({
      default: React
    });
    var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var react = React$3['default'] ? React$3['default'] : React$3;
    module.exports = react;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/react/cjs/react.production.min.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var m = __webpack_require__("./node_modules/object-assign/index.js"),
    n = __webpack_require__("./node_modules/fbjs/lib/emptyObject.js"),
    p = __webpack_require__("./node_modules/fbjs/lib/emptyFunction.js"),
    q = "function" === typeof Symbol && Symbol["for"],
    r = q ? Symbol["for"]("react.element") : 60103,
    t = q ? Symbol["for"]("react.call") : 60104,
    u = q ? Symbol["for"]("react.return") : 60105,
    v = q ? Symbol["for"]("react.portal") : 60106,
    w = q ? Symbol["for"]("react.fragment") : 60107,
    x = "function" === typeof Symbol && Symbol.iterator;

function y(a) {
  for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
    e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
  }

  b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
  b.name = "Invariant Violation";
  b.framesToPop = 1;
  throw b;
}

var z = {
  isMounted: function isMounted() {
    return !1;
  },
  enqueueForceUpdate: function enqueueForceUpdate() {},
  enqueueReplaceState: function enqueueReplaceState() {},
  enqueueSetState: function enqueueSetState() {}
};

function A(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = n;
  this.updater = e || z;
}

A.prototype.isReactComponent = {};

A.prototype.setState = function (a, b) {
  "object" !== typeof a && "function" !== typeof a && null != a ? y("85") : void 0;
  this.updater.enqueueSetState(this, a, b, "setState");
};

A.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};

function B(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = n;
  this.updater = e || z;
}

function C() {}

C.prototype = A.prototype;
var D = B.prototype = new C();
D.constructor = B;
m(D, A.prototype);
D.isPureReactComponent = !0;

function E(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = n;
  this.updater = e || z;
}

var F = E.prototype = new C();
F.constructor = E;
m(F, A.prototype);
F.unstable_isAsyncReactComponent = !0;

F.render = function () {
  return this.props.children;
};

var G = {
  current: null
},
    H = Object.prototype.hasOwnProperty,
    I = {
  key: !0,
  ref: !0,
  __self: !0,
  __source: !0
};

function J(a, b, e) {
  var c,
      d = {},
      g = null,
      k = null;
  if (null != b) for (c in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
    H.call(b, c) && !I.hasOwnProperty(c) && (d[c] = b[c]);
  }
  var f = arguments.length - 2;
  if (1 === f) d.children = e;else if (1 < f) {
    for (var h = Array(f), l = 0; l < f; l++) {
      h[l] = arguments[l + 2];
    }

    d.children = h;
  }
  if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
    void 0 === d[c] && (d[c] = f[c]);
  }
  return {
    $$typeof: r,
    type: a,
    key: g,
    ref: k,
    props: d,
    _owner: G.current
  };
}

function K(a) {
  return "object" === typeof a && null !== a && a.$$typeof === r;
}

function escape(a) {
  var b = {
    "\x3d": "\x3d0",
    ":": "\x3d2"
  };
  return "$" + ("" + a).replace(/[=:]/g, function (a) {
    return b[a];
  });
}

var L = /\/+/g,
    M = [];

function N(a, b, e, c) {
  if (M.length) {
    var d = M.pop();
    d.result = a;
    d.keyPrefix = b;
    d.func = e;
    d.context = c;
    d.count = 0;
    return d;
  }

  return {
    result: a,
    keyPrefix: b,
    func: e,
    context: c,
    count: 0
  };
}

function O(a) {
  a.result = null;
  a.keyPrefix = null;
  a.func = null;
  a.context = null;
  a.count = 0;
  10 > M.length && M.push(a);
}

function P(a, b, e, c) {
  var d = typeof a;
  if ("undefined" === d || "boolean" === d) a = null;
  var g = !1;
  if (null === a) g = !0;else switch (d) {
    case "string":
    case "number":
      g = !0;
      break;

    case "object":
      switch (a.$$typeof) {
        case r:
        case t:
        case u:
        case v:
          g = !0;
      }

  }
  if (g) return e(c, a, "" === b ? "." + Q(a, 0) : b), 1;
  g = 0;
  b = "" === b ? "." : b + ":";
  if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {
    d = a[k];
    var f = b + Q(d, k);
    g += P(d, f, e, c);
  } else if (null === a || "undefined" === typeof a ? f = null : (f = x && a[x] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), k = 0; !(d = a.next()).done;) {
    d = d.value, f = b + Q(d, k++), g += P(d, f, e, c);
  } else "object" === d && (e = "" + a, y("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
  return g;
}

function Q(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
}

function R(a, b) {
  a.func.call(a.context, b, a.count++);
}

function S(a, b, e) {
  var c = a.result,
      d = a.keyPrefix;
  a = a.func.call(a.context, b, a.count++);
  Array.isArray(a) ? T(a, c, e, p.thatReturnsArgument) : null != a && (K(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(L, "$\x26/") + "/") + e, a = {
    $$typeof: r,
    type: a.type,
    key: b,
    ref: a.ref,
    props: a.props,
    _owner: a._owner
  }), c.push(a));
}

function T(a, b, e, c, d) {
  var g = "";
  null != e && (g = ("" + e).replace(L, "$\x26/") + "/");
  b = N(b, g, c, d);
  null == a || P(a, "", S, b);
  O(b);
}

var U = {
  Children: {
    map: function map(a, b, e) {
      if (null == a) return a;
      var c = [];
      T(a, c, null, b, e);
      return c;
    },
    forEach: function forEach(a, b, e) {
      if (null == a) return a;
      b = N(null, null, b, e);
      null == a || P(a, "", R, b);
      O(b);
    },
    count: function count(a) {
      return null == a ? 0 : P(a, "", p.thatReturnsNull, null);
    },
    toArray: function toArray(a) {
      var b = [];
      T(a, b, null, p.thatReturnsArgument);
      return b;
    },
    only: function only(a) {
      K(a) ? void 0 : y("143");
      return a;
    }
  },
  Component: A,
  PureComponent: B,
  unstable_AsyncComponent: E,
  Fragment: w,
  createElement: J,
  cloneElement: function cloneElement(a, b, e) {
    var c = m({}, a.props),
        d = a.key,
        g = a.ref,
        k = a._owner;

    if (null != b) {
      void 0 !== b.ref && (g = b.ref, k = G.current);
      void 0 !== b.key && (d = "" + b.key);
      if (a.type && a.type.defaultProps) var f = a.type.defaultProps;

      for (h in b) {
        H.call(b, h) && !I.hasOwnProperty(h) && (c[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
      }
    }

    var h = arguments.length - 2;
    if (1 === h) c.children = e;else if (1 < h) {
      f = Array(h);

      for (var l = 0; l < h; l++) {
        f[l] = arguments[l + 2];
      }

      c.children = f;
    }
    return {
      $$typeof: r,
      type: a.type,
      key: d,
      ref: g,
      props: c,
      _owner: k
    };
  },
  createFactory: function createFactory(a) {
    var b = J.bind(null, a);
    b.type = a;
    return b;
  },
  isValidElement: K,
  version: "16.2.0",
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: G,
    assign: m
  }
},
    V = Object.freeze({
  default: U
}),
    W = V && U || V;
module.exports = W["default"] ? W["default"] : W;

/***/ }),

/***/ "./node_modules/react/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__("./node_modules/react/cjs/react.production.min.js");
} else {
  module.exports = __webpack_require__("./node_modules/react/cjs/react.development.js");
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function (global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;

  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    } // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.


    return;
  } // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.


  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  runtime.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  runtime.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
}( // In sloppy mode, unbound `this` refers to the global object, fallback to
// Function constructor if we're in global strict mode. That is sadly a form
// of indirect eval which violates Content Security Policy.
function () {
  return this;
}() || Function("return this")());

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./src/engine/browser/hot-reload.tsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("./node_modules/@babel/polyfill/lib/index.js");

var React = _interopRequireWildcard(__webpack_require__("./node_modules/react/index.js"));

var _gameRender = __webpack_require__("./src/main/game-render.tsx");

var _render = __webpack_require__("./node_modules/@morleydev/pauper/render/jsx/render.js");

var _webAssetLoader = __webpack_require__("./node_modules/@morleydev/pauper/assets/web-asset-loader.service.js");

var _renderToCanvas = __webpack_require__("./node_modules/@morleydev/pauper/render/render-to-canvas.func.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var canvas = document.getElementById("render-target");

if (canvas == null) {
  throw new Error("Could not find #render-target");
}

var context = canvas.getContext("2d");

if (context == null) {
  throw new Error("Could not acquire 2d rendering context");
}

var element = document.getElementById("canvas-container");

if (element == null) {
  throw new Error("Could not find #canvas-container");
}

var assets = new _webAssetLoader.WebAssetLoader();
var renderer = new _render.ReactRenderer(React.createElement(_gameRender.Game, null));
requestAnimationFrame(function draw() {
  var frame = renderer.frame();
  (0, _renderToCanvas.renderToCanvas)({
    canvas: canvas,
    context: context,
    assets: assets
  }, frame);
  requestAnimationFrame(draw);
});

/***/ }),

/***/ "./src/engine/browser/production.tsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("./node_modules/@babel/polyfill/lib/index.js");

var React = _interopRequireWildcard(__webpack_require__("./node_modules/react/index.js"));

var _gameRender = __webpack_require__("./src/main/game-render.tsx");

var _render = __webpack_require__("./node_modules/@morleydev/pauper/render/jsx/render.js");

var _webAssetLoader = __webpack_require__("./node_modules/@morleydev/pauper/assets/web-asset-loader.service.js");

var _renderToCanvas = __webpack_require__("./node_modules/@morleydev/pauper/render/render-to-canvas.func.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var canvas = document.getElementById("render-target");

if (canvas == null) {
  throw new Error("Could not find #render-target");
}

var context = canvas.getContext("2d");

if (context == null) {
  throw new Error("Could not acquire 2d rendering context");
}

var element = document.getElementById("canvas-container");

if (element == null) {
  throw new Error("Could not find #canvas-container");
}

var assets = new _webAssetLoader.WebAssetLoader();
var renderer = new _render.ReactRenderer(React.createElement(_gameRender.Game, null));
requestAnimationFrame(function draw() {
  var frame = renderer.frame();
  (0, _renderToCanvas.renderToCanvas)({
    canvas: canvas,
    context: context,
    assets: assets
  }, frame);
  requestAnimationFrame(draw);
});

/***/ }),

/***/ "./src/index.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("./node_modules/@babel/polyfill/lib/index.js");

var _isBrowser = __webpack_require__("./node_modules/@morleydev/pauper/utility/is-browser.js");

var _isProduction = __webpack_require__("./node_modules/@morleydev/pauper/utility/is-production.js");

if (_isBrowser.isBrowser) {
  if (!_isProduction.isProduction && module.hot) {
    __webpack_require__("./src/engine/browser/hot-reload.tsx");
  } else {
    __webpack_require__("./src/engine/browser/production.tsx");
  }
} else {}

/***/ }),

/***/ "./src/main/game-render.tsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Game = void 0;

__webpack_require__("./node_modules/@morleydev/pauper/render/jsx/render.js");

var React = _interopRequireWildcard(__webpack_require__("./node_modules/react/index.js"));

var _shapes = __webpack_require__("./node_modules/@morleydev/pauper/models/shapes.model.js");

var _colour = __webpack_require__("./node_modules/@morleydev/pauper/models/colour.model.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var Game = function Game(props) {
  return React.createElement("clear", {
    colour: (0, _colour.RGB)(0, 0, 0)
  }, React.createElement("origin", {
    coords: (0, _shapes.Point2)(256, 256)
  }, React.createElement(BallColourFader, null)));
};

exports.Game = Game;

function _ref(state) {
  return {
    colour: (0, _colour.RGBA)(Math.random() * 255, Math.random() * 255, Math.random() * 255, 1)
  };
}

function _componentWillMount() {
  var _this2 = this;

  this.timer = setInterval(function () {
    return _this2.setState(_ref);
  }, 50);
}

function _componentWillUnmount() {
  clearInterval(this.timer);
}

function _render() {
  console.log(this.state.colour);
  return React.createElement("fill", {
    shape: (0, _shapes.Circle)(0, 0, 25),
    colour: this.state.colour
  });
}

var BallColourFader =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(BallColourFader, _React$Component);

  function BallColourFader(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.colourWheel = [];
    _this.timer = null;
    _this.state = {
      colour: (0, _colour.RGBA)(0, 0, 0, 1)
    };
    return _this;
  }

  var _proto = BallColourFader.prototype;
  _proto.componentWillMount = _componentWillMount;
  _proto.componentWillUnmount = _componentWillUnmount;
  _proto.render = _render;
  return BallColourFader;
}(React.Component);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,